<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringCloud学习笔记</title>
      <link href="/2020/07/06/springcloud/"/>
      <url>/2020/07/06/springcloud/</url>
      
        <content type="html"><![CDATA[<h3 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h3><blockquote><p>微服务是一个新兴的软件架构，就是把一个大型的单个应用程序和服务拆分为数十个的支持微服务。一个微服务的策略可以让工作变得更为简便，它可扩展单个组件而不是整个的应用程序堆栈，从而满足服务等级协议。</p></blockquote><p><a href="https://martinfowler.com/articles/microservices.html" target="_blank" rel="noopener">詹姆斯·刘易斯对微服务的定义</a></p><p><a href="https://www.cnblogs.com/liuning8023/p/4493156.html" target="_blank" rel="noopener">中文版</a></p><h5 id="微服务架构四个核心问题"><a href="#微服务架构四个核心问题" class="headerlink" title="微服务架构四个核心问题"></a>微服务架构四个核心问题</h5><ol><li>在多服务情况下，客户端如何访问？</li><li>多个服务之间如何通信？</li><li>如何治理多个服务？</li><li>服务突然挂掉如何处理？</li></ol><p>主要可划分为：</p><ul><li>API</li><li>HTTP，RPC</li><li>注册和发现</li><li>熔断机制</li></ul><p>解决方案：</p><ul><li>Spring Cloud NetFlix  一站式解决方案<ul><li>api网关：zuul组件</li><li>Feign ——HttpClient ——Http通信方式，同步，阻塞</li><li>服务注册发现：Eureka</li><li>熔断机制：Hystrix</li></ul></li><li>Apache Dubbo Zookeeper 半自动，需要整合其他的框架<ul><li>api：使用第三方组件，或者自己实现</li><li>Dubbo</li><li>ZooKeeper</li><li>借助Hystrix</li></ul></li><li>Spring Cloud Alibaba 一站式解决方案，更简单</li></ul><h5 id="微服务与微服务架构"><a href="#微服务与微服务架构" class="headerlink" title="微服务与微服务架构"></a>微服务与微服务架构</h5><p><strong>微服务：</strong></p><p>​    强调的是服务的大小，它关注的是某个点，是具体解决某个问题/提供落地对应服务的一个服务应用</p><p><strong>微服务架构：</strong></p><p>​    微服务架构是一种架构模式，他提倡将单一的应用程序划分为一组小的服务，服务之间互相协调，互相配合，为用户提供最终价值。每个服务运行在其独立的进程中，服务于服务间采用轻量级的通信机制互相协作，每个服务都围绕着具体的业务进行构建，并且能够被独立的部署到生产环境中，另外，应尽量避免统一的，集中式的服务管理机制，对具体的一个服务而言，应根据业务上下文，选择合适的语言，工具对其进行构建</p><h5 id="微服务的优缺点"><a href="#微服务的优缺点" class="headerlink" title="微服务的优缺点"></a>微服务的优缺点</h5><p><strong>优点：</strong></p><ul><li>每个服务足够内聚，足够小，代码容易理解，这样能聚焦一个指定的业务功能或业务需求；</li><li>开发简单，开发效率高，一个服务可能就是专一的只干一件事；</li><li>微服务能被小团队单独开发；</li><li>微服务是松耦合的，是由功能意义的服务，无论是在开发阶段或是部署阶段都是独立的；</li><li>微服务能使用不同的语言开发；</li><li>易于第三方集成，微服务允许容易且灵活的方式集成自动部署，通过持续集成工具，如jenkins，Hudson，bamboo；</li><li>微服务易被开发人员理解、修改和维护，这样小团队能够更关注自己的工作成果，无需通过合作才能体现价值；</li><li>微服务允许利用融合最新技术；</li><li>微服务知识业务逻辑代码，不会与HTML、CSS或其他界面混合；</li><li>每个微服务都有自己的存储能力，可以有自己的数据库，也可以有统一的数据库；</li></ul><p><strong>缺点：</strong></p><ul><li>开发人员要处理分布式系统的复杂性</li><li>多服务运维难度随着服务增加压力变大；</li><li>系统部署依赖</li><li>服务间通信成本</li><li>数据一致性</li><li>系统集成测试</li><li>性能监控</li></ul><h5 id="微服务技术栈有哪些"><a href="#微服务技术栈有哪些" class="headerlink" title="微服务技术栈有哪些"></a>微服务技术栈有哪些</h5><table><thead><tr><th align="left">微服务条目</th><th align="left">落地技术</th></tr></thead><tbody><tr><td align="left">服务开发</td><td align="left">SpringBoot、Spring、SpringMVC</td></tr><tr><td align="left">服务配置与管理</td><td align="left">NetFlix公司的Archaius、阿里的Diamond</td></tr><tr><td align="left">服务注册与发现</td><td align="left">Eureka、Consul、ZooKeeper</td></tr><tr><td align="left">服务调用</td><td align="left">Rest、RPC、gRPC</td></tr><tr><td align="left">服务熔断器</td><td align="left">Hystrix、Envoy</td></tr><tr><td align="left">负载均衡</td><td align="left">Ribbon、Nginx</td></tr><tr><td align="left">服务接口调用（客户端调用服务的简化工具）</td><td align="left">Feign</td></tr><tr><td align="left">消息队列</td><td align="left">Kafka、RabbitMQ、ActiveMQ</td></tr><tr><td align="left">服务配置中心管理</td><td align="left">SpringCloudConfig、chef</td></tr><tr><td align="left">服务路由（API网关）</td><td align="left">Zuul</td></tr><tr><td align="left">服务监控</td><td align="left">Zabbix、Nagios、Metrics、Specatator</td></tr><tr><td align="left">全链路追踪</td><td align="left">Zipkin、Brave、Dapper</td></tr><tr><td align="left">服务部署</td><td align="left">Docker、OPenStack、Kubernetes</td></tr><tr><td align="left">数据流操作开发包</td><td align="left">SpringCloudStream（封装与redis、Rabbit、Kafka等发送接收消息）</td></tr><tr><td align="left">事件消息总线</td><td align="left">Spring Cloud Bus</td></tr></tbody></table><h5 id="各服务框架对比"><a href="#各服务框架对比" class="headerlink" title="各服务框架对比"></a>各服务框架对比</h5><table><thead><tr><th align="left">功能点/服务框架</th><th align="left">NetFlix/Spring Cloud</th><th align="left">Motan</th><th>gRPC</th><th>Thrift</th><th>Dubbo/DubboX</th></tr></thead><tbody><tr><td align="left">功能定位</td><td align="left">完整的微服务框架</td><td align="left">RPC框架，但整合了ZK或Consul，实现集群环境的基本服务注册与实现</td><td>RPC框架</td><td>RPC框架</td><td>服务框架</td></tr><tr><td align="left">支持REST</td><td align="left">是，Ribbon支持多种可拔插的序列化选择</td><td align="left">否</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="left">支持RPC</td><td align="left">否</td><td align="left">是（Hession2）</td><td>是</td><td>是</td><td>是</td></tr><tr><td align="left">支持多语言</td><td align="left">是（Rest形式）</td><td align="left">否</td><td>是</td><td>是</td><td>否</td></tr><tr><td align="left">负载均衡</td><td align="left">是（服务端zuul+客户端Ribbon），zull-服务，动态路由，云端负载均衡 Eureka(针对中间层服务器)</td><td align="left">是（客户端）</td><td>否</td><td>否</td><td>是（客户端）</td></tr><tr><td align="left">配置服务</td><td align="left">NetFlix Archaius，SpringCloudConfig Server集中配置</td><td align="left">是（ZooKeeper提供）</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="left">服务调用链监控</td><td align="left">是（zuul），zuul提供边缘服务，api网关</td><td align="left">否</td><td>否</td><td>否</td><td>否</td></tr><tr><td align="left">高可用/容错</td><td align="left">是（服务端Hystrix+客户端Ribbon）</td><td align="left">是（客户端）</td><td>否</td><td>否</td><td>是（客户端）</td></tr><tr><td align="left">典型应用案例</td><td align="left">NetFlix</td><td align="left">Sina</td><td>Google</td><td>Facebook</td><td></td></tr><tr><td align="left">社区活跃度</td><td align="left">高</td><td align="left">一般</td><td>高</td><td>一般</td><td>2017年后重新开始维护，之前中断5年</td></tr><tr><td align="left">学习难度</td><td align="left">中</td><td align="left">低</td><td>高</td><td>高</td><td>低</td></tr><tr><td align="left">文档丰富程度</td><td align="left">高</td><td align="left">一般</td><td>一般</td><td>一般</td><td>高</td></tr><tr><td align="left">其它</td><td align="left">Spring Cloud Bus为我们的应用程序带来更多的管理端点</td><td align="left">支持降级</td><td>NetFlix内部在开发集成gRPC</td><td>IDL定义</td><td>实践的公司比较多</td></tr></tbody></table><h3 id="常见面试题"><a href="#常见面试题" class="headerlink" title="常见面试题"></a>常见面试题</h3><ol><li>什么是微服务？</li><li>微服务之间是如何独立通信的？</li><li>SpringCloud 和 Dubbo 有哪些区别？</li><li>SpringCloud 和 SpringBoot ，请谈谈对他们的理解！</li><li>什么是服务熔断？什么是服务降级？</li><li>微服务的优缺点分别是什么？请说一下在开发中遇到的一些BUG！</li><li>你所知道的微服务技术栈有哪些？</li><li>Eureka 和 ZooKeeper 都是可以提供服务注册与发现功能，请说一下二者区别!</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringBoot学习笔记</title>
      <link href="/2020/07/05/springboot/"/>
      <url>/2020/07/05/springboot/</url>
      
        <content type="html"><![CDATA[<h3 id="SpringBoot实现邮件任务"><a href="#SpringBoot实现邮件任务" class="headerlink" title="SpringBoot实现邮件任务"></a>SpringBoot实现邮件任务</h3><blockquote><p>导入依赖</p></blockquote><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><blockquote><p>配置</p></blockquote><ol><li>登录qq邮箱——点击设置——点击账户——开启服务：POP3/SMTP服务，获取授权码<code>awraqgytesdlddib</code></li><li>写入配置文件</li></ol><blockquote><p>application.properties</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">spring.mail.username</span><span class="token punctuation">=</span><span class="token attr-value">2967753215@qq.com</span><span class="token attr-name">spring.mail.password</span><span class="token punctuation">=</span><span class="token attr-value">awraqgytesdlddib</span><span class="token attr-name">spring.mail.host</span><span class="token punctuation">=</span><span class="token attr-value">smtp.qq.com</span><span class="token comment" spellcheck="true"># 开启加密验证</span><span class="token attr-name">spring.mail.properties.mail.smtp.ssl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true   </span><span class="token comment" spellcheck="true"># 看教程要为true，才能发送，不过经过自己练习发现改为false才能发送成功，可能由于环境原因，之前有动过</span></code></pre><p>测试发送邮件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@SpringBootTest</span><span class="token keyword">class</span> <span class="token class-name">MailApplicationTests</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Autowired</span>    JavaMailSenderImpl mailSender<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoads</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        SimpleMailMessage simpleMailMessage <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleMailMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 设置邮件信息</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"黑天鹅事件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"不要回答！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2967753215@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        simpleMailMessage<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2967753215@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 发送邮件</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>simpleMailMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>复杂的邮件，带有附件</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">void</span> <span class="token function">contextLoadsPro</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> MessagingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 实现复杂的邮件</span>        MimeMessage mimeMessage <span class="token operator">=</span> mailSender<span class="token punctuation">.</span><span class="token function">createMimeMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 组装</span>        MimeMessageHelper helper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MimeMessageHelper</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// true支持多文件</span>        <span class="token comment" spellcheck="true">// 正文</span>        helper<span class="token punctuation">.</span><span class="token function">setSubject</span><span class="token punctuation">(</span><span class="token string">"绝密文件 代码110001"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String str <span class="token operator">=</span> <span class="token string">"三长一短选最短，三短一长选最长。长短不一选择B,参差不齐就选D。色子打五选择B，色子打六再来一次。"</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span><span class="token string">"&lt;p style='color:red'>"</span><span class="token operator">+</span>str<span class="token operator">+</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//第二个参数设为true，表示支持html格式</span>        <span class="token comment" spellcheck="true">// 附件</span>        helper<span class="token punctuation">.</span><span class="token function">addAttachment</span><span class="token punctuation">(</span><span class="token string">"10101.png"</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"C:\\Users\\lenovo\\Pictures\\\u007Fjust view\\10101.png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setTo</span><span class="token punctuation">(</span><span class="token string">"2967753215@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        helper<span class="token punctuation">.</span><span class="token function">setFrom</span><span class="token punctuation">(</span><span class="token string">"2967753215@qq.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mailSender<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>mimeMessage<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="SpringBoot实现定时任务"><a href="#SpringBoot实现定时任务" class="headerlink" title="SpringBoot实现定时任务"></a>SpringBoot实现定时任务</h3><ol><li><p>在Application类上加注解<code>@EnableScheduling</code>  开启定时功能</p></li><li><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ScheduledService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// cron 表达式</span>    <span class="token comment" spellcheck="true">// 秒 分 时 日 月 周几</span>    <span class="token comment" spellcheck="true">// 30 15 10  *  *  ？    每天10点15分30秒执行</span>    <span class="token comment" spellcheck="true">// 0 0/5 10,18 * * ？   每天10点和18点每隔五分钟执行一次</span>    <span class="token comment" spellcheck="true">// 0  15 10 ？ * 1-6      每个月周一到周六10点15分执行一次</span>    <span class="token comment" spellcheck="true">// cron表达式详解 参考博客 https://www.cnblogs.com/junrong624/p/4239517.html</span>    <span class="token annotation punctuation">@Scheduled</span><span class="token punctuation">(</span>cron <span class="token operator">=</span> <span class="token string">"0/2 * * * * *"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">// 每两秒执行一次</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">TimeController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"吉时已到！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>swagger学习笔记</title>
      <link href="/2020/07/05/swagger-xue-xi-bi-ji/"/>
      <url>/2020/07/05/swagger-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="Swagger介绍"><a href="#Swagger介绍" class="headerlink" title="Swagger介绍"></a>Swagger介绍</h3><blockquote><p>Swagger 是一个规范和完整的框架，用于生成、描述、调用和可视化 RESTful 风格的 Web 服务。</p></blockquote><p>发现了痛点就要去找解决方案。解决方案用的人多了，就成了标准的规范，这就是Swagger的由来。通过这套规范，你只需要按照它的规范去定义接口及接口相关的信息。再通过Swagger衍生出来的一系列项目和工具，就可以做到生成各种格式的接口文档，生成多种语言的客户端和服务端的代码，以及在线接口调试页面等等。这样，如果按照新的开发模式，在开发新版本或者迭代版本的时候，只需要更新Swagger描述文件，就可以自动生成接口文档和客户端服务端代码，做到调用端代码、服务端代码以及接口文档的一致性。</p><p><strong>Swagger Codegen</strong>: 通过Codegen 可以将描述文件生成html格式和cwiki形式的接口文档，同时也能生成多钟语言的服务端和客户端的代码。支持通过jar包，docker，node等方式在本地化执行生成。也可以在后面的Swagger Editor中在线生成。</p><p><strong>Swagger UI</strong>:提供了一个可视化的UI页面展示描述文件。接口的调用方、测试、项目经理等都可以在该页面中对相关接口进行查阅和做一些简单的接口请求。该项目支持在线导入描述文件和本地部署UI项目。</p><p><strong>Swagger Editor</strong>: 类似于markendown编辑器的编辑Swagger描述文件的编辑器，该编辑支持实时预览描述文件的更新效果。也提供了在线编辑器和本地部署编辑器两种方式。</p><p><strong>Swagger Inspector</strong>: 感觉和postman差不多，是一个可以对接口进行测试的在线版的postman。比在Swagger UI里面做接口请求，会返回更多的信息，也会保存你请求的实际请求参数等数据。</p><p><strong>Swagger Hub</strong>：集成了上面所有项目的各个功能，你可以以项目和版本为单位，将你的描述文件上传到Swagger Hub中。在Swagger Hub中可以完成上面项目的所有工作，需要注册账号，分免费版和收费版。</p><h3 id="SpringBoot集成Swagger"><a href="#SpringBoot集成Swagger" class="headerlink" title="SpringBoot集成Swagger"></a>SpringBoot集成Swagger</h3><p>在项目使用Swagger需要Springbox</p><ul><li>Swagger2</li><li>ui</li></ul><ol><li>新建一个SpringBoot项目</li><li>导入相关依赖</li></ol><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger2 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!-- https://mvnrepository.com/artifact/io.springfox/springfox-swagger-ui --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.springfox<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>springfox-swagger-ui<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>编写示例工程</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RestController<span class="token punctuation">;</span><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><ol start="4"><li>编写swagge的配置文件</li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>swagger<span class="token punctuation">.</span>config<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Configuration<span class="token punctuation">;</span><span class="token keyword">import</span> springfox<span class="token punctuation">.</span>documentation<span class="token punctuation">.</span>swagger2<span class="token punctuation">.</span>annotations<span class="token punctuation">.</span>EnableSwagger2<span class="token punctuation">;</span><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>    <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><ol start="5"><li>访问<code>http://localhost:8080/swagger-ui.html</code></li></ol><p><img src="../../themes/matery/source/img/image-20200705144921766.png" alt="image-20200705144921766"></p><h3 id="配置Swaggger的信息"><a href="#配置Swaggger的信息" class="headerlink" title="配置Swaggger的信息"></a>配置Swaggger的信息</h3><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token annotation punctuation">@EnableSwagger2</span>    <span class="token comment" spellcheck="true">// 开启swagger2</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SwaggerConfig</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 配置了swagger的docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 配置swagger的apiInfo信息</span>    <span class="token keyword">private</span> ApiInfo <span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        Contact contact <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contact</span><span class="token punctuation">(</span><span class="token string">"yuan"</span><span class="token punctuation">,</span> <span class="token string">"http://www.baidu.com"</span><span class="token punctuation">,</span> <span class="token string">"123@163.com"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span>  <span class="token class-name">ApiInfo</span><span class="token punctuation">(</span>                <span class="token string">"这是一个api文档"</span><span class="token punctuation">,</span>          <span class="token comment" spellcheck="true">// 标题</span>                <span class="token string">"描述信息"</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// 描述</span>                <span class="token string">"v1.11"</span><span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">// 版本号</span>                <span class="token string">"urn:tos"</span><span class="token punctuation">,</span>                 <span class="token comment" spellcheck="true">// 服务条款网址</span>                contact<span class="token punctuation">,</span>                   <span class="token comment" spellcheck="true">// 作者信息</span>                <span class="token string">"Apache 2.0"</span><span class="token punctuation">,</span>              <span class="token comment" spellcheck="true">//许可证信息</span>                <span class="token string">"http://www.apache.org/licenses/LICENSE-2.0"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//许可证url</span>                <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="配置Swagger的扫描接口"><a href="#配置Swagger的扫描接口" class="headerlink" title="配置Swagger的扫描接口"></a>配置Swagger的扫描接口</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 配置了swagger的docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                 <span class="token comment" spellcheck="true">// RequestHandlerSelectors: 配置要扫描接口的方式</span>                 <span class="token comment" spellcheck="true">// basePackage：指定要扫描的包</span>                 <span class="token comment" spellcheck="true">// any：扫描全部</span>                 <span class="token comment" spellcheck="true">// none：全都不扫描</span>                 <span class="token comment" spellcheck="true">// withClassAnnotation：扫描类上的注解，参数是一个注解的反射对象</span>                 <span class="token comment" spellcheck="true">// withMethodAnnotation：扫描方法上的注解</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.yuan.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true">//paths：过滤什么路径</span>                <span class="token punctuation">.</span><span class="token function">paths</span><span class="token punctuation">(</span>PathSelectors<span class="token punctuation">.</span><span class="token function">ant</span><span class="token punctuation">(</span><span class="token string">"/yuan/**"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="配置是否启动Swagger"><a href="#配置是否启动Swagger" class="headerlink" title="配置是否启动Swagger"></a>配置是否启动Swagger</h3><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">// 配置了swagger的docket的bean实例</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果改为false，则swagger不能在浏览器被访问</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.yuan.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="小练习："><a href="#小练习：" class="headerlink" title="小练习："></a>小练习：</h5><p><em>如何让开发环境下能使用swagger而发布环境下不能使用</em></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket</span><span class="token punctuation">(</span>Environment environment<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 设置需要显示swagger的环境</span>        Profiles of <span class="token operator">=</span> Profiles<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"dev"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 判断是否事需要swagger的环境，若是返回true，不是返回false</span>        <span class="token keyword">boolean</span> flag <span class="token operator">=</span> environment<span class="token punctuation">.</span><span class="token function">acceptsProfiles</span><span class="token punctuation">(</span>of<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token function">apiInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">enable</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//如果为false，则swagger不能在浏览器被访问</span>                <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">apis</span><span class="token punctuation">(</span>RequestHandlerSelectors<span class="token punctuation">.</span><span class="token function">basePackage</span><span class="token punctuation">(</span><span class="token string">"com.yuan.swagger.controller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>配置swagger的组</p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"第一组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"第二组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> Docket <span class="token function">docket3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Docket</span><span class="token punctuation">(</span>DocumentationType<span class="token punctuation">.</span>SWAGGER_2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">groupName</span><span class="token punctuation">(</span><span class="token string">"第三组"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="配置swagger的实体类信息"><a href="#配置swagger的实体类信息" class="headerlink" title="配置swagger的实体类信息"></a>配置swagger的实体类信息</h3><blockquote><p>新建实体类User</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ApiModel</span><span class="token punctuation">(</span><span class="token string">"用户"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"姓名"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String name<span class="token punctuation">;</span>    <span class="token annotation punctuation">@ApiModelProperty</span><span class="token punctuation">(</span><span class="token string">"年龄"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> Integer age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>controller配置</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RestController</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 只要我们的接口中，返回值存在实体类，就会被扫描到swagger中</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/user"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> User <span class="token function">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
            <tag> springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOF23设计方式</title>
      <link href="/2020/05/26/gof23-she-ji-fang-shi/"/>
      <url>/2020/05/26/gof23-she-ji-fang-shi/</url>
      
        <content type="html"><![CDATA[<h3 id="GOF23"><a href="#GOF23" class="headerlink" title="GOF23"></a>GOF23</h3><h5 id="创建型模式："><a href="#创建型模式：" class="headerlink" title="创建型模式："></a>创建型模式：</h5><ul><li>单例模式</li><li>工厂模式</li><li>抽象工厂模式</li><li>建造者模式</li><li>原型模式</li></ul><h5 id="结构性模式"><a href="#结构性模式" class="headerlink" title="结构性模式"></a>结构性模式</h5><ul><li>适配器模式</li><li>桥接模式</li><li>装饰模式</li><li>组合模式</li><li>外观模式</li><li>享元模式</li><li>代理模式</li></ul><h5 id="行为型模式"><a href="#行为型模式" class="headerlink" title="行为型模式"></a>行为型模式</h5><ul><li>模板方法模式</li><li>命令模式</li><li>迭代器模式</li><li>观察者模式</li><li>中介者模式</li><li>备忘录模式</li><li>解释器模式</li><li>状态模式</li><li>策略模式</li><li>职责链模式</li><li>访问者模式</li></ul><h5 id="OOP七大原则"><a href="#OOP七大原则" class="headerlink" title="OOP七大原则"></a>OOP七大原则</h5><ul><li>开闭原则：对扩展开放，对修改关闭；</li><li>里氏替换原则：继承必须确保超类所拥有的性质在子类中仍然成立；</li><li>依赖倒置原则：要面向接口编程，不要面向实现编程；</li><li>单一职责原则：控制类的力度大小，将对象解耦，提高其内聚性；</li><li>接口隔离原则：要为各个类建立它们需要的专用接口；</li><li>迪米特法则：只与你的直接朋友交谈，不跟陌生人说话；</li><li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现；</li></ul><h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><blockquote><p> 核心作用</p></blockquote><ul><li>保证一个类只有一个实例，并且提供一个访问该实例的全局访问点</li></ul><blockquote><p>应用场景</p></blockquote><ul><li>Windows的任务管理器</li><li>Windows的回收站</li><li>项目中，读取配置文件的类，一般也只有一个对象，没必要每次都去new对象读取</li><li>网站计数器一般也会采用单例模式，可以保证同步</li><li>数据库连接池一般也是单例模式</li><li>在Servlet中，每一个Servlet也是单例的</li><li>在Spring中，每个bean默认为单例</li></ul><h5 id="饿汉式单例"><a href="#饿汉式单例" class="headerlink" title="饿汉式单例"></a>饿汉式单例</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 饿汉式单例 * 不管使用不使用都会实例化一个Hungry对象 * 浪费空间 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Hungry HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hungry <span class="token function">getHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> HUNGRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>饿汉式单例1</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 饿汉式单例 * 不管使用不使用都会实例化一个Hungry对象 * 浪费空间 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有构造器</span>    <span class="token keyword">private</span> <span class="token function">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> Hungry HUNGRY <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> Hungry <span class="token function">getHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> HUNGRY<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200526142722764.png" alt=""></p><blockquote><p>饿汉式单例2，线程安全版,但反射可破解    </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式单例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前线程为"</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyMan<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 单线程下可用，但多线程时这个方式不能保证起作用     * @return     */</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 双重检测锁模式，DCL懒汉式</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 只有当lazyMan为空时，才创建对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">/**                     * 实例化这个对象不是原子性操作，会有三步                     *  1、分配内存空间                     *  2、执行构造方法，初始化对象                     *  3、把这个对象指向这个空间                     *  实际中可能会出现顺序错乱的现象，                     *  比如132，一个线程会先把未初始化的对象占用空间，导致LazyMan!=null，但这个空间什么也没有                     *  而这是另一个线程这是发现LazyMan!=null ,会直接返回这个未初始化的lazyMan，从而出现异常                     *  所以需要加上volatile，禁止指令重排                     */</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>lazyMan<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 创建20个线程，测试多线程下懒汉式加载会有几个对象</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                LazyMan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>使用反射破解上述双重检测锁模式</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式单例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyMan<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 双重检测锁模式，DCL懒汉式</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 只有当lazyMan为空时，才创建对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        LazyMan instance <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用反射破解单例, 获取空参构造器</span>        Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无视私有构造器</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan lazyMan <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用反射实例化的对象"</span><span class="token operator">+</span>lazyMan<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用getInstance实例化的对象"</span><span class="token operator">+</span>instance<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"lazyMan==instance："</span><span class="token operator">+</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>instance<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200526145447096.png" alt=""></p><blockquote><p>懒汉式单例3，设置第三把锁，防止反射破解单例</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 懒汉式单例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LazyMan</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 设置红绿灯</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 私有构造器</span>    <span class="token keyword">private</span> <span class="token function">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 加第三把锁，反射调用时报错</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span><span class="token punctuation">{</span>                flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">throw</span>  <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"禁止反射破坏单例！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> LazyMan lazyMan<span class="token punctuation">;</span>    <span class="token keyword">public</span>  <span class="token keyword">static</span> LazyMan <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 双重检测锁模式，DCL懒汉式</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// 只有当lazyMan为空时，才创建对象</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>lazyMan<span class="token operator">==</span>null<span class="token punctuation">)</span><span class="token punctuation">{</span>                    lazyMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> lazyMan<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用反射破解单例, 获取空参构造器</span>        Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无视私有构造器</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan lazyMan1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan lazyMan2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200526151441572.png" alt=""></p><p>但上述加三个锁依然可以破解，以下为主要代码</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 通过反射拿到红绿灯字段</span>        Field flag <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用反射破解单例, 获取空参构造器</span>        Constructor<span class="token operator">&lt;</span>LazyMan<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> LazyMan<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>null<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 无视私有构造器</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LazyMan lazyMan1 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        flag<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>lazyMan1<span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 把第一个对象的值改为false</span>        LazyMan lazyMan2 <span class="token operator">=</span> declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用反射实例化的对象"</span><span class="token operator">+</span>lazyMan1<span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用反射实例化的对象"</span><span class="token operator">+</span>lazyMan2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200526152004357.png" alt=""></p><blockquote><p>枚举防止反射破解单例</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> single<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>Constructor<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>InvocationTargetException<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 枚举实现单例 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span> EnumSingle <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> EnumSingle <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> NoSuchMethodException<span class="token punctuation">,</span> IllegalAccessException<span class="token punctuation">,</span> InvocationTargetException<span class="token punctuation">,</span> InstantiationException <span class="token punctuation">{</span>        EnumSingle instance <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 使用反射</span>        Constructor<span class="token operator">&lt;</span>EnumSingle<span class="token operator">></span> declaredConstructor <span class="token operator">=</span> EnumSingle<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span>String<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        declaredConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200526154155525.png" alt=""></p><p><img src="/img/image-20200526154455636.png" alt=""></p><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><blockquote><p>本质</p></blockquote><ul><li>实例化对象不使用new，用工厂方法代替</li><li>将选择实现类，创建对象统一管理和控制，从而将调用者和实现类解耦</li></ul><blockquote><p>作用</p></blockquote><ul><li>实现了创建者和调用者的分离</li><li>详细分类<ul><li>简单工厂模式<ul><li>用来生产同一等级结构的任意产品；<em>新增加产品，需要修改代码</em></li></ul></li><li>工厂方法模式<ul><li>用来生产同一等级结构中的固定产品；<em>支持增加任意产品</em></li></ul></li><li>抽象工厂模式<ul><li>围绕一个超级工厂创建其他的工厂</li></ul></li></ul></li></ul><blockquote><p>应用场景</p></blockquote><ul><li>jdk中Calendar的getInstance方法</li><li>jdbc中Connection对象的获取</li><li>spring中ioc容器创建管理bean对象</li><li>反射中Class对象的newInstance方法</li></ul><blockquote><p>工厂模式满足的OOP七大原则</p></blockquote><ul><li>开闭原则</li><li>依赖倒转原则</li><li>迪米特法则</li></ul><p>以下为代码实现</p><hr><blockquote><p>car接口 </p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> factory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>两个car实现类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Audi</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"奥迪。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Volkswagen</span> <span class="token keyword">implements</span> <span class="token class-name">Car</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大众。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="简单工厂模式"><a href="#简单工厂模式" class="headerlink" title="简单工厂模式"></a>简单工厂模式</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> factory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 简单工厂模式，又称为静态工厂模式 * 再增加新的产品时，需要修改工厂类中代码，不符合开闭原则 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 方法一，若要增加新的产品，需要修改if-else语句</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">getCar</span><span class="token punctuation">(</span>String carName<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Audi"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>carName<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"Volkswagen"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Volkswagen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> null<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 方法二，为每一个产品设置一个方法，但新增产品时，还是要增加一个方法，</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">getAudi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Car <span class="token function">getVolkswagen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Volkswagen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>调用者实现</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> factory<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 一般情况下，在不使用工厂模式时，需要再调用者中实例化具体的类</span><span class="token comment" spellcheck="true">//        Car car1 = new Audi();</span><span class="token comment" spellcheck="true">//        Car car2 = new Volkswagen();</span><span class="token comment" spellcheck="true">//        使用简单工厂模式</span>        Car car1 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"Audi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car car2 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token string">"Volkswagen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car car3 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getAudi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car car4 <span class="token operator">=</span> CarFactory<span class="token punctuation">.</span><span class="token function">getVolkswagen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car1<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car2<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car3<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car4<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><ul><li>建立一个工厂接口，让新增的产品工厂实现这个接口</li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> factory<span class="token punctuation">.</span>methodFactory<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * 工厂方法模式 * 工厂接口，每当有新的产品，就先建一个该产品的独立工厂类，并实现CarFactory * 这种方式可以，在不改变接口代码的情况下，做到扩展。遵循了开闭原则 * 但同时可以发现，相比较简单工厂模式而言，工厂方法模式会多出很多实现类，显得有些繁琐 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>两个示例工厂实现类</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 专门生产奥迪的工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AudiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Audi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span> <span class="token comment" spellcheck="true">/** * 专门生产大众的工厂 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VolkswagenFactory</span> <span class="token keyword">implements</span> <span class="token class-name">CarFactory</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Car <span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Volkswagen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>调用者演示</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Consumer</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Car car1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AudiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Car car2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VolkswagenFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car1<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        car2<span class="token punctuation">.</span><span class="token function">getCarName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><hr><blockquote><p>比较工厂方法模式和简单工厂模式：</p></blockquote><ul><li>结构复杂度：工厂方法模式 &gt; 简单工厂模式</li><li>代码复杂度：工厂方法模式 &gt; 简单工厂模式</li><li>编程复杂度：工厂方法模式 &gt; 简单工厂模式</li><li>管理复杂度：工厂方法模式 &gt; 简单工厂模式</li></ul><p>综上可得出结论：==虽然工厂方法模式遵循了设计原则的开闭原则，但是各项成本增加；在实际的开发中，应优先考虑简单工厂模式==</p><h5 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h5><blockquote><p>抽象工厂模式提供了一个创建一系列相关或者相互依赖对象的接口，无需指定它们具体的类。</p></blockquote><p><strong>适用场景</strong></p><ul><li>客户端（应用层）不依赖于产品类实例如何被创建、实现等细节；</li><li>强调一系列相关的产品对象（属于同一产品族）一起使用创建对象需要大量的重复代码；</li><li>提供一个产品类的库，所有的产品以同样的接口出现，从而使得客户端不得不依赖具体的实现；</li></ul><p><strong>优点</strong></p><ul><li>具体产品在应用层的代码隔离，无需关心创建的细节；</li><li>将一个系列的产品统一到一起创建；</li></ul><p><strong>缺点</strong></p><ul><li>规定了所有可能被创建的产品集合，产品族中扩展新的产品困难；</li><li>增加了系统的抽象性和理解难度；</li></ul><p><img src="/img/image-20200716102800076.png" alt="抽象工厂模式"></p><blockquote><p>代码实现</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 生产手机接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IPhoneProduct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 路由器生产接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IRouteProduct</span> <span class="token punctuation">{</span>    <span class="token keyword">void</span> <span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 抽象工厂</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IProductFactory</span> <span class="token punctuation">{</span>    IPhoneProduct <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    IRouteProduct <span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小米工厂 </span><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">XiaomiFactory</span> <span class="token keyword">implements</span> <span class="token class-name">IProductFactory</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IPhoneProduct <span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> IRouteProduct <span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小米手机实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiPhone</span> <span class="token keyword">implements</span> <span class="token class-name">IPhoneProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给雷军打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"给雷军发短信"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 小米路由器实现类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">XiaomiRoute</span>  <span class="token keyword">implements</span> <span class="token class-name">IRouteProduct</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开小米路由器"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 客户端实现</span><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取小米工厂</span>        XiaomiFactory xiaomiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XiaomiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 小米工厂生产商品</span>        IPhoneProduct mPhone <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRouteProduct mRoute <span class="token operator">=</span> xiaomiFactory<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 商品展示功能</span>        mPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPhone<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mRoute<span class="token punctuation">.</span><span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 获取华为工厂</span>        HuaweiFactory huaweiFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HuaweiFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 华为工厂生产商品</span>        IPhoneProduct hPhone <span class="token operator">=</span> huaweiFactory<span class="token punctuation">.</span><span class="token function">getPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        IRouteProduct hRoute <span class="token operator">=</span> huaweiFactory<span class="token punctuation">.</span><span class="token function">getRoute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 商品展示功能</span>        hPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hPhone<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        hRoute<span class="token punctuation">.</span><span class="token function">openWifi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200716113515777.png" alt="UML类图"></p><h3 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h3><blockquote><p>建造者模式也属于创建型模式，它提供了一种创建对象的最佳模式。</p></blockquote><p><strong>定义</strong></p><p>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。</p><p><strong>作用</strong></p><p>在用户不知道对象的建造过程和细节的情况下就可以直接创建复杂的对象。</p><p>用户只需要给出指定复杂对象的类型和内容，建造者模式负责按顺序创建复杂对象（把内部的建造过程和细节隐藏起来）</p><p><strong>例子</strong></p><p>工厂（建造者模式）：负责制造汽车（组装过程和细节在工厂内）。</p><p>汽车购买者（用户）：说出汽车型号（对象类型和内容），然后直接购买就可以使用。</p><p><strong>优点</strong></p><ul><li>产品的建造和表示分离，实现解耦。使用建造者模式可以使客户端不必知道产品内部组成的细节；</li><li>将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰；</li><li>具体的建造者类之间是相互独立的，这有利于系统的扩展，增加新的具体建造者无需修改原有类库的代码，符合开闭原则；</li></ul><p><strong>缺点</strong></p><ul><li>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似；如果产品之间的差异性很大，则不适合使用建造者模式，因此其适用范围收到一定的限制；</li><li>如果产品内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大；</li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java设计模式 </tag>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax学习笔记</title>
      <link href="/2020/05/09/ajax-xue-xi/"/>
      <url>/2020/05/09/ajax-xue-xi/</url>
      
        <content type="html"><![CDATA[<h1 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a><strong>AJAX</strong></h1><h3 id="ajax概念"><a href="#ajax概念" class="headerlink" title="ajax概念"></a>ajax概念</h3><ul><li><p><strong>Asynchronous JavaScript and XML（异步的 JavaScript 和 XML）</strong></p></li><li><p>AJAX 不是新的编程语言，而是一种使用现有标准的新方法</p></li><li><p>AJAX 是与服务器交换数据并更新部分网页的艺术，在不重新加载整个页面的情况下</p></li><li><p>AJAX 是一种用于创建快速动态网页的技术。</p><p>通过在后台与服务器进行少量数据交换，AJAX 可以使网页实现异步更新。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</p></li></ul><h3 id="AJAX-创建-XMLHttpRequest-对象"><a href="#AJAX-创建-XMLHttpRequest-对象" class="headerlink" title="AJAX - 创建 XMLHttpRequest 对象"></a>AJAX - 创建 XMLHttpRequest 对象</h3><p><strong>XMLHttpRequest 是 AJAX 的基础</strong></p><h5 id="XMLHttpRequest-对象"><a href="#XMLHttpRequest-对象" class="headerlink" title="XMLHttpRequest 对象"></a>XMLHttpRequest 对象</h5><p>所有现代浏览器均支持 XMLHttpRequest 对象（IE5 和 IE6 使用 ActiveXObject）。</p><p>XMLHttpRequest 用于在后台与服务器交换数据。这意味着可以在不重新加载整个网页的情况下，对网页的某部分进行更新</p><h5 id="创建-XMLHttpRequest-对象"><a href="#创建-XMLHttpRequest-对象" class="headerlink" title="创建 XMLHttpRequest 对象"></a>创建 XMLHttpRequest 对象</h5><p>所有现代浏览器（IE7+、Firefox、Chrome、Safari 以及 Opera）均内建 XMLHttpRequest 对象。</p><h5 id="创建-XMLHttpRequest-对象的语法："><a href="#创建-XMLHttpRequest-对象的语法：" class="headerlink" title="创建 XMLHttpRequest 对象的语法："></a>创建 XMLHttpRequest 对象的语法：</h5><pre class=" language-javascript"><code class="language-javascript">variable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="老版本的-Internet-Explorer-（IE5-和-IE6）使用-ActiveX-对象："><a href="#老版本的-Internet-Explorer-（IE5-和-IE6）使用-ActiveX-对象：" class="headerlink" title="老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象："></a>老版本的 Internet Explorer （IE5 和 IE6）使用 ActiveX 对象：</h5><pre class=" language-javascript"><code class="language-javascript">variable<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>为了应对所有的现代浏览器，包括 IE5 和 IE6，请检查浏览器是否支持 XMLHttpRequest 对象。如果支持，则创建 XMLHttpRequest 对象。如果不支持，则创建 ActiveXObject ：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> xmlhttp<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>XMLHttpRequest<span class="token punctuation">)</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE7+, Firefox, Chrome, Opera, Safari</span>  xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token keyword">else</span>  <span class="token punctuation">{</span><span class="token comment" spellcheck="true">// code for IE6, IE5</span>  xmlhttp<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">ActiveXObject</span><span class="token punctuation">(</span><span class="token string">"Microsoft.XMLHTTP"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="AJAX-向服务器发送请求"><a href="#AJAX-向服务器发送请求" class="headerlink" title="AJAX - 向服务器发送请求"></a>AJAX - 向服务器发送请求</h3><h5 id="向服务器发送请求"><a href="#向服务器发送请求" class="headerlink" title="向服务器发送请求"></a>向服务器发送请求</h5><p>如需将请求发送到服务器，我们使用 XMLHttpRequest 对象的 open() 和 send() 方法：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"test1.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><table><thead><tr><th>方法</th><th align="left">描述</th></tr></thead><tbody><tr><td></td><td align="left"></td></tr><tr><td>send(<em>string</em>)</td><td align="left">将请求发送到服务器。                                                                                                <em>string</em>：仅用于 POST 请求</td></tr></tbody></table><blockquote><p><code>open(method,url,async)</code>方法</p></blockquote><ul><li>作用：规定请求的类型、URL 以及是否异步处理请求。 </li><li><em>method</em>：请求的类型；GET 或 POST  </li><li><em>url</em>：文件在服务器上的位置 <em>async</em>：true（异步）或 false（同步）</li></ul><h5 id="GET-还是-POST？"><a href="#GET-还是-POST？" class="headerlink" title="GET 还是 POST？"></a>GET 还是 POST？</h5><p>与 POST 相比，GET 更简单也更快，并且在大部分情况下都能用。</p><p>然而，在以下情况中，请使用 POST 请求：</p><ul><li>无法使用缓存文件（更新服务器上的文件或数据库）</li><li>向服务器发送大量数据（POST 没有数据量限制）</li><li>发送包含未知字符的用户输入时，POST 比 GET 更稳定也更可靠</li></ul><h5 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a>GET 请求</h5><p>一个简单的 GET 请求：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"demo_get.asp"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>在上面的例子中，您可能得到的是缓存的结果。</p><p>为了避免这种情况，请向 URL 添加一个唯一的 ID：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"demo_get.asp?t="</span> <span class="token operator">+</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过 GET 方法发送信息，请向 URL 添加信息：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"demo_get2.asp?fname=Bill&amp;lname=Gates"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a>POST 请求</h5><p>一个简单 POST 请求：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"demo_post.asp"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>如果需要像 HTML 表单那样 POST 数据，请使用 setRequestHeader() 来添加 HTTP 头。然后在 send() 方法中规定您希望发送的数据：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"POST"</span><span class="token punctuation">,</span><span class="token string">"ajax_test.asp"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">"Content-type"</span><span class="token punctuation">,</span><span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"fname=Bill&amp;lname=Gates"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p><code>setRequestHeader(header,value)</code>方法</p></blockquote><ul><li>作用：向请求添加 HTTP 头。</li><li><em>header</em>: 规定头的名称</li><li><em>value</em>: 规定头的值</li></ul><h5 id="url-服务器上的文件"><a href="#url-服务器上的文件" class="headerlink" title="url - 服务器上的文件"></a>url - 服务器上的文件</h5><p>open() 方法的 <em>url</em> 参数是服务器上文件的地址：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajax_test.asp"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>该文件可以是任何类型的文件，比如 .txt 和 .xml，或者服务器脚本文件，比如 .asp 和 .php （在传回响应之前，能够在服务器上执行任务）。</p><h5 id="异步-True-或-False？"><a href="#异步-True-或-False？" class="headerlink" title="异步 - True 或 False？"></a>异步 - True 或 False？</h5><p>AJAX 指的是异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p><p>XMLHttpRequest 对象如果要用于 AJAX 的话，其 open() 方法的 async 参数必须设置为 true：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"ajax_test.asp"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>对于 web 开发人员来说，发送异步请求是一个巨大的进步。很多在服务器执行的任务都相当费时。AJAX 出现之前，这可能会引起应用程序挂起或停止。</p><p>通过 AJAX，JavaScript 无需等待服务器的响应，而是：</p><ul><li>在等待服务器响应时执行其他脚本</li><li>当响应就绪后对响应进行处理</li></ul><h5 id="Async-true"><a href="#Async-true" class="headerlink" title="Async = true"></a>Async = true</h5><p>当使用 async=true 时，请规定在响应处于 onreadystatechange 事件中的就绪状态时执行的函数：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span>xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"test1.txt"</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="Async-false"><a href="#Async-false" class="headerlink" title="Async = false"></a>Async = false</h5><p>如需使用 async=false，请将 open() 方法中的第三个参数改为 false：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"test1.txt"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们不推荐使用 async=false，但是对于一些小型的请求，也是可以的。</p><p>请记住，JavaScript 会等到服务器响应就绪才继续执行。如果服务器繁忙或缓慢，应用程序会挂起或停止。</p><p><strong>注释：</strong>当您使用 async=false 时，请不要编写 onreadystatechange 函数 - 把代码放到 send() 语句后面即可：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"test1.txt"</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>xmlhttp<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span></code></pre><h3 id="AJAX-服务器响应"><a href="#AJAX-服务器响应" class="headerlink" title="AJAX - 服务器响应"></a>AJAX - 服务器响应</h3><ul><li><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_send.asp" target="_blank" rel="noopener">XHR 请求</a></li><li><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_onreadystatechange.asp" target="_blank" rel="noopener">XHR readyState</a></li></ul><h5 id="服务器响应"><a href="#服务器响应" class="headerlink" title="服务器响应"></a>服务器响应</h5><p>如需获得来自服务器的响应，请使用 XMLHttpRequest 对象的 responseText 或 responseXML 属性。</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">responseText</td><td align="left">获得字符串形式的响应数据。</td></tr><tr><td align="left">responseXML</td><td align="left">获得 XML 形式的响应数据。</td></tr></tbody></table><h5 id="responseText-属性"><a href="#responseText-属性" class="headerlink" title="responseText 属性"></a>responseText 属性</h5><p>如果来自服务器的响应并非 XML，请使用 responseText 属性。</p><p>responseText 属性返回字符串形式的响应，因此您可以这样使用：</p><pre><code>document.getElementById("myDiv").innerHTML=xmlhttp.responseText;</code></pre><h5 id="responseXML-属性"><a href="#responseXML-属性" class="headerlink" title="responseXML 属性"></a>responseXML 属性</h5><p>如果来自服务器的响应是 XML，而且需要作为 XML 对象进行解析，请使用 responseXML 属性：</p><p>请求 <a href="https://www.w3school.com.cn/example/xmle/books.xml" target="_blank" rel="noopener">books.xml</a> 文件，并解析响应：</p><pre class=" language-javascript"><code class="language-javascript">xmlDoc<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseXML<span class="token punctuation">;</span>txt<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span>x<span class="token operator">=</span>xmlDoc<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"ARTIST"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>x<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  txt<span class="token operator">=</span>txt <span class="token operator">+</span> x<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>childNodes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>nodeValue <span class="token operator">+</span> <span class="token string">"&lt;br />"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>txt<span class="token punctuation">;</span></code></pre><h3 id="AJAX-onreadystatechange-事件"><a href="#AJAX-onreadystatechange-事件" class="headerlink" title="AJAX - onreadystatechange 事件"></a>AJAX - onreadystatechange 事件</h3><ul><li><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_response.asp" target="_blank" rel="noopener">XHR 响应</a></li><li><a href="https://www.w3school.com.cn/ajax/ajax_asp_php.asp" target="_blank" rel="noopener">AJAX ASP/PHP</a></li></ul><h5 id="onreadystatechange-事件"><a href="#onreadystatechange-事件" class="headerlink" title="onreadystatechange 事件"></a>onreadystatechange 事件</h5><p>当请求被发送到服务器时，我们需要执行一些基于响应的任务。</p><p>每当 readyState 改变时，就会触发 onreadystatechange 事件。</p><p>readyState 属性存有 XMLHttpRequest 的状态信息。</p><p>下面是 XMLHttpRequest 对象的三个重要的属性：</p><table><thead><tr><th align="left">属性</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">onreadystatechange</td><td align="left">存储函数（或函数名），每当 readyState 属性改变时，就会调用该函数。</td></tr><tr><td align="left">readyState</td><td align="left">存有 XMLHttpRequest 的状态。从 0 到 4 发生变化。0: 请求未初始化1: 服务器连接已建立2: 请求已接收3: 请求处理中4: 请求已完成，且响应已就绪</td></tr><tr><td align="left">status</td><td align="left">200: “OK”404: 未找到页面</td></tr></tbody></table><p>在 onreadystatechange 事件中，我们规定当服务器响应已做好被处理的准备时所执行的任务。</p><p>当 readyState 等于 4 且状态为 200 时，表示响应已就绪：</p><pre class=" language-javascript"><code class="language-javascript">xmlhttp<span class="token punctuation">.</span>onreadystatechange<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span></code></pre><p><strong>注释：</strong>onreadystatechange 事件被触发 5 次（0 - 4），对应着 readyState 的每个变化。</p><h5 id="使用-Callback-函数"><a href="#使用-Callback-函数" class="headerlink" title="使用 Callback 函数"></a>使用 Callback 函数</h5><p>callback 函数是一种以参数形式传递给另一个函数的函数。</p><p>如果您的网站上存在多个 AJAX 任务，那么您应该为创建 XMLHttpRequest 对象编写一个<em>标准</em>的函数，并为每个 AJAX 任务调用该函数。</p><p>该函数调用应该包含 URL 以及发生 onreadystatechange 事件时执行的任务（每次调用可能不尽相同）：</p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">myFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token function">loadXMLDoc</span><span class="token punctuation">(</span><span class="token string">"ajax_info.txt"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">{</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>xmlhttp<span class="token punctuation">.</span>readyState<span class="token operator">==</span><span class="token number">4</span> <span class="token operator">&amp;&amp;</span> xmlhttp<span class="token punctuation">.</span>status<span class="token operator">==</span><span class="token number">200</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>innerHTML<span class="token operator">=</span>xmlhttp<span class="token punctuation">.</span>responseText<span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><em>==<strong>ajax高级—待续</strong>==</em></p><p><a href="https://www.w3school.com.cn/ajax/ajax_xmlhttprequest_onreadystatechange.asp" target="_blank" rel="noopener">以上文档来源W3school</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea中maven更换阿里源错误问题</title>
      <link href="/2020/05/06/jiu-cuo-jin-ji/"/>
      <url>/2020/05/06/jiu-cuo-jin-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h3><h5 id="m1"><a href="#m1" class="headerlink" title="m1"></a>m1</h5><p>由于maven没有配置国内源，下载包非常慢，所以决定换为阿里源，</p><p><img src="/img/image-20200506214336128.png" alt=""></p><p>这里使用的时idea自带的Mavenue3，准备配置settings.xml文件时发现，在.m2文件夹下只有一个repository文件夹，没有settings.xml文件，所以自己创建了一个settings.xml并配置了以下内容</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirror</span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>alimaven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>aliyun maven<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url</span><span class="token punctuation">></span></span>http://maven.aliyun.com/nexus/content/groups/public/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url</span><span class="token punctuation">></span></span>　　<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mirrorOf</span><span class="token punctuation">></span></span>central<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirrorOf</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mirror</span><span class="token punctuation">></span></span></code></pre><p>再次启动maven时，发生以下错误</p><pre><code>Could not transfer artifact org.apache.maven.plugins:maven-install-plugin:pom:2.4 from/to alimaven (http://maven.aliyun.com/nexus/content/groups/public/): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath</code></pre><p>分析发现，idea自带maven中的settting.xml在 <code>D:\idea\IntelliJ IDEA 2019.3.4\plugins\maven\lib\maven3\conf</code>目录下，修改之后即可使用</p><h5 id="m2"><a href="#m2" class="headerlink" title="m2"></a>m2</h5><p> 解决maven打包编译出现File encoding has not been set问题</p><p>在pom.xml文件中增加一个配置项</p><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>properties</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>UTF-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>project.build.sourceEncoding</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>properties</span><span class="token punctuation">></span></span></code></pre><h3 id="IDEA"><a href="#IDEA" class="headerlink" title="IDEA"></a>IDEA</h3><h5 id="plugins1"><a href="#plugins1" class="headerlink" title="plugins1"></a>plugins1</h5><p>已经引入lombok jar包 但注解不起作用</p><p>经过搜索发现需要添加IDE工具对Lombok的支持</p><p><img src="/img/image-20200507153644610.png" alt="lombok安装图"></p><p><img src="/img/image-20200507153809336.png" alt="让Lombok注解在编译阶段起到作用"></p><p>pom.xml资源过滤问题</p><p>idea链接数据库</p><p>mysql8.0+  需要加serverTimezone=Asia/Shanghai</p><p><img src="/img/image-20200507194626277.png" alt=""></p><p>进入命令窗口（Win + R），连接数据库 mysql -hlocalhost -uroot -p，回车，输入密码</p><p>进入mysql交互界面</p><p>继续输入 <code>show variables like'%time_zone';</code> </p><p><img src="/img/image-20200507194944603.png" alt=""></p><p><em>显示 SYSTEM 就是没有设置时区</em></p><p>设置时区：输入<code>set global time_zone = '+8:00';</code> </p><p><img src="/img/image-20200507195107268.png" alt=""></p><p>如果上面方法没有效果可以参照下图</p><p><img src="/img/image-20200507195427588.png" alt=""></p><p>jdbc-mysql6.0及以上的版本必须配置serverTimezone参数，解决方式如下：<br>法一：jdbc:mysql://localhost:3306/film_db?serverTimezone=GMT%2B8&amp;useSSL=false<br>这种方法比较麻烦，下面一种方法更好<br>法二：在C:\ProgramData\MySQL\MySQL Server 8.0/my.ini文件的[mysqld]下添加default-time-zone=+8:00，这样就不用每次都手动敲入。<br>特别注意：重新配置完my.ini后，要关闭mysql服务器然后重启，否则还是报错。<br>重启MySQL可以在命令行中输入net stop mysql,net start mysql<br>或者我的电脑右击打开管理-&gt;服务和应用程序-&gt;mysql重启，就OK了</p><p>2019/10/09补充<br>法一的补充说明：如果是对C3P0的数据池配置文件的修改应该写成jdbc:mysql://LOCALHOST:3306/film_db?serverTimezone=GMT&amp;useSSL=false</p><h3 id="SpringMVC"><a href="#SpringMVC" class="headerlink" title="SpringMVC"></a>SpringMVC</h3><h5 id="s1"><a href="#s1" class="headerlink" title="s1"></a>s1</h5><p>一个或多个筛选器启动失败。完整的详细信息将在相应的容器日志文件中找到</p><p>出现该问题最后尝试为打包没有jar包导致，在idea中file-project Structure-Artifacts，在web-inf中新建一个lib文件夹并把jar包导进去</p><h5 id="s2"><a href="#s2" class="headerlink" title="s2"></a>s2</h5><p>错误提示： cvc-complex-type.2.4.c: 通配符的匹配很全面, 但无法找到元素 <code>context:component-scan</code></p><p>错误原因：**命名空间依赖型没有声明完整,一些必要的依赖项没有添加进来</p><p>解决方法：复制完整的命名空间</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans-4.2.xsd    http://www.springframework.org/schema/mvc    http://www.springframework.org/schema/mvc/spring-mvc-4.2.xsd    http://www.springframework.org/schema/context    http://www.springframework.org/schema/context/spring-context-4.2.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id="s3"><a href="#s3" class="headerlink" title="s3"></a>s3</h5><p>SpringMVC，静态资源加载不出来</p><p><img src="/img/image-20200508215211858.png" alt=""></p><p>原因：</p><p><img src="/img/image-20200508215410589.png" alt=""></p><p>==<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code> 这表示这个servlet 拦截了所有的请求，包括css,js等静态资源==</p><p>解决方法：</p><p>方案一 ：<br>mvc:resources标签配置不过滤上</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/<span class="token punctuation">"</span></span>  <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/static/**<span class="token punctuation">"</span></span>  <span class="token punctuation">/></span></span></code></pre><p>方案二:(推荐使用)</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">></span></span></code></pre><p>方案三：添加 servlet-mapping</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/static/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.js<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>default<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>*.css<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span></code></pre><p>还有一种可能是静态资源放错了目录</p><p><img src="/img/image-20200508220156323.png" alt=""></p><p> 静态资源应放在Web目录下，和WEB-INF同级</p><p>1、当静态资源放在webapp下面的时候，可直接通过浏览器访问，不需要配置映射，安全性略低</p><p>2、WEB-INF是Java的WEB应用的安全目录。所谓安全就是客户端无法访问，只有服务端可以访问的目录。</p><p>当静态资源放在WEB-INF下面的时候，外部是不能直接访问的，一般是在springmvc的配置文件中配置资源映射</p><p>如：</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!-- 资源映射 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h5 id="S4"><a href="#S4" class="headerlink" title="S4:"></a>S4:</h5><blockquote><p>@RestController和@Controller</p></blockquote><ul><li><p>@RestController注解相当于@ResponseBody ＋ @Controller合在一起的作用。</p></li><li><p>如果只是使用@RestController注解Controller，则Controller中的方法无法返回jsp页面，或者html，配置的视图解析器 InternalResourceViewResolver不起作用，返回的内容就是Return 里的内容。</p></li></ul><ul><li>如果需要返回到指定页面，则需要用 @Controller配合视图解析器InternalResourceViewResolver才行。<br>  如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。 </li><li>如果需要返回JSON，XML或自定义mediaType内容到页面，则需要在对应的方法上加上@ResponseBody注解。</li></ul><h5 id="s5"><a href="#s5" class="headerlink" title="s5"></a>s5</h5><p>在WEB-INF下的所有页面或者资源，只能通过controller，或者servlet进行访问</p><h3 id="SpringBoot"><a href="#SpringBoot" class="headerlink" title="SpringBoot"></a>SpringBoot</h3><h5 id="sb1"><a href="#sb1" class="headerlink" title="sb1"></a>sb1</h5><p>idea Could not transfer artifact org.springframework.boot:spring-boot-starter-parent:pom:2.3.0.RELEASE from/to alimaven (<a href="https://maven.aliyun.com/repository/central" target="_blank" rel="noopener">https://maven.aliyun.com/repository/central</a>): sun.security.validator.ValidatorException:</p><p>在pom.xml配置文件中添加依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-aop<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>Build–&gt;Rebulid Project</p><p>maven -clean</p><h5 id="sb2"><a href="#sb2" class="headerlink" title="sb2"></a>sb2</h5><p><a href="https://www.cnblogs.com/vevy/p/12246679.html" target="_blank" rel="noopener">spring-boot-maven-plugin not found的解决方案</a></p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-maven-plugin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.2.2.RELEASE<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">></span></span></code></pre><h5 id="sb3"><a href="#sb3" class="headerlink" title="sb3"></a>sb3</h5><p>spring boot 项目中没有@RestController</p><p>再pom.xml中配置</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><h5 id="q1"><a href="#q1" class="headerlink" title="q1"></a>q1</h5><p><code>${pageContext.request.contextPath}</code>是JSP取得绝对路径的方法，等价于<code>&lt;%=request.getContextPath()%&gt;</code></p><p>用于解决使用相对路径时出现的问题，它的作用是取出所部署项目的名字</p><p>比如项目名称是yuan在浏览器中输入为<a href="http://localhost:8080/yuan/test.jsp" target="_blank" rel="noopener">http://localhost:8080/yuan/test.jsp</a> <code>${pageContext.request.contextPath}</code>或<code>&lt;%=request.getContextPath()%&gt;</code>取出来的就是/yuan, </p><p> 而”/“代表的含义就是<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><h5 id="q2"><a href="#q2" class="headerlink" title="q2"></a>q2</h5><p>设定表单必须填写完整才能提交</p><p>在所有<code>input</code>标签中，添加 <code>required</code>属性</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookName<span class="token punctuation">"</span></span> <span class="token attr-name">required</span><span class="token punctuation">/></span></span></code></pre><h5 id="q3"><a href="#q3" class="headerlink" title="q3"></a>q3</h5><p>修改数据返回后端处理时，要记得后端修改是根据主键id修改的，而前端页面一般不把id显示出来，</p><p>处理方式：使用==隐藏域==来传递id</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hidden<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>id<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${book.id}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="Mybatis"><a href="#Mybatis" class="headerlink" title="Mybatis"></a>Mybatis</h3><h5 id="mb1"><a href="#mb1" class="headerlink" title="mb1"></a>mb1</h5><p>mybatis内置的日志实现</p><p>在mybatis配置文件中写入</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>settings</span><span class="token punctuation">></span></span>    &lt;setting name="logImpl" value=STD_OUTGGING"/><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>settings</span><span class="token punctuation">></span></span></code></pre><h3 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h3><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=802" target="_blank" rel="noopener">传智播客</a></p><p><img src="/img/image-20200511194841700.png" alt=""></p><p><img src="/img/image-20200511195729240.png" alt=""></p><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><p><a href="https://www.bilibili.com/video/BV1uJ411k7wy?p=807" target="_blank" rel="noopener">黑马程序员</a></p><p><img src="/img/image-20200512101213604.png" alt=""></p><pre><code>nested exception is org.apache.ibatis.binding.BindingException: Parameter 'currentPage' not found. Available parameters are [arg1, arg0, param1, param2]</code></pre><p> @Param<br>用注解来简化xml配置的时候,@Param注解的作用是给参数命名,参数命名后就能根据名字得到参数值,正确的将参数传入sql语句中。简单说就是@Param(“orId2”) String orId1  在启动时生成一个orId2的属性，把参数orId1的值赋给orId2，这样就可以在申请了中使用#{orId2} 或者${orId2}获取变量，如果不配置@Param(“orId2”)，就不会有orId2属性，只能用默认的#{orId1}来取值。</p><p>下面对比一下错误的和正确的传参方式：<br>错误：</p><p>int insertObject(Integer userId,Integer[] roleIds);<br>正确：</p><p>int insertObject(@Param(“userId”)Integer userId,@Param(“roleIds”)Integer[] roleIds);</p><p><a href="https://blog.csdn.net/weixin_42230885/article/details/84855041" target="_blank" rel="noopener">csdn</a></p><h3 id="Could-not-find-result-map-XXX-解决办法"><a href="#Could-not-find-result-map-XXX-解决办法" class="headerlink" title="Could not find result map XXX 解决办法"></a>Could not find result map XXX 解决办法</h3><p>原因：返回的结果和类型不一致。</p><p>检查xml配置文件，配置语句是否写错属性</p><pre><code>Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for com.yuan.dao.UserMapper.queryCountsByCondition. please check com/yuan/dao/UserMapper.xml and com/yuan/dao/UserMapper.xml</code></pre><p>Mybatis开发过程中经常遇到Mapped Statements collection already contains value for xxx 这种错误。字面意思是说mapper中存在id重复的值，比如说同一个xml文件中有两个id为xxx的方法。这种经常是copy已有代码的时候忘了改id导致的。不过，mybatis出现这种错误时，可能实际重复的id并不是它报出来的那个，碰到这种问题就比较纠结了。下面我把自己碰到过的两种情况和大家分享：</p><p>两种情况报错信息都为：</p><p>java.lang.RuntimeException: Error parsing Mapper XML. Cause: java.lang.IllegalArgumentException: Mapped Statements collection already contains value for xxx…</p><p>情况1. 就是方法id重复了，但不一定是xxx重复，而有可能是yyy。所以最好是把新旧代码做个diff，看看都加了哪些方法，逐个去排查；</p><p>情况2. 方法参数写错了或者没写。比如resultType=”UserVO”写成了resultType=”User”。这种情况一般是最近删除了什么bean或者重命名了什么bean而xml对应的参数类型没有修改而导致的。同样的，mybatis并不一定能准确地指出是哪个方法错误，需要逐个排查，最好是好好回忆一下自己动了哪些bean，才好快速定位。<br><a href="https://blog.csdn.net/u012799221/article/details/80061274" target="_blank" rel="noopener">csdn博主</a></p><h1 id="JS-POST提交并跳转页面"><a href="#JS-POST提交并跳转页面" class="headerlink" title="JS POST提交并跳转页面"></a>JS POST提交并跳转页面</h1><p><a href="https://blog.csdn.net/qq_23502409/article/details/73520202" target="_blank" rel="noopener">参照博客</a></p><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">ShowPage_Click</span><span class="token punctuation">(</span>token<span class="token punctuation">,</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> parames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Token"</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> token <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        parames<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span> <span class="token string">"Time"</span><span class="token punctuation">,</span> value<span class="token punctuation">:</span> time <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">openPostWindow</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>paramters<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">Post</span><span class="token punctuation">(</span>URL<span class="token punctuation">,</span> PARAMTERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//创建form表单</span>    <span class="token keyword">var</span> temp_form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"form"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    temp_form<span class="token punctuation">.</span>action <span class="token operator">=</span> URL<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//如需打开新窗口，form的target属性要设置为'_blank'</span>    temp_form<span class="token punctuation">.</span>target <span class="token operator">=</span> <span class="token string">"_blank"</span><span class="token punctuation">;</span>    temp_form<span class="token punctuation">.</span>method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token punctuation">;</span>    temp_form<span class="token punctuation">.</span>style<span class="token punctuation">.</span>display <span class="token operator">=</span> <span class="token string">"none"</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//添加参数</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> item <span class="token keyword">in</span> PARAMTERS<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> opt <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">"textarea"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        opt<span class="token punctuation">.</span>name <span class="token operator">=</span> PARAMTERS<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>        opt<span class="token punctuation">.</span>value <span class="token operator">=</span> PARAMTERS<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">.</span>value<span class="token punctuation">;</span>        temp_form<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>opt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>temp_form<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//提交数据</span>    temp_form<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="springMVC-预加载数据库"><a href="#springMVC-预加载数据库" class="headerlink" title="springMVC 预加载数据库"></a>springMVC 预加载数据库</h3><blockquote><p>实现ServletContextAware接口</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>listener<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>domain<span class="token punctuation">.</span>Food<span class="token punctuation">;</span><span class="token keyword">import</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>FoodService<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Autowired<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>beans<span class="token punctuation">.</span>factory<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>Qualifier<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>stereotype<span class="token punctuation">.</span>Controller<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>bind<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span>RequestMapping<span class="token punctuation">;</span><span class="token keyword">import</span> org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>context<span class="token punctuation">.</span>ServletContextAware<span class="token punctuation">;</span><span class="token keyword">import</span> javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>ServletContext<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>List<span class="token punctuation">;</span><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SpringViewListener</span>  <span class="token keyword">implements</span> <span class="token class-name">ServletContextAware</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 注入FoodServiceImpl对象     */</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"FoodServiceImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> FoodService foodService<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setServletContext</span><span class="token punctuation">(</span>ServletContext servletContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            List<span class="token operator">&lt;</span>Food<span class="token operator">></span> foods <span class="token operator">=</span> foodService<span class="token punctuation">.</span><span class="token function">queryFoodForIndex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            servletContext<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">"foods"</span><span class="token punctuation">,</span>foods<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">c:</span>forEach</span> <span class="token attr-name">var</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>food<span class="token punctuation">"</span></span> <span class="token attr-name">items</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${applicationScope.get(<span class="token punctuation">'</span>foods<span class="token punctuation">'</span>)}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> 纠错 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JVM学习笔记</title>
      <link href="/2020/05/06/jvm-xue-xi-bi-ji/"/>
      <url>/2020/05/06/jvm-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="1、jvm的位置"><a href="#1、jvm的位置" class="headerlink" title="1、jvm的位置"></a>1、jvm的位置</h3><p><img src="/img/image-20200506095428484.png" alt="jvm位置图"></p><h3 id="2、jvm的体系结构"><a href="#2、jvm的体系结构" class="headerlink" title="2、jvm的体系结构"></a>2、jvm的体系结构</h3><p><img src="/img/image-20200506101427287.png" alt="jvm体系结构图"></p><h3 id="3、类加载器"><a href="#3、类加载器" class="headerlink" title="3、类加载器"></a>3、类加载器</h3><p><strong>作用：</strong>加载Class文件</p><p><img src="/img/image-20200506110620970.png" alt="类加载器示例图"></p><p>2、加载器分类：</p><ul><li><p>虚拟机自带的加载器</p></li><li><p>启动类（根）加载器      <code>re.jar</code></p></li><li><p>扩展类加载器         <code>/jre/lib/ext</code></p></li><li><p>应用程序加载器</p><p>3、双亲委派机制</p></li></ul><p>目的：保证安全</p><p>机制流程：    </p><ol><li>类加载器收到类加载的请求</li><li>收到请求后，将这个请求委托给父类加载器完成，一直向上委托，直到启动类加载器</li><li>启动类加载器检查是否能够加在当前类，能加载就使用当前的加载器，否则，抛出异常，通知子加载器进行加载</li><li>重复步骤三</li></ol><blockquote><p>若打印的加载器为null，则表示java调用不到，此加载器是c或c++写的</p></blockquote><h3 id="4、沙箱安全机制"><a href="#4、沙箱安全机制" class="headerlink" title="4、沙箱安全机制"></a>4、沙箱安全机制</h3><p>​        java安全模型的核心就是java沙箱（sandbox），沙箱是一个限制程序运行的环境，沙箱机制就是将java代码限定在虚拟机（JVM）特定的运行范围内，并且严格限制代码对本地系统资源的访问，通过这样的措施来保证对代码的有效隔离，防止对本地系统造成破坏。沙箱主要限制系统资源访问，包括CPU、内存、文件系统、网络等。不同级别的沙箱对这些资源访问的限制也可以不一样。</p><p>​        所有的java程序运行都可以指定沙箱，可以定制安全策略。</p><p>​        在jaca中将执行程序分为本地代码和远程代码两种，本地代码默认可信任，远程代码则被看做是不受信任的。对于受信任的本地代码，可以访问一切本地资源。而对于非受信任的远程代码在早期的java实现中，安全依赖于沙箱机制。如下图所示JDK1.0安全模型</p><p><img src="/img/image-20200506125037259.png" alt="JDK1.0安全模型"></p><p>按如此严格的安全机制也给程序的功能扩展带来障碍，在java1.1版本中，针对安全机制做了改进，增加了安全策略，允许用户指定代码对本地资源的访问权限</p><p><img src="/img/image-20200506125449415.png" alt="jdk1.1版本沙箱"></p><p>在java1.2版本中，再次改进，增加了代码签名，不论本地还是远程的代码，都会按照用户的安全策略设定，有类加载器加载到虚拟机中权限不同的运行空间，来实现差异化的代码执行权限</p><p><img src="/img/image-20200506125744930.png" alt="jdk1.2"></p><p>​        当前最新的安全机制实现，则引入了域（Domain）的概念，虚拟机会把所有的代码加载到不同的系统域和应用域，系统域部分专门负责与关键资源进行交互，而各个应用域部分则通过系统域的部分代理来对各种需要的资源进行访问。虚拟机中不同的受保护域（Protected Domain），对应不一样的权限（Permission）。存在于不同域中的类文件就具有了当前域的全部权限</p><p><img src="/img/image-20200506130244826.png" alt="jdk1.6"></p><p><strong>组成沙箱的基本组件：</strong></p><ul><li><code>字节码校验器</code>（bytecode verifier）：确保java类文件遵循java语言规范，这样可以帮助java程序实现内存保护。但并不是所有的类文件都会经过字节码校验，比如核心类。</li><li><code>类装载器</code>（class loader）：其中类装载器在3各方面堆java沙箱起作用<ul><li>它防止恶意代码去干涉善意的代码</li><li>它守护了被信任的类库边界</li><li>它将代码归入保护域，确定了代码可以进行哪些操作</li></ul></li></ul><p>虚拟机为不同的类加载器载入的类提供不同的命名空间，命名空间由一系列唯一的名称组成，每一个被装载的类将有一个名字，这个命名空间是由java虚拟机为每一个类装载器维护的，他们互相之间甚至不可见。</p><h3 id="5、本地方法Native"><a href="#5、本地方法Native" class="headerlink" title="5、本地方法Native"></a>5、本地方法Native</h3><p>凡是带了<code>native</code>关键字的，说明java的作用范围达不到了，会去调用底层C语言的库</p><p>进入本地方法栈，调用本地方法本地接口，JNI（java Native Interface）</p><p>JNI作用：扩展java的使用，融合不同的编程语言为java所用</p><p>java在内存区域专门开辟了一块标记区域：<code>Native Method Stack</code> ，用于登记<code>native</code>方法，在最终执行的时候，通过JNI加载本地方法库中的方法</p><h3 id="6、PC寄存器"><a href="#6、PC寄存器" class="headerlink" title="6、PC寄存器"></a>6、PC寄存器</h3><p><strong>程序计数器：</strong>Program Counter Register</p><p>​        每个线程都有一个程序计数器，是线程私有的，就是一个指针，指向方法区中的方法字节码（用来存储指向一条指令的地址，也是即将执行的指令代码），在执行引擎读取下一条指令，是一个非常小的空间。</p><h3 id="7、方法区"><a href="#7、方法区" class="headerlink" title="7、方法区"></a>7、方法区</h3><p>​        方法区是被所有线程共享，所有字段和方法字节码，以及一些特殊方法，如构造函数，接口代码也在此定义，此区域属于共享空间，定义方法的信息都存放在此区域</p><p>​        静态变量、常量、类信息（构造方法，接口定义）、运行时的常量池存放在方法区内，但是实例变量存在堆内存中，和方法去无关</p><h3 id="8、栈"><a href="#8、栈" class="headerlink" title="8、栈"></a>8、栈</h3><p>栈：栈内存，主管程序的运行，生命周期和线程同步，线程结束，栈内存也就释放，栈中，不存在垃圾回收机制</p><p>栈包括：八大基本类型+对象引用+实例的方法</p><p>栈运行原理：栈帧</p><p>栈溢出错误：StackOverFlowError</p><h3 id="9、堆"><a href="#9、堆" class="headerlink" title="9、堆"></a>9、堆</h3><p>heap,一个JVM只有一个堆内存，堆内存的大小是可以调节的</p><p>类加载器读取了类文件后，保存我们所有的引用类型的真实对象</p><p>堆内存分为三个区域：</p><ul><li>新生区（伊甸园区）<ul><li>伊甸园区</li><li>幸存区0  from</li><li>幸存区1    to</li></ul></li><li>老年区</li><li>永久区      ==<strong>JDK8后，</strong>永久代被移到与一个堆不相连的本地内存区域，也即就是<strong>元空间</strong>==</li></ul><p><img src="/img/image-20200506155815399.png" alt="CMS堆内存结构划分"></p><p>GC垃圾回收，主要是在伊甸园区和老年区</p><p>OOM:内存溢出    java.lang.OutofMemoryError:java heap space</p><p><strong>新生区</strong></p><p>所有的对象都是在伊甸园区new出来的</p><p><strong>永久区</strong></p><p>这个区域是常驻内存的，用来存放JDK自身携带的Class对象，Interface元数据，存储的是java运行时的一些环境或类信息，这个区域不存在垃圾回收机制，关闭虚拟机就会释放这个区域的内存</p><ul><li>jdk.16之前：永久代，常量池在方法区</li><li>jdk1.7       ：永久代，慢慢退化，开始<code>去永久代</code>，常量池在堆中</li><li>jdk1.8之后：无永久代，常量池在元空间</li></ul><p><img src="/img/image-20200506163926750.png" alt=""></p><p>默认情况下：虚拟机分配总内存是电脑的1/4，初始化的内存是电脑的1/64</p><p>永久区OOM的情况：</p><ul><li>一个启动类，加载了大量的第三方jar包</li><li>tomcat部署了太多的应用</li><li>大量动态生成的反射类</li></ul><p>MAT、Jprofiler查找OOM问题：</p><ul><li>分析Dump内存文件，快速定位内存泄漏</li><li>获取堆中的数据</li></ul><p>VM OPtion:  <code>-Xms1m -Xmx8m -XX:+HeapDumpOutOfMemoryError</code></p><p><code>-Xms</code>：设置初始化内存分配大小</p><p><code>-Xmx</code>：设置最大分配内存</p><p><code>-XX:+PrintGCDetails</code> ：打印GC垃圾回收信息</p><h3 id="10、GC"><a href="#10、GC" class="headerlink" title="10、GC:"></a>10、GC:</h3><p>GC：有两种：轻GC（普通GC），重GC（全局GC）</p><img src="/img/image-20200506185949691.png" style="zoom:80%;"><p><strong>GC算法：</strong></p><ul><li>标记清除法</li></ul><p><img src="/img/image-20200506191631196.png" alt="标记清除法分析图"></p><p>优点：不需要额外空间</p><p>缺点：两次扫描，浪费时间，会产生碎片</p><ul><li>标记压缩（在标记清除的基础上，优化内存碎片）</li></ul><p><img src="/img/image-20200506192209444.png" alt="标记压缩分析图"></p><ul><li>复制算法</li></ul><p><img src="/img/image-20200506191021531.png" alt="复制算法分析图"></p><p>优点：没有内存碎片</p><p>缺点：浪费内存空间：多了一般幸存区永远是to即为空</p><ul><li>引用计数器</li></ul><p>内存效率：复制算法&gt;标记清除算法&gt;标记压缩算法（时间复杂度）</p><p>内存整齐度：复制算法=标记压缩算法&gt;标记清除算法</p><p>内存利用率：标记压缩算法=标记清除算法&gt;复制算法</p><p>没有最好的算法，只有最适合的算法</p><p>分代收集机制：</p><p>年轻代：存活率低，使用复制算法</p><p>老年代：区域大：存活率高，标记清除算法（内存碎片不是太多的时候）+标记压缩算法  混合实现</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> JVM </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpingMVC学习笔记</title>
      <link href="/2020/05/05/springmvc-xue-xi-bi-ji/"/>
      <url>/2020/05/05/springmvc-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<hr><p><strong><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web.html" target="_blank" rel="noopener">SpringMVC官方文档</a></strong></p><blockquote><p>SSM:  Mybatis+Spring+SpringMVC       <strong>MVC三层架构</strong></p></blockquote><blockquote><p><a href="https://baike.baidu.com/item/MVC" target="_blank" rel="noopener">MVC</a>全名是Model View Controller，是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。MVC被独特的发展起来用于映射传统的输入、处理和输出功能在一个逻辑的图形化用户界面的结构中。</p></blockquote><h3 id="MVC编程模式"><a href="#MVC编程模式" class="headerlink" title="MVC编程模式"></a>MVC编程模式</h3><hr><ul><li>Model（模型）表示应用程序核心（比如数据库记录列表）。<ul><li><strong>Model（模型）</strong>是应用程序中用于处理应用程序数据逻辑的部分，通常模型对象负责在数据库中存取数据</li></ul></li><li>View（视图）显示数据（数据库记录）。<ul><li><strong>View（视图）</strong>是应用程序中处理数据显示的部分。通常视图是依据模型数据创建的。</li></ul></li><li>Controller（控制器）处理输入（写入数据库记录）。<ul><li><strong>Controller（控制器）</strong>是应用程序中处理用户交互的部分。通常控制器负责从视图读取数据，控制用户输入，并向模型发送数据。</li></ul></li></ul><p><strong>框架内容</strong></p><hr><blockquote><p>MVC指MVC模式的某种框架，它强制性的使应用程序的输入、处理和<a href="https://baike.baidu.com/item/输出" target="_blank" rel="noopener">输出</a>分开。使用MVC应用程序被分成三个核心部件：模型、<a href="https://baike.baidu.com/item/视图" target="_blank" rel="noopener">视图</a>、控制器。它们各自处理自己的任务。最典型的MVC就是JSP + <a href="https://baike.baidu.com/item/servlet" target="_blank" rel="noopener">servlet</a> + <a href="https://baike.baidu.com/item/javabean" target="_blank" rel="noopener">javabean</a>的模式。</p></blockquote><p>MVC要做哪些事情？</p><ol><li>将url映射到java类或java类的方法</li><li>封装用户提交的数据</li><li>处理请求，调用相关的业务处理-封装响应数据</li><li>将相应的数据进行渲染，</li></ol><p>SpringMVC的特点</p><ol><li>轻量级，简单易学</li><li>高效，基于请求响应的MVC框架</li><li>与Spring兼容性好，无缝结合</li><li>约定优于配置</li><li>功能强大：RESTful、数据验证、格式化、本地化、主题等</li><li>简洁灵活</li></ol><h3 id="SpringMVC示例"><a href="#SpringMVC示例" class="headerlink" title="SpringMVC示例"></a>SpringMVC示例</h3><p><em>（基于xml配置）</em></p><ol><li>新建一个Moudle，添加web支持</li><li>确定导入SpringMVC依赖</li><li>配置web.xml，注册DIepatcherServlet</li></ol><blockquote><p>web.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    注册DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关联一个springMvc的配置文件       --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--启动级别1        --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--   /   匹配所有的请求：不包括 .jsp--></span>    <span class="token comment" spellcheck="true">&lt;!--   /*   匹配所有的请求：包括 .jsp--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>编写SpringMVC的配置文件</li></ol><blockquote><p>springmvc-servlet.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd <span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--  添加处理映射器  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--  添加处理适配器  --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 视图解析器：DispatcherServlet给它的ModelAndView    1、获取了ModelAndView的视图名字    2、解析ModelAndView的视图的名字    3、拼接试图名字  /WEB-INF/jsp/hello.jsp    4、将数据渲染到这个视图上    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--前缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!--后缀--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Handler    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/hello<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.Controller.HelloController<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ol start="5"><li>编写Controller控制</li></ol><blockquote><p>HelloController.java</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloController</span> <span class="token keyword">implements</span> <span class="token class-name">Controller</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ModelAndView 模型和视图</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 封装对象，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"HelloSpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 封装要跳转的视图，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  /WEB-INF/jsp/hello.jsp</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>SpringMVC流程图</p></blockquote><p><img src="/img/SpringMVC%E6%B5%81%E7%A8%8B%E5%9B%BE01.png" alt=""></p><p>简要分析流程</p><ol><li>DispatcherServlet表示前置控制器，是整个SpringMVC的控制中心。用户发出请求，DispatcherServlet接受请求并拦截<ol><li>设使请求的url为：<a href="http://localhost:8080/SpringMvc/hello" target="_blank" rel="noopener">http://localhost:8080/SpringMvc/hello</a><ol><li><a href="http://localhost:8080服务器域名">http://localhost:8080服务器域名</a></li><li>SpringMVC部署在服务器上的web站点</li><li>hello表示控制器</li></ol></li></ol></li></ol><p>分析可知：此url表示请求位于服务器localhost:8080上的SpringMVC站点的hello控制器</p><ol start="2"><li>HandlerMapping为处理器映射，DispatcherServlet调用，HandlerMapping，HandleMapping根据请求url查找Handler。</li><li>HandlerExcution表示具体的Handler，主要作用是根据url查找控制器</li><li>HandlerExcution将解析后的信息传递给DispatcherServlet，如解析控制器映射等</li><li>HandlerAdapter表示处理器适配器，按照特定的规则去执行Handler</li><li>Handler让具体的Controller执行</li><li>Controller将具体的执行信息返回给HandlerAdapter，如ModelAndView</li><li>HandlerAdapter将视图逻辑名或模型传递给DispatcherServlet</li><li>DispatcherServlet调用视图解析器（ViewResolver）来解析HandlerAdapter传递的逻辑图名</li><li>视图解析器将解析的逻辑视图名传给DispatcherServlet</li><li>DispatcherServlet根据视图解析器解析的视图结果，调用具体的视图</li></ol><blockquote><p>内部流程图（黑色实线为SpringMVC内部实现，不需要我们介入。绿色箭头自己实现）</p></blockquote><p><img src="/img/image-20200505181900987.png" alt=""></p><blockquote><p>可能遇到的问题：访问出现404</p></blockquote><ol><li>查看控制台输出，看一下是不是少了jar包</li><li>若jar存在，显示无法输出，就在IDEA的项目发布中，添加lib依赖</li></ol><p><img src="../../themes/matery/source/img/image-20200505195351673.png" alt="image-20200505195351673"></p><h3 id="基于注解的示例"><a href="#基于注解的示例" class="headerlink" title="基于注解的示例"></a>基于注解的示例</h3><pre><code>@Compoent 组件@Service service层@Controller  controller层@Repository dao层</code></pre><ol><li>新建一个Moudle，添加web支持</li><li>由于Maven可能存在资源过滤问题，我们将配置完善</li></ol><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resource</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>directory</span><span class="token punctuation">></span></span>src/main/resources<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>directory</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>includes</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>include</span><span class="token punctuation">></span></span>**/*.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>include</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>includes</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filtering</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filtering</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resource</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">></span></span></code></pre><ol><li>在pom.xml文件引入相关依赖<ul><li>主要有Spring框架核心库、springMVC、servlet，JSTL等</li></ul></li><li>配置web.xml<ol><li>注意web.xml版本问题</li><li>注册DispatcherServlet</li><li>关联SpringMVC的配置文件</li><li>启动级别设为1</li><li>映射路径设为 <code>/</code></li></ol></li></ol><blockquote><p>web.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!--注册DispatcherServlet--></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:springMvc-servlet.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--关联SpringMVC配置文件--></span>    <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet映射文件--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>springMvc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><ol start="3"><li>配置关联SpringMVC配置的文件</li></ol><blockquote><p>springMvc-servlet.xml</p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>mvc</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/mvc<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--自动扫描包，让指定包下的注解生效，由IOC容器统一管理--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.Controller<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token comment" spellcheck="true">&lt;!--    --></span><span class="token comment" spellcheck="true">&lt;!--    &amp;lt;!&amp;ndash;添加处理映射器&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;bean class="org.springframework.web.servlet.handler.BeanNameUrlHandlerMapping">&lt;/bean>--></span><span class="token comment" spellcheck="true">&lt;!--    &amp;lt;!&amp;ndash;添加映射适配器&amp;ndash;&amp;gt;--></span><span class="token comment" spellcheck="true">&lt;!--    &lt;bean class="org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter">&lt;/bean>--></span>    <span class="token comment" spellcheck="true">&lt;!--        支持mvc注解驱动        在Spring中一般采用@RequestMapping注解来完成映射关系        要想使用@RequestMapper注解生效        必须向上下文中注册DefaultAnnotationHandlerMapping        和一个AnnotationMethodHandlerAdapter实例        而annotation-driver配置帮助我们自动完成伤处两个实例的注入    --></span>    <span class="token comment" spellcheck="true">&lt;!--让SpringMVC不处理静态资源，自动过滤比如css、js、html、MP4等--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>default-servlet-handler</span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--视图解析器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.web.servlet.view.InternalResourceViewResolver<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prefix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/WEB-INF/jsp/<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>suffix<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>.jsp<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><ol start="4"><li>编写Controller</li></ol><blockquote><p>AnnoController.java</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/father"</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//若在类上加此注解，则在类中方法上加此注解的前面拼接 /father</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    https://localhost:8080/father/helloAnno</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloAnno"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"helloAnno"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// hello 即视图名hello.jsp, 会被视图解析器处理</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>==<em>@Controller 代表这个类被Spring接管，被注解的这个类的所有方法，如果返回值是String，并由具体的页面可以跳转，就会被视图解析器解析</em>==</p><p>==<em>@RequestMapping注解用于映射url到控制器类或一个特定的处理程序方法，可用于类或方法上；用于类上，表示类中的所有响应请求的方法都是以该地址作为父路径</em>==</p><h3 id="RestFul风格"><a href="#RestFul风格" class="headerlink" title="RestFul风格"></a>RestFul风格</h3><p><strong>概念：</strong></p><p>RESTFUL是一种网络应用程序的设计风格和开发方式，基于<a href="https://baike.baidu.com/item/HTTP/243074" target="_blank" rel="noopener">HTTP</a>，可以使用<a href="https://baike.baidu.com/item/XML/86251" target="_blank" rel="noopener">XML</a>格式定义或<a href="https://baike.baidu.com/item/JSON/2462549" target="_blank" rel="noopener">JSON</a>格式定义。RESTFUL适用于移动互联网厂商作为业务使能接口的场景，实现第三方<a href="https://baike.baidu.com/item/OTT/9960940" target="_blank" rel="noopener">OTT</a>调用移动网络资源的功能，动作类型为新增、变更、删除所调用资源</p><p>RESTFUL就是一个资源定位及资源操作的风格。不是标准也不是协议，只是一种风格。基于这个风格设计的软件可以更简洁，更有层次，更易于实现缓存等机制</p><p><strong>特点：</strong></p><p>1、每一个URI代表1种资源；</p><p>2、客户端使用GET、POST、PUT、DELETE4个表示操作方式的动词对服务端资源进行操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源；</p><p>3、通过操作资源的表现形式来操作资源；</p><p>4、资源的表现形式是XML或者HTML；</p><p>5、客户端与服务端之间的交互在请求之间是无状态的，从客户端到服务端的每个请求都必须包含理解请求所必需的信息。 [1]</p><p><strong>传统的操作资源</strong>：通过不同的参数来实现不同的效果！方法单一：post和get</p><ul><li><a href="http://localhost/item/queryItem.action?id=1" target="_blank" rel="noopener">http://localhost/item/queryItem.action?id=1</a> 查询，GET</li><li><a href="http://localhost/item/saveItem.action" target="_blank" rel="noopener">http://localhost/item/saveItem.action</a> 新增，POST</li><li><a href="http://localhost/item/updateItem.action" target="_blank" rel="noopener">http://localhost/item/updateItem.action</a> 更新，POST</li><li><a href="http://localhost/item/deleteItem.action?id=1" target="_blank" rel="noopener">http://localhost/item/deleteItem.action?id=1</a> 删除，GET或POST</li></ul><p><strong>使用RESTFUL操作资源：</strong>可以通过不同的请求方式来实现不同的效果，请求地址一样，但是功能可以不同</p><ul><li><a href="http://localhost/item/1" target="_blank" rel="noopener">http://localhost/item/1</a> 查询，GET</li><li><a href="http://localhost/item/新增，POST" target="_blank" rel="noopener">http://localhost/item/新增，POST</a></li><li><a href="http://localhost/item/更新，PUT" target="_blank" rel="noopener">http://localhost/item/更新，PUT</a></li><li><a href="http://localhost/item/1" target="_blank" rel="noopener">http://localhost/item/1</a>  删除，DELETE</li></ul><p>在SpringMVC中可以使用@PathVariable注解，让方法参数的值对应帮到一个URL模板变量上。</p><p>所有的地址栏请求默认都会是 HTTP GET 类型的</p><p>方法级别的注解变体有如下几个：组合注解</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token annotation punctuation">@PostMapping</span><span class="token annotation punctuation">@PutMapping</span><span class="token annotation punctuation">@DeleteMapping</span><span class="token annotation punctuation">@PatchMapping</span></code></pre><p>@GetMapping  相当于在方法上加 <code>@RequestMapping(value = "", method = RequestMethod.GET)</code></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnnoController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//    @RequestMapping(value = "/helloAnno/{a}/{b}", method = RequestMethod.GET)</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/helloAnno/{a}/{b}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token annotation punctuation">@PathVariable</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">int</span> rs <span class="token operator">=</span> a<span class="token operator">+</span>b<span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,SpringMVC,and the sum result is:"</span> <span class="token operator">+</span> rs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"helloAnno"</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// hello 即视图名hello.jsp, 会被视图解析器处理</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>重定向</p><pre class=" language-java"><code class="language-java"><span class="token keyword">return</span> <span class="token string">"redirect:/index.jsp"</span><span class="token punctuation">;</span></code></pre><h3 id="SpringMVC数据处理"><a href="#SpringMVC数据处理" class="headerlink" title="SpringMVC数据处理"></a>SpringMVC数据处理</h3><h5 id="处理提交的数据："><a href="#处理提交的数据：" class="headerlink" title="处理提交的数据："></a><strong>处理提交的数据：</strong></h5><ol><li>提交的域名和处理方法的参数一致</li></ol><p>提交数据：<a href="http://localhost:8080/hello?name=yuan" target="_blank" rel="noopener">http://localhost:8080/hello?name=yuan</a></p><p>处理方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">}</span></code></pre><ol start="2"><li>提交的域名称和处理方法的参数名不一致</li></ol><p>提交数据：<a href="http://localhost:8080/hello?username=yuan" target="_blank" rel="noopener">http://localhost:8080/hello?username=yuan</a></p><p>处理方法：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span><span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">)</span> String name<span class="token punctuation">)</span><span class="token punctuation">{</span>    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"hello"</span><span class="token punctuation">}</span></code></pre><ol start="3"><li>提交的域名称和处理方法的参数名不一致</li></ol><p>要求提交的表单域和对象的属性名一致，参数使用对象即可</p><p>User.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>UserController.java</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/demo"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo1</span><span class="token punctuation">(</span>User user<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"test"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-url"><code class="language-url">http://localhost:8080/demo?id=3&name=yuan&age=11</code></pre><p><img src="/img/image-20200507100541853.png" alt="结果显示图"></p><h5 id="数据显示到前端："><a href="#数据显示到前端：" class="headerlink" title="数据显示到前端："></a><strong>数据显示到前端：</strong></h5><p><strong>第一种：通过ModelAndView</strong></p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> ModelAndView <span class="token function">handleRequest</span><span class="token punctuation">(</span>HttpServletRequest httpServletRequest<span class="token punctuation">,</span> HttpServletResponse httpServletResponse<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// ModelAndView 模型和视图</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 封装对象，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">addObject</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"HelloSpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 封装要跳转的视图，放在ModelAndView中</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//  /WEB-INF/jsp/hello.jsp</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>第二种：通过Model</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloAnno"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">hello</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"Hello,SpringMVC"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"helloAnno"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>第三种：通过ModelMap</strong></p><pre class=" language-java"><code class="language-java">    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/helloAnno"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">hello</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> ModelMap model<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 封装要显示到视图中的数据</span>        <span class="token comment" spellcheck="true">// 相当于 req.setAttribute("name",name)</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"helloAnno"</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>Model 方法太少，只适合用于存储数据，简化了操作ModelMap 继承了LinkedMap，除了实现了自身的一些方法，同样的继承了LinkedMap的方法的特性ModelAndView 可以在存储数据的同时，进行设置返回的逻辑视图，进行控制展示层的跳转</code></pre><h5 id="乱码问题："><a href="#乱码问题：" class="headerlink" title="乱码问题："></a>乱码问题：</h5><p>测试步骤：</p><ul><li>建立表单</li></ul><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/en<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><ul><li>后台编写处理类</li></ul><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@PostMapping</span><span class="token punctuation">(</span><span class="token string">"/en"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">demo2</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span> String name<span class="token punctuation">,</span> Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"helloAnno"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>此时输入中文后会发现会先到helloAnno页面的中文数据出现乱码现象</p><p>处理乱码方法，</p><p>方法一：手动建立拦截器</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EncodingFilter</span> <span class="token keyword">implements</span> <span class="token class-name">Filter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">init</span><span class="token punctuation">(</span>FilterConfig filterConfig<span class="token punctuation">)</span> <span class="token keyword">throws</span> ServletException <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doFilter</span><span class="token punctuation">(</span>ServletRequest servletRequest<span class="token punctuation">,</span> ServletResponse servletResponse<span class="token punctuation">,</span> FilterChain filterChain<span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException<span class="token punctuation">,</span> ServletException <span class="token punctuation">{</span>        servletRequest<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        servletResponse<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        filterChain<span class="token punctuation">.</span><span class="token function">doFilter</span><span class="token punctuation">(</span>servletRequest<span class="token punctuation">,</span>servletResponse<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在web.xml配置拦截器</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!-- 配置过滤器   --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>com.yuan.filter.EncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!-- / 代表过滤所有的请求       --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>==<em>当配置<code>&lt;url-pattern&gt;/&lt;/url-pattern&gt;</code>的时候，它会匹配到路径型的url，就不会匹配到模式为.jsp型的url这个路径可以匹配/login /hello类型的url,但是不会匹配到index.jsp类型的url</em>==</p><p>==当配置<code>&lt;url-pattern&gt;/*&lt;url-pattern&gt;</code>的时候，它就会匹配到所有类型的url，包括路径型的，有各种后缀的等等==</p><p>第二种方式：使用SpringMVC提供的拦截器</p><p>直接在xml配置</p><pre class=" language-xml"><code class="language-xml"><span class="token comment" spellcheck="true">&lt;!--    使用SpringMVC提供的过滤器--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>org.springframework.web.filter.CharacterEncodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span></code></pre><p>有很小的可能，这个过滤器对get的支持不太好</p><p>处理方式：查看tomact版本是否过低，或者修改tomcat配置文件：设置编码</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Connector</span> <span class="token attr-name">URIEncoding</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">port</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8080<span class="token punctuation">"</span></span> <span class="token attr-name">protocol</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>HTTP/1.1<span class="token punctuation">"</span></span>           <span class="token attr-name">ConnectionTimeOut</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>20000<span class="token punctuation">"</span></span>           <span class="token attr-name">redirectPort</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>8443<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre><h3 id="Controller返回JSON数据"><a href="#Controller返回JSON数据" class="headerlink" title="Controller返回JSON数据"></a>Controller返回JSON数据</h3><h5 id="JSON回顾"><a href="#JSON回顾" class="headerlink" title="JSON回顾"></a>JSON回顾</h5><ul><li>JSON(JAvaScript Object Notation, JS 对象标记)是一种轻量级的数据交换格式，目前使用特别广泛</li><li>采用完全独立于编程语言的文本格式来存储和表示数据</li><li>简洁和清晰的层次结构使得JSON成为理想的数据交换语言</li><li>易于人阅读和编写，同时易于解析和生成，并有效地提升网络传输效率</li></ul><p>在JavaScript语言中，一切都是对象，因此，任何JavaScript支持的类型都可以通过JSON来表示，列入字符串</p><p>、数字、对象、数组等，</p><p>语法格式如下：</p><ul><li>对象表示为键值对，数据由逗号分隔</li><li>花括号保存对象</li><li>方括号保存数组</li></ul><p>JSON键值对是用来保存JavaScript对象的一种方式，和JavaScript对象的写法也大同小异，键值对组合中的键名写在前面并用双引号” “包裹，使用冒号: 分隔，然后紧接着值</p><pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span><span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"yuan"</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token property">"age"</span><span class="token operator">:</span><span class="token string">"11"</span><span class="token punctuation">}</span></code></pre><ul><li>JSON是JavaScript对象的字符串表示法，它使用文本表示一个JS对象的信息，本质是一个字符串</li></ul><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>a<span class="token punctuation">:</span><span class="token string">'hello'</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span><span class="token string">'world'</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是一个对象，注意键名也可以使用引号包裹的</span><span class="token keyword">var</span> json <span class="token operator">=</span> <span class="token string">'{"a":"hello","b":"world"}'</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 这是一个JSON字符串，本质是一个字符串</span></code></pre><p>JSON和JavaScript对象互转</p><ul><li>JSON字符串转化为JavaScript对象，使用JSON.prase()方法</li></ul><pre class=" language-json"><code class="language-json">var obj = JSON.prase('<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"world"</span><span class="token punctuation">}</span>'<span class="token punctuation">)</span><span class="token punctuation">;</span>// 结果是 <span class="token punctuation">{</span>a<span class="token operator">:</span>'hello'<span class="token punctuation">,</span> b<span class="token operator">:</span>'world'<span class="token punctuation">}</span></code></pre><ul><li>JavaScript对象转化为JSON字符串，使用JSON.stringify()方法</li></ul><pre class=" language-json"><code class="language-json">var json = JSON.stringify(<span class="token punctuation">{</span>a<span class="token operator">:</span>'hello'<span class="token punctuation">,</span> b<span class="token operator">:</span>'world'<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>// 结果是 '<span class="token punctuation">{</span><span class="token property">"a"</span><span class="token operator">:</span><span class="token string">"hello"</span><span class="token punctuation">,</span><span class="token property">"b"</span><span class="token operator">:</span><span class="token string">"world"</span><span class="token punctuation">}</span>'</code></pre><h5 id="返回JSON数据实现"><a href="#返回JSON数据实现" class="headerlink" title="返回JSON数据实现"></a>返回JSON数据实现</h5><ul><li>Jackson是目前一个不错的json解析工具，其他工具有阿里巴巴的fastjson等</li><li>这里使用jackson，导入jar包</li></ul><pre class=" language-xml"><code class="language-xml">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>@RestController //表示类中的方法全部不走视图解析器，直接返回字符串，此时不需要在方法上加@ResponseBody</p><p>@ResponseBody   //说明此方法不会走视图解释器，会直接返回一个字符串，配合@Controlller使用</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// @RestController //表示类中的方法全部不走视图解析器，直接返回字符串</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/json"</span><span class="token punctuation">)</span>    <span class="token annotation punctuation">@ResponseBody</span>   <span class="token comment" spellcheck="true">//说明不会走视图解释器，会直接返回一个字符串，配合@Controlller使用</span>    <span class="token keyword">public</span> String <span class="token function">json1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> JsonProcessingException <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 使用jackson中ObjectMapper类</span>        ObjectMapper mapper <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectMapper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"路明非"</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">"高天原"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> mapper<span class="token punctuation">.</span><span class="token function">writeValueAsString</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> s<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200507155527658.png" alt="测试结果图-jackson"></p><ul><li>发现虽然结果输出了，但却存在中文乱码的问题，</li><li>处理方法是：设置编码格式，以及返回类型</li><li>通过@RequestMaping的produces属性来实现</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// produces：指定响应体返回类型和编码</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/json"</span><span class="token punctuation">,</span> produces <span class="token operator">=</span> <span class="token string">"application/json;charset=ust-8"</span><span class="token punctuation">)</span></code></pre><p>统一的处理方式：在springMvc的配置文件springMvc-servlet.xml配置一下代码</p><pre class=" language-xml"><code class="language-xml">    <span class="token comment" spellcheck="true">&lt;!--JSON乱码问题配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>message-converters</span> <span class="token attr-name">register-defaults</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>true<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.StringHttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.MappingJackson2HttpMessageConverter<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>objectMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.http.converter.json.Jackson2ObjectMapperFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>failOnEmptyBeans<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>message-converters</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">mvc:</span>annotation-driven</span><span class="token punctuation">></span></span></code></pre><p><strong>FsatJson</strong></p><p>FastJson.jar 是阿里开发的一款专门用于Java开发的包，可以方便的实现json对象与JavaBean对象的转换，实现JavaBean对象与JSON字符串的转换，实现JSON对象与JSON字符串之间的转换</p><p>fastjson的pom依赖</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>fastjson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.2.60<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span></code></pre><p>FastJson三个主要的类</p><ul><li>JSONObject 代表JSON对象，通过各种形式的get()方法可以获取JSON对象中的数据，其本质是通过实现Map接口并调用接口中的方法完成的</li><li>JSONArray代表JSON对象数组，内部有List接口中的方法来完成操作</li><li>JSON代表JSONObject和JSONArray的转化</li></ul><h3 id="整合SSM"><a href="#整合SSM" class="headerlink" title="整合SSM"></a>整合SSM</h3><blockquote><p>数据库环境</p></blockquote><p>创建一个存放书籍数据的数据库表</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">DATABASE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">USE</span> <span class="token punctuation">`</span>ssmbuild<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">DROP</span> <span class="token keyword">TABLE</span> <span class="token keyword">IF</span> <span class="token keyword">EXISTS</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">;</span><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span> <span class="token punctuation">(</span>    <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span> <span class="token keyword">COMMENT</span> <span class="token string">'书id'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>bookName<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'书名'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span> <span class="token keyword">INT</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'数量'</span><span class="token punctuation">,</span>    <span class="token punctuation">`</span>detail<span class="token punctuation">`</span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">COMMENT</span> <span class="token string">'描述'</span><span class="token punctuation">,</span>    <span class="token keyword">KEY</span> <span class="token punctuation">`</span>bookID<span class="token punctuation">`</span> <span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">INNODB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8    <span class="token keyword">INSERT</span>  <span class="token keyword">INTO</span> <span class="token punctuation">`</span>books<span class="token punctuation">`</span><span class="token punctuation">(</span><span class="token punctuation">`</span>bookID<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookName<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>bookCounts<span class="token punctuation">`</span><span class="token punctuation">,</span><span class="token punctuation">`</span>detail<span class="token punctuation">`</span><span class="token punctuation">)</span><span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'Java'</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'从入门到放弃'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'MySQL'</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'从删库到跑路'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'Linux'</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'从进门到进牢'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><blockquote><p>数据库配置文件 <code>src/main/resources/database.properties</code></p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">jdbc.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token comment" spellcheck="true"># 如果使用的是Mysql8.0+,需要增加时区</span><span class="token attr-name">jdbc.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://localhost:3306/ssmbuild?useSSL=false&amp;useUnicode=true&amp;characterEncoding=utf8&amp;serverTimezone=Asia/Shanghai</span><span class="token attr-name">jdbc.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">jdbc.password</span><span class="token punctuation">=</span><span class="token attr-value">111</span></code></pre><blockquote><p>创建Domain文件夹放置Books对象    <code>com/yuan/domain/Books.java</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token annotation punctuation">@NoArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Books</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookID<span class="token punctuation">;</span>    <span class="token keyword">private</span> String bookName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> bookCounts<span class="token punctuation">;</span>    <span class="token keyword">private</span> String detail<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>创建dao层接口 <code>com/yuan/dao/BookMapper.java</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookMapper</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一个Book</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id删除一个Book</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新Book</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询全部Book,返回list集合</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>创建dao层bookmapper配置文件， <code>com/yuan/dao/BookMapper.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE mapper        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-mapper.dtd"></span><span class="token comment" spellcheck="true">&lt;!--绑定BookMapper接口--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">namespace</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--增加一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>insert</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>addBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      insert into ssmbuild.books(bookName,bookCounts,detail)      values (#{bookName}, #{bookCounts}, #{detail})   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>insert</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据id删除一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>delete</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>deleteBookById<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>int<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      delete from ssmbuild.books where bookID=#{bookID}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>delete</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--更新Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>update</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>updateBook<span class="token punctuation">"</span></span> <span class="token attr-name">parameterType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      update ssmbuild.books      set bookName = #{bookName},bookCounts = #{bookCounts},detail = #{detail}      where bookID = #{bookID}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>update</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--根据id查询,返回一个Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryBookById<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      select * from ssmbuild.books      where bookID = #{bookID}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--查询全部Book--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>queryAllBook<span class="token punctuation">"</span></span> <span class="token attr-name">resultType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>Books<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      SELECT * from ssmbuild.books   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mapper</span><span class="token punctuation">></span></span></code></pre><blockquote><p>配置spring-dao.xml文件   <code>src/main/resources/spring-dao.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd       http://www.springframework.org/schema/context       https://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置整合mybatis --></span>    <span class="token comment" spellcheck="true">&lt;!-- 1.关联数据库文件 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>property-placeholder</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:database.properties<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 2.数据库连接池 --></span>    <span class="token comment" spellcheck="true">&lt;!--数据库连接池        dbcp 半自动化操作 不能自动连接        c3p0 自动化操作（自动的加载配置文件 并且设置到对象里面）        druid        hikari    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.mchange.v2.c3p0.ComboPooledDataSource<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置连接池属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>driverClass<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.driver}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>jdbcUrl<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.url}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>user<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.username}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>${jdbc.password}<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- c3p0连接池的私有属性 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>maxPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>30<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>minPoolSize<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 关闭连接后不自动commit --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autoCommitOnClose<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 获取连接超时时间 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>checkoutTimeout<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10000<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 当获取连接失败重试次数 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>acquireRetryAttempts<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 3.配置SqlSessionFactory对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.SqlSessionFactoryBean<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 配置MyBaties全局配置文件:mybatis-config.xml --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>configLocation<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:mybatis-config.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 4.配置扫描Dao接口包，动态实现Dao接口注入到spring容器中 --></span>    <span class="token comment" spellcheck="true">&lt;!--解释 ：https://www.cnblogs.com/jpfss/p/7799806.html--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.mybatis.spring.mapper.MapperScannerConfigurer<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入sqlSessionFactory --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactoryBeanName<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>sqlSessionFactory<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 给出需要扫描Dao接口包 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>basePackage<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.dao<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><blockquote><p>mybatis配置文件  <code>src/main/resources/mybatis-config.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8" ?></span><span class="token doctype">&lt;!DOCTYPE configuration        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"        "http://mybatis.org/dtd/mybatis-3-config.dtd"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--配置数据源，交给Spring去做    --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>typeAliases</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>package</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.domain<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>typeAliases</span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--    绑定BookMapper.xml 映射配置--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mappers</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>mapper</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.dao.BookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>mappers</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span></code></pre><blockquote><p>配置service层接口 <code>com/yuan/service/BookService.java</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">BookService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//增加一个Book</span>    <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id删除一个Book</span>    <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//更新Book</span>    <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//根据id查询,返回一个Book</span>    Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Param</span><span class="token punctuation">(</span><span class="token string">"bookId"</span><span class="token punctuation">)</span> <span class="token keyword">int</span> id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//查询全部Book,返回list集合</span>    List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><blockquote><p>配置service实现类  <code>com/yuan/service/BookServiceImpl.java</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">BookService</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// service调dao层：组合dao</span>    <span class="token keyword">private</span> BookMapper bookMapper<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBookMapper</span><span class="token punctuation">(</span>BookMapper bookMapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>bookMapper <span class="token operator">=</span> bookMapper<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">addBook</span><span class="token punctuation">(</span>Books book<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">addBook</span><span class="token punctuation">(</span>book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">deleteBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">deleteBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">updateBook</span><span class="token punctuation">(</span>Books books<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">updateBook</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Books <span class="token function">queryBookById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryBookById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Books<span class="token operator">></span> <span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> bookMapper<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>配置service层配置文件  <code>src/main/resources/spring-service.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描service相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--BookServiceImpl注入到IOC容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--AOP事务支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><blockquote><p>编写Controller层与前端交互的类  <code>com/yuan/Controller/BookController.java</code></p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/book"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BookController</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//     调用service层</span>    <span class="token annotation punctuation">@Autowired</span>    <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"BookServiceImpl"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> BookService bookService<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 查询全部书籍，发送到展示页面</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/allBook"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span>  String <span class="token function">list</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>Books<span class="token operator">></span> list <span class="token operator">=</span> bookService<span class="token punctuation">.</span><span class="token function">queryAllBook</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"list"</span><span class="token punctuation">,</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"allBook"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>web配置文件  <code>web/WEB-INF/web.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>web-app</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>         <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd<span class="token punctuation">"</span></span>         <span class="token attr-name">version</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>4.0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--DispatcherServlet--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-class</span><span class="token punctuation">></span></span>org.springframework.web.servlet.DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>contextConfigLocation<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token comment" spellcheck="true">&lt;!--一定要注意:我们这里加载的是总的配置文件！--></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>classpath:applicationContext.xml<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>load-on-startup</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>load-on-startup</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>servlet-name</span><span class="token punctuation">></span></span>DispatcherServlet<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>servlet-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--encodingFilter--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-class</span><span class="token punctuation">></span></span>            org.springframework.web.filter.CharacterEncodingFilter        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-class</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>init-param</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-name</span><span class="token punctuation">></span></span>encoding<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-name</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>param-value</span><span class="token punctuation">></span></span>utf-8<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>param-value</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>init-param</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-mapping</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>filter-name</span><span class="token punctuation">></span></span>encodingFilter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>url-pattern</span><span class="token punctuation">></span></span>/*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>url-pattern</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>filter-mapping</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--Session过期时间--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-config</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>session-timeout</span><span class="token punctuation">></span></span>15<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-timeout</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>session-config</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>web-app</span><span class="token punctuation">></span></span></code></pre><blockquote><p>springMVC配置文件  <code>src/main/resources/springMvc-servlet.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>context</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/context<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans   http://www.springframework.org/schema/beans/spring-beans.xsd   http://www.springframework.org/schema/context   http://www.springframework.org/schema/context/spring-context.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 扫描service相关的bean --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token comment" spellcheck="true">&lt;!--BookServiceImpl注入到IOC容器中--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>BookServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.BookServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>bookMapper<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置事务管理器 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>transactionManager<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>org.springframework.jdbc.datasource.DataSourceTransactionManager<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token comment" spellcheck="true">&lt;!-- 注入数据库连接池 --></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>dataSource<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!--AOP事务支持--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><blockquote><p>将 <code>spring-dao.xml</code>、<code>spring-service.xml</code>、<code>springMvc-servlet.xml</code> 导入到总配置文件中</p><p><code>src/main/resources/applicationContext.xml</code></p></blockquote><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans       http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-dao.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:spring-service.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>import</span> <span class="token attr-name">resource</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>classpath:springMvc-servlet.xml<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><p><em>前端页面不再展示</em></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java设计模式</title>
      <link href="/2020/05/02/java-she-ji-mo-shi/"/>
      <url>/2020/05/02/java-she-ji-mo-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h2><p>特点：字节码随用随创建，随用随加</p><p>作用：不修改源码的基础上对方法增强</p><p>分类：</p><ul><li>基于接口的动态代理</li><li>基于子类的动态代理</li></ul><h5 id="基于接口的动态代理"><a href="#基于接口的动态代理" class="headerlink" title="基于接口的动态代理"></a>基于接口的动态代理</h5><ul><li>涉及的类：Proxy</li><li>提供者：JDK官方</li><li>如何创建代理对象：使用Proxy类中的newProxyInstance方法</li><li>创建代理对象的要求：被代理类最少实现一个接口，如果没有则不能使用</li><li>newProxyInstance方法的参数：<ul><li>ClassLoader：类加载器<ul><li>它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。</li></ul></li><li>Class[]：字节码数组<ul><li>它是用于让代理对象和被代理对象有相同方法。固定写法。</li></ul></li><li>InvocationHandler：用于提供增强的代码<ul><li>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。此接口的实现类都是谁用谁写。</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 模拟一个消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 动态代理：         *  特点：字节码随用随创建，随用随加载         *  作用：不修改源码的基础上对方法增强         *  分类：         *      基于接口的动态代理         *      基于子类的动态代理         *  基于接口的动态代理：         *      涉及的类：Proxy         *      提供者：JDK官方         *  如何创建代理对象：         *      使用Proxy类中的newProxyInstance方法         *  创建代理对象的要求：         *      被代理类最少实现一个接口，如果没有则不能使用         *  newProxyInstance方法的参数：         *      ClassLoader：类加载器         *          它是用于加载代理对象字节码的。和被代理对象使用相同的类加载器。固定写法。         *      Class[]：字节码数组         *          它是用于让代理对象和被代理对象有相同方法。固定写法。         *      InvocationHandler：用于提供增强的代码         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。         *          此接口的实现类都是谁用谁写。         */</span>       IProducer proxyProducer <span class="token operator">=</span> <span class="token punctuation">(</span>IProducer<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                <span class="token keyword">new</span> <span class="token class-name">InvocationHandler</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">/**                     * 作用：执行被代理对象的任何接口方法都会经过该方法                     * 方法参数的含义                     * @param proxy   代理对象的引用                     * @param method  当前执行的方法                     * @param args    当前执行方法所需的参数                     * @return        和被代理对象方法有相同的返回值                     * @throws Throwable                     */</span>                    <span class="token annotation punctuation">@Override</span>                    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                        <span class="token comment" spellcheck="true">//提供增强的代码</span>                        Object returnValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//1.获取方法执行的参数</span>                        Float money <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                        <span class="token comment" spellcheck="true">//2.判断当前方法是不是销售</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                        <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        proxyProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">10000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="基于子类的动态代理"><a href="#基于子类的动态代理" class="headerlink" title="基于子类的动态代理"></a>基于子类的动态代理</h5><ul><li>涉及的类：Enhancer</li><li>提供者：第三方cglib库</li><li>如何创建代理对象：使用Enhancer类中的create方法</li><li>创建代理对象的要求：被代理类不能是最终类</li><li>create方法的参数：<ul><li>Class：字节码<ul><li>它是用于指定被代理对象的字节码。</li></ul></li><li>Callback：用于提供增强的代码<ul><li>它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。</li><li>此接口的实现类都是谁用谁写。</li><li>我们一般写的都是该接口的子接口实现类：MethodInterceptor</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 模拟一个消费者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> Producer producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * 动态代理：         *  特点：字节码随用随创建，随用随加载         *  作用：不修改源码的基础上对方法增强         *  分类：         *      基于接口的动态代理         *      基于子类的动态代理         *  基于子类的动态代理：         *      涉及的类：Enhancer         *      提供者：第三方cglib库         *  如何创建代理对象：         *      使用Enhancer类中的create方法         *  创建代理对象的要求：         *      被代理类不能是最终类         *  create方法的参数：         *      Class：字节码         *          它是用于指定被代理对象的字节码。         *         *      Callback：用于提供增强的代码         *          它是让我们写如何代理。我们一般都是些一个该接口的实现类，通常情况下都是匿名内部类，但不是必须的。         *          此接口的实现类都是谁用谁写。         *          我们一般写的都是该接口的子接口实现类：MethodInterceptor         */</span>        Producer cglibProducer <span class="token operator">=</span> <span class="token punctuation">(</span>Producer<span class="token punctuation">)</span>Enhancer<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>producer<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">/**             * 执行北地阿里对象的任何方法都会经过该方法             * @param proxy             * @param method             * @param args             *    以上三个参数和基于接口的动态代理中invoke方法的参数是一样的             * @param methodProxy ：当前执行方法的代理对象             * @return             * @throws Throwable             */</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> Object <span class="token function">intercept</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> MethodProxy methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//提供增强的代码</span>                Object returnValue <span class="token operator">=</span> null<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//1.获取方法执行的参数</span>                Float money <span class="token operator">=</span> <span class="token punctuation">(</span>Float<span class="token punctuation">)</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//2.判断当前方法是不是销售</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">"saleProduct"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>method<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    returnValue <span class="token operator">=</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>producer<span class="token punctuation">,</span> money<span class="token operator">*</span><span class="token number">0.8f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                <span class="token keyword">return</span> returnValue<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cglibProducer<span class="token punctuation">.</span><span class="token function">saleProduct</span><span class="token punctuation">(</span><span class="token number">12000f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring入门笔记</title>
      <link href="/2020/05/02/spring-ru-men/"/>
      <url>/2020/05/02/spring-ru-men/</url>
      
        <content type="html"><![CDATA[<h3 id="spring对bean的管理细节"><a href="#spring对bean的管理细节" class="headerlink" title="spring对bean的管理细节"></a>spring对bean的管理细节</h3><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>beans</span> <span class="token attr-name">xmlns</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xmlns:</span>xsi</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.w3.org/2001/XMLSchema-instance<span class="token punctuation">"</span></span>       <span class="token attr-name"><span class="token namespace">xsi:</span>schemaLocation</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>beans</span><span class="token punctuation">></span></span></code></pre><h5 id="1-创建bean的三种方式"><a href="#1-创建bean的三种方式" class="headerlink" title="1. 创建bean的三种方式"></a>1. 创建bean的三种方式</h5><ul><li>第一种方式：使用默认构造函数创建。<ul><li>再spring的配置文件中使用bean标签，配以id和class属性之后，且没有其他属性和标签时。采用的就是默认构造函数创建bean对象，此时如果类中没有默认构造函数，则对象无法创建；</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    </code></pre><ul><li>第二种方式：<ul><li>使用普通工厂中的方法创建对象（使用某个类中的方法创建对象，并存入spring容器）</li></ul></li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.factory.InstanceFactory<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">factory-bean</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>instanceFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>第三种方式：<ul><li>使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器)</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.factory.StaticFactory<span class="token punctuation">"</span></span> <span class="token attr-name">factory-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getAccountService<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="2-bean的作用范围："><a href="#2-bean的作用范围：" class="headerlink" title="2.bean的作用范围："></a>2.bean的作用范围：</h5><ul><li>bean标签的scope属性<ul><li>作用：用于指定bean的作用范围</li><li>取值：常用的就是单例的和多例的<ul><li>singleton:单例的（默认值）</li><li>prototype：多例的</li><li>request：作用于web应用的请求范围</li><li>session：作用于web应用的会话范围</li><li>global-session：作用于集群环境的会话范围（全局会话范围），当不是集群环境时，它就是session</li></ul></li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span> <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h5 id="3-bean对象的生命周期"><a href="#3-bean对象的生命周期" class="headerlink" title="3.bean对象的生命周期"></a>3.bean对象的生命周期</h5><ul><li>单例对象：<ul><li>出生：当容器创建时对象出生</li><li>活着：只要容器还在，对象一直活着</li><li>死亡：容器销毁，对象消亡</li><li>总结：单例对象的生命周期和容器相同</li></ul></li><li>多例对象：<ul><li>出生：当我们使用对象时spring框架为我们创建</li><li>活着：对象只要是在使用过程中就一直活着</li><li>死亡：当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收机制回收</li></ul></li></ul><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span>          <span class="token attr-name">scope</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>prototype<span class="token punctuation">"</span></span> <span class="token attr-name">init-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>init<span class="token punctuation">"</span></span> <span class="token attr-name">destroy-method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>destroy<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><h3 id="spring中的依赖注入"><a href="#spring中的依赖注入" class="headerlink" title="spring中的依赖注入"></a>spring中的依赖注入</h3><p>（Dependency Injection）</p><blockquote><p>Ioc的作用时降低程序间的耦合，即依赖关系；而依赖关系的管理交给spring来维护；在当前类需要用到其它类的对象，由spring为我们提供，我们只需要在配置文件中说明依赖关系的维护，称为：==依赖注入==</p></blockquote><h5 id="1-能注入的数据有三类："><a href="#1-能注入的数据有三类：" class="headerlink" title="1.能注入的数据有三类："></a>1.能注入的数据有三类：</h5><ul><li>基本类型和String</li><li>其它bean类型（在配置文件中或者注解配置过的bean）</li><li>复杂类型/集合类型</li></ul><h5 id="2-注入的方式有三种："><a href="#2-注入的方式有三种：" class="headerlink" title="2.注入的方式有三种："></a>2.注入的方式有三种：</h5><ul><li>使用构造函数提供<ul><li>使用的标签:<code>constructor-arg</code></li><li>标签出现的位置：bean标签的内部</li><li>标签中的属性<ul><li>type：用于指定要注入的数据的数据类型，该数据类型也是构造函数中某个或某些参数的类型</li><li>index：用于指定要注入的数据给构造函数中指定索引位置的参数赋值。索引的位置是从0开始</li><li>name：用于指定给构造函数中指定名称的参数赋值(常用的)</li><li>——-以上三个用于指定给构造函数中哪个参数赋值——</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</li></ul></li><li>优势：<ul><li>在获取bean对象时，注入数据是必须的操作，否则对象无法创建成功。</li></ul></li><li>弊端：<ul><li>改变了bean对象的实例化方式，使我们在创建对象时，如果用不到这些数据，也必须提供。</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是经常变化的数据，并不适用于注入的方式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">AccountServiceImpl</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span>Integer age<span class="token punctuation">,</span>Date birthday<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.impl.AccountServiceImpl<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>hehe<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>18<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>constructor-arg</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>constructor-arg</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置一个日期对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>使用set方法提供———–&gt;常用<ul><li>涉及的标签：property</li><li>出现的位置：bean标签的内部</li><li>标签的属性:<ul><li>name：用于指定注入时所调用的set方法名称</li><li>value：用于提供基本类型和String类型的数据</li><li>ref：用于指定其他的bean类型数据。它指的就是在spring的Ioc核心容器中出现过的bean对象</li></ul></li><li>优势：<ul><li>创建对象时没有明确的限制，可以直接使用默认构造函数，解决了前一种方法的弊端</li></ul></li><li>弊端：<ul><li>如果有某个成员必须有值，则获取对象是有可能set方法没有执行。</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl2</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//如果是经常变化的数据，并不适用于注入的方式</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span>    <span class="token keyword">private</span> Date birthday<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span>Integer age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBirthday</span><span class="token punctuation">(</span>Date birthday<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>birthday <span class="token operator">=</span> birthday<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan.service.impl.AccountServiceImpl2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>name<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>TEST<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>21<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>birthday<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span>    <span class="token comment" spellcheck="true">&lt;!-- 配置一个日期对象 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>now<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>java.util.Date<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li><ul><li>复杂类型的注入/集合类型的注入<ul><li>用于给List结构集合注入的标签： list array set</li><li>用于个Map结构集合注入的标签：map  props</li><li>结构相同，标签可以互换</li></ul></li></ul></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AccountServiceImpl3</span> <span class="token keyword">implements</span> <span class="token class-name">IAccountService</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">;</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">;</span>    <span class="token keyword">private</span> Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">;</span>    <span class="token keyword">private</span> Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span>String<span class="token operator">></span> myMap<span class="token punctuation">;</span>    <span class="token keyword">private</span> Properties myProps<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyStrs</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> myStrs<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myStrs <span class="token operator">=</span> myStrs<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyList</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>String<span class="token operator">></span> myList<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myList <span class="token operator">=</span> myList<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMySet</span><span class="token punctuation">(</span>Set<span class="token operator">&lt;</span>String<span class="token operator">></span> mySet<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mySet <span class="token operator">=</span> mySet<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyMap</span><span class="token punctuation">(</span>Map<span class="token operator">&lt;</span>String<span class="token punctuation">,</span> String<span class="token operator">></span> myMap<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myMap <span class="token operator">=</span> myMap<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMyProps</span><span class="token punctuation">(</span>Properties myProps<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>myProps <span class="token operator">=</span> myProps<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-xml"><code class="language-xml">    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bean</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>accountService3<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.itheima.service.impl.AccountServiceImpl3<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myStrs<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>set</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>set</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myList<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>list</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>AAA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>CCC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>list</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myMap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>props</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testC<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ccc<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prop</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testD<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>ddd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prop</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>props</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myProps<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>map</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testA<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>aaa<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>entry</span> <span class="token attr-name">key</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>testB<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>BBB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>entry</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>map</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bean</span><span class="token punctuation">></span></span></code></pre><ul><li>使用注解提供(详情看注解IOC配置)</li></ul><h3 id="注解IOC配置"><a href="#注解IOC配置" class="headerlink" title="注解IOC配置"></a>注解IOC配置</h3><h5 id="1-用于创建对象的"><a href="#1-用于创建对象的" class="headerlink" title="1.用于创建对象的"></a>1.用于创建对象的</h5><ul><li>他们的作用就和在XML配置文件中编写一个<bean>标签实现的功能是一样的</bean></li><li>@Component:<ul><li>作用：用于把当前类对象存入spring容器中</li><li>属性：value：用于指定bean的id。当我们不写时，它的默认值是当前类名，且首字母改小写。</li></ul></li><li>@Controller：一般用在表现层</li><li>@Service：一般用在业务层</li><li>@Repository：一般用在持久层</li><li>以上三个注解他们的作用和属性与Component是一模一样。他们三个是spring框架为我们提供明确的三层使用的注解，使我们的三层对象更加清晰</li></ul><h5 id="2-用于注入数据的"><a href="#2-用于注入数据的" class="headerlink" title="2.用于注入数据的"></a>2.用于注入数据的</h5><ul><li>他们的作用就和在xml配置文件中的bean标签中写一个<code>&lt;property&gt;</code>标签的作用是一样的</li><li>@Autowired:<ul><li>作用：自动按照类型注入。只要容器中有唯一的一个bean对象类型和要注入的变量类型匹配，就可以注入成功，如果ioc容器中没有任何bean的类型和要注入的变量类型匹配，则报错。</li><li>出现位置：可以是变量上，也可以是方法上</li><li>细节：在使用注解注入时，set方法就不是必须的了。</li></ul></li><li>@Qualifier:<ul><li>作用：在按照类中注入的基础之上再按照名称注入。它在给类成员注入时不能单独使用。但是在给方法参数注入时可以</li><li>属性：value：用于指定注入bean的id。</li></ul></li><li>@Resource：<ul><li>作用：直接按照bean的id注入。它可以独立使用</li><li>属性：name：用于指定bean的id。</li></ul></li><li>以上三个注入都只能注入其他bean类型的数据，而基本类型和String类型无法使用上述注解实现。另外，集合类型的注入只能通过XML来实现。</li><li>@ Value：<ul><li>作用：用于注入基本类型和String类型的数据</li><li>属性： value：用于指定数据的值。它可以使用spring中SpEL(也就是spring的el表达式）</li><li>SpEL的写法：${表达式}</li></ul></li></ul><h5 id="3-用于改变作用范围的"><a href="#3-用于改变作用范围的" class="headerlink" title="3.用于改变作用范围的"></a>3.用于改变作用范围的</h5><ul><li>他们的作用就和在bean标签中使用scope属性实现的功能是一样的</li><li>@Scope：<ul><li>作用：用于指定bean的作用范围</li><li>属性：value：指定范围的取值。常用取值：singleton prototype</li></ul></li></ul><h5 id="4-和生命周期相关"><a href="#4-和生命周期相关" class="headerlink" title="4.和生命周期相关"></a>4.和生命周期相关</h5><ul><li>他们的作用就和在bean标签中使用init-method和destroy-methode的作用是一样的</li><li>@PreDestroy<ul><li>作用：用于指定销毁方法</li></ul></li><li>@PostConstruct<ul><li>作用：用于指定初始化方法</li></ul></li></ul><h3 id="代替xml文件的配置类"><a href="#代替xml文件的配置类" class="headerlink" title="代替xml文件的配置类"></a>代替xml文件的配置类</h3><blockquote><p>该类是一个配置类，它的作用和bean.xml是一样的</p></blockquote><ul><li>@Configuration<ul><li>作用：指定当前类是一个配置类</li><li>细节：当配置类作为AnnotationConfigApplicationContext对象创建的参数时，该注解可以不写</li></ul></li><li>@ComponentScan<ul><li>作用：用于通过注解指定spring在创建容器时要扫描的包</li><li>属性：value：它和basePackages的作用是一样的，都是用于指定创建容器时要扫描的包。</li><li>我们使用此注解就等同于在xml中配置了:</li></ul></li></ul><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">context:</span>component-scan</span> <span class="token attr-name">base-package</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>com.yuan<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token namespace">context:</span>component-scan</span><span class="token punctuation">></span></span></code></pre><ul><li>@Bean<ul><li>作用：用于把当前方法的返回值作为bean对象存入spring的ioc容器中</li><li>属性：name:用于指定bean的id。当不写时，默认值是当前方法的名称</li><li>细节：当我们使用注解配置方法时，如果方法有参数，spring框架会去容器中查找有没有可用的bean对象。查找的方式和Autowired注解的作用是一样的</li></ul></li><li>@Import<ul><li>作用：用于导入其他的配置类</li><li>属性：value：用于指定其他配置类的字节码。当我们使用Import的注解之后，有Import注解的类就父配置类，而导入的都是子配置类</li></ul></li><li>@PropertySource<ul><li>作用：用于指定properties文件的位置</li><li>属性： value：指定文件的名称和路径。关键字：classpath，表示类路径下</li></ul></li></ul><h3 id="Junit单元测试配置"><a href="#Junit单元测试配置" class="headerlink" title="Junit单元测试配置"></a>Junit单元测试配置</h3><blockquote><p>Spring整合junit的配置</p></blockquote><ul><li>导入spring整合junit的jar(坐标)</li><li>使用Junit提供的一个注解把原有的main方法替换了，替换成spring提供的<ul><li>@Runwith</li></ul></li><li>告知spring的运行器，spring和ioc创建是基于xml还是注解的，并且说明位置<ul><li>@ContextConfiguration<ul><li>locations：指定xml文件的位置，加上classpath关键字，表示在类路径下</li><li>classes：指定注解类所在地位置</li></ul></li></ul></li></ul><p><em>当我们使用spring 5.x版本的时候，要求junit的jar必须是4.12及以上</em></p><h3 id="spring中基于XML的AOP配置步骤"><a href="#spring中基于XML的AOP配置步骤" class="headerlink" title="spring中基于XML的AOP配置步骤"></a>spring中基于XML的AOP配置步骤</h3><ul><li><p>1、把通知Bean也交给spring来管理</p></li><li><p>2、使用aop:config标签表明开始AOP的配置</p></li><li><p>3、使用aop:aspect标签表明配置切面</p><ul><li>id属性：是给切面提供一个唯一标识</li><li>ref属性：是指定通知类bean的Id。</li></ul></li><li><p>4、在aop:aspect标签的内部使用对应标签来配置通知的类型</p><ul><li><p>现在示例是让<code>printLog</code>方法在切入点方法执行之前之前：所以是前置通知</p></li><li><p>aop:before：表示配置前置通知</p><ul><li>method属性：用于指定Logger类中哪个方法是前置通知</li><li>pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强</li></ul></li><li><p>切入点表达式的写法：</p><ul><li><p>关键字：execution(表达式)</p></li><li><p>表达式：</p><ul><li>访问修饰符  返回值  包名.包名.包名…类名.方法名(参数列表)</li></ul></li><li><p>标准的表达式写法：</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>访问修饰符可以省略</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">void</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>返回值可以使用通配符，表示任意返回值</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">*</span>  com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>包名可以使用通配符，表示任意包。但是有几级包，就需要写几个*.</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>包名可以使用..表示当前包及其子包</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">*</span>   <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre></li></ul></li><li><p>类名和方法名都可以使用*来实现通配</p><ul><li><pre class=" language-xml"><code class="language-xml">* *..*.*()</code></pre></li></ul></li><li><p>参数列表：</p><ul><li>可以直接写数据类型：<ul><li>基本类型直接写名称   <code>int</code></li><li>引用类型写包名.类名的方式   <code>java.lang.String</code></li></ul></li><li>可以使用通配符表示任意类型，但是必须有参数</li><li>可以使用<code>..</code>表示有无参数均可，有参数可以是任意类型</li></ul></li><li><p>全通配写法：</p><ul><li><code>* *..*.*(..)</code></li></ul></li><li><p>实际开发中切入点表达式的通常写法：</p><ul><li><p>切到业务层实现类下的所有方法</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">*</span> com<span class="token punctuation">.</span>itheima<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span></code></pre></li></ul></li></ul></li></ul></li></ul></li></ul><blockquote><p>bean.xml</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置srping的Ioc<span class="token punctuation">,</span>把service对象配置进来<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.yuan.service.impl.AccountServiceImpl"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>spring中基于XML的AOP配置步骤        <span class="token number">1</span>、把通知Bean也交给spring来管理        <span class="token number">2</span>、使用aop<span class="token operator">:</span>config标签表明开始AOP的配置        <span class="token number">3</span>、使用aop<span class="token operator">:</span>aspect标签表明配置切面                id属性：是给切面提供一个唯一标识                ref属性：是指定通知类bean的Id。        <span class="token number">4</span>、在aop<span class="token operator">:</span>aspect标签的内部使用对应标签来配置通知的类型               我们现在示例是让printLog方法在切入点方法执行之前之前：所以是前置通知               aop<span class="token operator">:</span>before：表示配置前置通知                    method属性：用于指定Logger类中哪个方法是前置通知                    pointcut属性：用于指定切入点表达式，该表达式的含义指的是对业务层中哪些方法增强            切入点表达式的写法：                关键字：<span class="token function">execution</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span>                表达式：                    访问修饰符  返回值  包名<span class="token punctuation">.</span>包名<span class="token punctuation">.</span>包名<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>类名<span class="token punctuation">.</span>方法名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span>                标准的表达式写法：                    <span class="token keyword">public</span> <span class="token keyword">void</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                访问修饰符可以省略                    <span class="token keyword">void</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                返回值可以使用通配符，表示任意返回值                    <span class="token operator">*</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                包名可以使用通配符，表示任意包。但是有几级包，就需要写几个<span class="token operator">*</span><span class="token punctuation">.</span>                    <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                包名可以使用<span class="token punctuation">.</span><span class="token punctuation">.</span>表示当前包及其子包                    <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>AccountServiceImpl<span class="token punctuation">.</span><span class="token function">saveAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span>                类名和方法名都可以使用<span class="token operator">*</span>来实现通配                    <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">)</span>                参数列表：                    可以直接写数据类型：                        基本类型直接写名称           <span class="token keyword">int</span>                        引用类型写包名<span class="token punctuation">.</span>类名的方式   java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>String                    可以使用通配符表示任意类型，但是必须有参数                    可以使用<span class="token punctuation">.</span><span class="token punctuation">.</span>表示有无参数均可，有参数可以是任意类型                全通配写法：                    <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>                实际开发中切入点表达式的通常写法：                    切到业务层实现类下的所有方法                        <span class="token operator">*</span> com<span class="token punctuation">.</span>yuan<span class="token punctuation">.</span>service<span class="token punctuation">.</span>impl<span class="token punctuation">.</span>*<span class="token punctuation">.</span>*<span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span>    <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Logger类 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"logger"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.yuan.utils.Logger"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置AOP<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置切面 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect id<span class="token operator">=</span><span class="token string">"logAdvice"</span> ref<span class="token operator">=</span><span class="token string">"logger"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置通知的类型，并且建立通知方法和切入点方法的关联<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"printLog"</span> pointcut<span class="token operator">=</span><span class="token string">"execution(* com.yuan.service.impl.*.*(..))"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>before<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h3 id="四种常用通知类型"><a href="#四种常用通知类型" class="headerlink" title="四种常用通知类型"></a>四种常用通知类型</h3><blockquote><p>四种常用通知（前置，后置，异常，最终）以及环绕通知</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置Logger类 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"logger"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.yuan.utils.Logger"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置AOP<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置切入点表达式 id属性用于指定表达式的唯一标识。expression属性用于指定表达式内容              此标签写在aop<span class="token operator">:</span>aspect标签内部只能当前切面使用。              它还可以写在aop<span class="token operator">:</span>aspect外面，此时就变成了所有切面可用          <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"pt1"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.yuan.service.impl.*.*(..))"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>pointcut<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>配置切面 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect id<span class="token operator">=</span><span class="token string">"logAdvice"</span> ref<span class="token operator">=</span><span class="token string">"logger"</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置前置通知：在切入点方法执行之前执行            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">"beforePrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span> <span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>before<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置后置通知：在切入点方法正常执行之后值。它和异常通知永远只能执行一个            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>returning method<span class="token operator">=</span><span class="token string">"afterReturningPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>returning<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置异常通知：在切入点方法执行产生异常之后执行。它和后置通知永远只能执行一个            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>throwing method<span class="token operator">=</span><span class="token string">"afterThrowingPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>throwing<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置最终通知：无论切入点方法是否正常执行它都会在其后面执行            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>after method<span class="token operator">=</span><span class="token string">"afterPrintLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>after<span class="token operator">></span><span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置环绕通知 详细的注释请看Logger类中<span class="token operator">--</span><span class="token operator">></span>            <span class="token operator">&lt;</span>aop<span class="token operator">:</span>around method<span class="token operator">=</span><span class="token string">"aroundPringLog"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>around<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><blockquote><p>logger.java</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 用于记录日志的工具类，它里面提供了公共的代码 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Logger</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 前置通知     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">beforePrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"前置通知Logger类中的beforePrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 后置通知     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterReturningPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"后置通知Logger类中的afterReturningPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 异常通知     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterThrowingPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"异常通知Logger类中的afterThrowingPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 最终通知     */</span>    <span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">afterPrintLog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最终通知Logger类中的afterPrintLog方法开始记录日志了。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 环绕通知     * 问题：     *      当我们配置了环绕通知之后，切入点方法没有执行，而通知方法执行了。     * 分析：     *      通过对比动态代理中的环绕通知代码，发现动态代理的环绕通知有明确的切入点方法调用，而我们的代码中没有。     * 解决：     *      Spring框架为我们提供了一个接口：ProceedingJoinPoint。该接口有一个方法proceed()，此方法就相当于明确调用切入点方法。     *      该接口可以作为环绕通知的方法参数，在程序执行时，spring框架会为我们提供该接口的实现类供我们使用。     *     * spring中的环绕通知：     *      它是spring框架为我们提供的一种可以在代码中手动控制增强方法何时执行的方式。     */</span>    <span class="token keyword">public</span> Object <span class="token function">aroundPringLog</span><span class="token punctuation">(</span>ProceedingJoinPoint pjp<span class="token punctuation">)</span><span class="token punctuation">{</span>        Object rtValue <span class="token operator">=</span> null<span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//得到方法执行所需的参数</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。前置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            rtValue <span class="token operator">=</span> pjp<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//明确调用业务层方法（切入点方法）</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。后置"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> rtValue<span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> t<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。异常"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Logger类中的aroundPringLog方法开始记录日志了。。。最终"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="基于xml的声明式事务控制"><a href="#基于xml的声明式事务控制" class="headerlink" title="基于xml的声明式事务控制"></a>基于xml的声明式事务控制</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置业务层<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountService"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.yuan.service.impl.AccountServiceImpl"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"accountDao"</span> ref<span class="token operator">=</span><span class="token string">"accountDao"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置账户的持久层<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"accountDao"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"com.yuan.dao.impl.AccountDaoImpl"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置数据源<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/eesy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1234"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> spring中基于XML的声明式事务控制配置步骤        <span class="token number">1</span>、配置事务管理器        <span class="token number">2</span>、配置事务的通知                此时我们需要导入事务的约束 tx名称空间和约束，同时也需要aop的                使用tx<span class="token operator">:</span>advice标签配置事务通知                    属性：                        id：给事务通知起一个唯一标识                        transaction<span class="token operator">-</span>manager：给事务通知提供一个事务管理器引用        <span class="token number">3</span>、配置AOP中的通用切入点表达式        <span class="token number">4</span>、建立事务通知和切入点表达式的对应关系        <span class="token number">5</span>、配置事务的属性               是在事务的通知tx<span class="token operator">:</span>advice标签的内部     <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务管理器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务的通知<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>advice id<span class="token operator">=</span><span class="token string">"txAdvice"</span> transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务的属性                isolation：用于指定事务的隔离级别。默认值是DEFAULT，表示使用数据库的默认隔离级别。                propagation：用于指定事务的传播行为。默认值是REQUIRED，表示一定会有事务，增删改的选择。查询方法可以选择SUPPORTS。                read<span class="token operator">-</span>only：用于指定事务是否只读。只有查询方法才能设置为<span class="token boolean">true</span>。默认值是<span class="token boolean">false</span>，表示读写。                timeout：用于指定事务的超时时间，默认值是<span class="token operator">-</span><span class="token number">1</span>，表示永不超时。如果指定了数值，以秒为单位。                rollback<span class="token operator">-</span><span class="token keyword">for</span>：用于指定一个异常，当产生该异常时，事务回滚，产生其他异常时，事务不回滚。没有默认值。表示任何异常都回滚。                no<span class="token operator">-</span>rollback<span class="token operator">-</span><span class="token keyword">for</span>：用于指定一个异常，当产生该异常时，事务不回滚，产生其他异常时事务回滚。没有默认值。表示任何异常都回滚。        <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"*"</span> propagation<span class="token operator">=</span><span class="token string">"REQUIRED"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"false"</span><span class="token operator">/</span><span class="token operator">></span>            <span class="token operator">&lt;</span>tx<span class="token operator">:</span>method name<span class="token operator">=</span><span class="token string">"find*"</span> propagation<span class="token operator">=</span><span class="token string">"SUPPORTS"</span> read<span class="token operator">-</span>only<span class="token operator">=</span><span class="token string">"true"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>method<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>attributes<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>advice<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置aop<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置切入点表达式<span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">"pt1"</span> expression<span class="token operator">=</span><span class="token string">"execution(* com.yuan.service.impl.*.*(..))"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>pointcut<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>建立切入点表达式和事务通知的对应关系 <span class="token operator">--</span><span class="token operator">></span>        <span class="token operator">&lt;</span>aop<span class="token operator">:</span>advisor advice<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"txAdvice"</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">"pt1"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>advisor<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h3 id="基于注解声明式事务控制"><a href="#基于注解声明式事务控制" class="headerlink" title="基于注解声明式事务控制"></a>基于注解声明式事务控制</h3><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/aop"</span>       xmlns<span class="token operator">:</span>tx<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/tx"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>"        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>tx<span class="token operator">/</span>spring<span class="token operator">-</span>tx<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>aop<span class="token operator">/</span>spring<span class="token operator">-</span>aop<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置spring创建容器时要扫描的包<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"com.yuan"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置JdbcTemplate<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"jdbcTemplate"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.core.JdbcTemplate"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置数据源<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"dataSource"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"driverClassName"</span> value<span class="token operator">=</span><span class="token string">"com.mysql.jdbc.Driver"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"url"</span> value<span class="token operator">=</span><span class="token string">"jdbc:mysql://localhost:3306/eesy"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"username"</span> value<span class="token operator">=</span><span class="token string">"root"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"password"</span> value<span class="token operator">=</span><span class="token string">"1234"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> spring中基于注解 的声明式事务控制配置步骤        <span class="token number">1</span>、配置事务管理器        <span class="token number">2</span>、开启spring对注解事务的支持        <span class="token number">3</span>、在需要事务支持的地方使用<span class="token annotation punctuation">@Transactional</span>注解     <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置事务管理器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"transactionManager"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"dataSource"</span> ref<span class="token operator">=</span><span class="token string">"dataSource"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启spring对注解事务的支持<span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven transaction<span class="token operator">-</span>manager<span class="token operator">=</span><span class="token string">"transactionManager"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>tx<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2020/04/27/hello-world/"/>
      <url>/2020/04/27/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> TheWorld </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello world </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库三级部分题型笔记</title>
      <link href="/2020/03/11/shu-ju-ku-san-ji-ti-xing/"/>
      <url>/2020/03/11/shu-ju-ku-san-ji-ti-xing/</url>
      
        <content type="html"><![CDATA[<h3 id="第一部分：数据库创建"><a href="#第一部分：数据库创建" class="headerlink" title="第一部分：数据库创建"></a>第一部分：数据库创建</h3><h5 id="1-1-数据库的创建与维护"><a href="#1-1-数据库的创建与维护" class="headerlink" title="1.1:数据库的创建与维护"></a>1.1:数据库的创建与维护</h5><p>1.1创建一个名为StudentDB的数据库，该数据库包含相应的主数据文件、日志文件、和名为stuDB1和stuDB2的辅助数据文件；主数据文件和日志文件建立在：”D:\DATA“目录下，辅助数据文件建立在：”E:\DATA”目录下；数据文件初始大小为：3M,按1M无限制增长；日志文件按%10有限制增长，文件最大空间为1GB。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> StudentDB<span class="token keyword">on</span> <span class="token keyword">primary</span><span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'StudentDB'</span><span class="token punctuation">,</span>    filename<span class="token operator">=</span><span class="token string">'D:\DATA\StudentDB.mdf'</span><span class="token punctuation">,</span>    size<span class="token operator">=</span>3mb<span class="token punctuation">,</span>    maxsize<span class="token operator">=</span>unlimited<span class="token punctuation">,</span>    filegrowth<span class="token operator">=</span>1mb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'StuDB1'</span><span class="token punctuation">,</span>    filename<span class="token operator">=</span><span class="token string">'E:\DATA\StuDB1.ndf'</span><span class="token punctuation">,</span>    size<span class="token operator">=</span>3mb<span class="token punctuation">,</span>    maxsize<span class="token operator">=</span>unlimited<span class="token punctuation">,</span>    filegrowth<span class="token operator">=</span>1mb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'StuDB2'</span><span class="token punctuation">,</span>    filename<span class="token operator">=</span><span class="token string">'E:\DATA\StuDB2.ndf'</span><span class="token punctuation">,</span>    size<span class="token operator">=</span>3mb<span class="token punctuation">,</span>    maxsize<span class="token operator">=</span>unlimited<span class="token punctuation">,</span>    filegrowth<span class="token operator">=</span>1mb<span class="token punctuation">)</span>log <span class="token keyword">on</span><span class="token punctuation">(</span>    name<span class="token operator">=</span><span class="token string">'StudentDB_log'</span><span class="token punctuation">,</span>    filename<span class="token operator">=</span><span class="token string">'D:\DATA\StudentDB_log.ldf'</span><span class="token punctuation">,</span>    size<span class="token operator">=</span>1mb<span class="token punctuation">,</span>    maxsize<span class="token operator">=</span>1gb<span class="token punctuation">,</span>    filegrowth<span class="token operator">=</span><span class="token number">10</span><span class="token operator">%</span><span class="token punctuation">)</span></code></pre><h5 id="1-2-修改数据库"><a href="#1-2-修改数据库" class="headerlink" title="1.2:修改数据库"></a>1.2:修改数据库</h5><p>1.修改StudentDB数据库主数据文件的初始大小为5M;</p><p>2.在StudentDB数据库中创建名为”GData”的文件组，为数据库添加辅助数据文件”StuDB3”,文件建立在”E:DATA”目录下，将该文件添加到”GData”文件组中。</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token punctuation">.</span><span class="token keyword">alter</span> <span class="token keyword">database</span> StudentDB<span class="token keyword">modify</span> <span class="token keyword">file</span><span class="token punctuation">(</span>name<span class="token operator">=</span>StudentDB<span class="token punctuation">,</span>size<span class="token operator">=</span>5mb<span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">.</span><span class="token keyword">alter</span> <span class="token keyword">database</span> StudentDB <span class="token keyword">add</span> filegroup GDatego<span class="token keyword">alter</span> <span class="token keyword">database</span> StudentDB<span class="token keyword">add</span> <span class="token keyword">file</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'stuDB3'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span><span class="token string">'E:\DATA\stuDB3.ndf'</span><span class="token punctuation">)</span><span class="token keyword">to</span> filegroup GDate </code></pre><h5 id="1-3-删除StudentDB数据库"><a href="#1-3-删除StudentDB数据库" class="headerlink" title="1.3:删除StudentDB数据库"></a>1.3:删除StudentDB数据库</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--删除数据库的辅助文件StuDB3</span><span class="token keyword">alter</span> <span class="token keyword">database</span> StudentDBremove <span class="token keyword">file</span> StuDB3<span class="token comment" spellcheck="true">--删除数据库</span><span class="token keyword">drop</span> <span class="token keyword">database</span> StudentDB</code></pre><h5 id="1-4-分离数据库"><a href="#1-4-分离数据库" class="headerlink" title="1.4:分离数据库"></a>1.4:分离数据库</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">exec</span> sp_detach_db StudentDB</code></pre><h5 id="1-5-附加数据库"><a href="#1-5-附加数据库" class="headerlink" title="1.5:附加数据库"></a>1.5:附加数据库</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">database</span> StudentDB<span class="token keyword">on</span> <span class="token keyword">primary</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">'StudentDB'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span><span class="token string">'C:\StudentDB.mdf'</span><span class="token punctuation">)</span><span class="token keyword">for</span> attach</code></pre><h5 id="1-6-创建与删除架构"><a href="#1-6-创建与删除架构" class="headerlink" title="1.6:创建与删除架构"></a>1.6:创建与删除架构</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">schema</span> 架构名<span class="token keyword">drop</span> <span class="token keyword">schema</span> 架构名</code></pre><h3 id="第二部分-数据库表"><a href="#第二部分-数据库表" class="headerlink" title="第二部分.数据库表"></a>第二部分.数据库表</h3><h5 id="2-1：添加、修改与删除数据表中的某列"><a href="#2-1：添加、修改与删除数据表中的某列" class="headerlink" title="2.1：添加、修改与删除数据表中的某列"></a>2.1：添加、修改与删除数据表中的某列</h5><pre class=" language-sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token punctuation">[</span>字段属性<span class="token punctuation">]</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">alter</span> <span class="token keyword">column</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token punctuation">[</span>字段新属性<span class="token punctuation">]</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">drop</span> <span class="token keyword">column</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span></code></pre><h5 id="2-2：创建分区表"><a href="#2-2：创建分区表" class="headerlink" title="2.2：创建分区表"></a>2.2：创建分区表</h5><p>在StuDB中，依据表Student表的StudentYear列，来创建分区函数YearOrderPartFunc,</p><p>边界值为2007和2009</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">--首先创建分区函数</span><span class="token keyword">create</span> <span class="token keyword">partition</span> <span class="token keyword">function</span> YearOrderPartFunc<span class="token punctuation">(</span><span class="token punctuation">[</span>字段类型<span class="token operator">/</span><span class="token keyword">int</span><span class="token operator">/</span><span class="token keyword">varchar</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">as</span> range <span class="token keyword">left</span> <span class="token keyword">for</span> <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'2007'</span><span class="token punctuation">,</span><span class="token string">'2009'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--然后创建分区方案</span><span class="token keyword">create</span> <span class="token keyword">partition</span> scheme YearOrderPartScheme<span class="token keyword">as</span> <span class="token keyword">partition</span> YearOrderPartFunc<span class="token keyword">to</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token keyword">primary</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>文件组名<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>文件组名<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--最后创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">(</span>字段……略StdYear <span class="token operator">in</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">)</span><span class="token keyword">on</span> YearOrderPartScheme<span class="token punctuation">(</span>StdYear<span class="token punctuation">)</span><span class="token comment" spellcheck="true">--查看数据所在分区</span><span class="token keyword">select</span> <span class="token operator">*</span><span class="token punctuation">,</span>$<span class="token keyword">partition</span><span class="token punctuation">.</span>YearOrderPartFunc<span class="token punctuation">(</span>StdYear<span class="token punctuation">)</span><span class="token keyword">as</span> <span class="token string">'所属分区'</span><span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span></code></pre><h5 id="2-3：表的约束"><a href="#2-3：表的约束" class="headerlink" title="2.3：表的约束"></a>2.3：表的约束</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 修改表的时候定义约束</span><span class="token comment" spellcheck="true">-- 给某个字段增加默认值default</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span> <span class="token keyword">default</span><span class="token punctuation">(</span><span class="token punctuation">[</span>约束条件<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 字段值取值唯一</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span> <span class="token keyword">unique</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 检查约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span> <span class="token keyword">check</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token operator">>=</span><span class="token number">12</span> <span class="token operator">and</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token operator">&lt;</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 主键约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 外键约束</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token punctuation">[</span>字段类型<span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span> <span class="token keyword">references</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>外键字段名<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 建表时写法</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">add</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span> <span class="token keyword">foreign</span> <span class="token keyword">key</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">references</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>外键字段名<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 删除约束</span><span class="token keyword">alter</span> <span class="token keyword">table</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">drop</span> <span class="token keyword">constraint</span> <span class="token punctuation">[</span>约束名<span class="token punctuation">]</span></code></pre><h5 id="2-4：索引"><a href="#2-4：索引" class="headerlink" title="2.4：索引"></a>2.4：索引</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 聚集索引</span><span class="token keyword">create</span> <span class="token keyword">clustered</span> <span class="token keyword">index</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span><span class="token keyword">on</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">desc</span><span class="token operator">/</span><span class="token keyword">asc</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 重新生成索引</span><span class="token keyword">alter</span> <span class="token keyword">index</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span><span class="token keyword">on</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span> rebuild<span class="token comment" spellcheck="true">-- 删除索引</span><span class="token keyword">drop</span> <span class="token keyword">index</span> <span class="token punctuation">[</span>索引名<span class="token punctuation">]</span><span class="token keyword">on</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span></code></pre><h5 id="2-5：查询"><a href="#2-5：查询" class="headerlink" title="2.5：查询"></a>2.5：查询</h5><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- 消除重复查询</span><span class="token keyword">select</span> <span class="token keyword">distinct</span> <span class="token punctuation">[</span>要查询的字段名，不同字段名中间用逗号隔开<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 查找前n条记录</span><span class="token keyword">select</span> <span class="token keyword">top</span> n <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 查找前n%记录</span><span class="token keyword">select</span> <span class="token keyword">top</span> n <span class="token keyword">percent</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 赋予记录中文别名</span><span class="token keyword">select</span>  <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token punctuation">[</span>自定义属性名<span class="token punctuation">]</span><span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- ‘+’号，若两个字段都为字符串类型作拼接操作，若为数字型字符串和int型字段则进行相加，都为int型进行相加；</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 查询结果按条件排序</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>查询条件<span class="token punctuation">]</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>字段名<span class="token punctuation">]</span> <span class="token keyword">asc</span>  <span class="token comment" spellcheck="true">-- 不写默认为升序asc ，降序需写明为desc，可依据多个字段排序，如：order by [字段名1] asc, [字段名2] desc</span><span class="token comment" spellcheck="true">-- 聚合函数</span><span class="token comment" spellcheck="true">-- 统计该表记录总数</span><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 统计总数、最大、最小以及平均值</span><span class="token keyword">select</span> <span class="token function">SUM</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 总数<span class="token punctuation">,</span>       <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最大值<span class="token punctuation">,</span>       <span class="token function">MIN</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 最小值<span class="token punctuation">,</span>       <span class="token function">AVG</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 平均值<span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 按某个字段查询该字段不同记录个数</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名A<span class="token punctuation">]</span>，<span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名A<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">as</span> 数量<span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">group</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>字段名A<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 显示信息，并汇总指定字段总数</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span>，字段名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">compute</span> <span class="token function">count</span><span class="token punctuation">(</span>字段名<span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">-- 显示信息，并按指定字段的分类汇总</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span>，字段名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token punctuation">]</span><span class="token keyword">order</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">compute</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">by</span> <span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 内连接查询(返回所有满足条件的记录)</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">inner</span> <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">on</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 第二种方式（别名方式）</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">a</span>  <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 左/右外连接（包括左/右表不满足条件的记录，也就是说不管条件如何都显示左/右表所有记录）</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">a</span> <span class="token keyword">left</span><span class="token operator">/</span><span class="token keyword">right</span> <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 完全外连接（不管条件如何，包括左表和右表所有的记录行）</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">a</span> <span class="token keyword">full</span> <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 三表连接</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span> <span class="token number">a</span> <span class="token keyword">full</span> <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span> <span class="token keyword">join</span> <span class="token punctuation">[</span>表名<span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">c</span><span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span><span class="token punctuation">[</span>共同字段名<span class="token punctuation">]</span><span class="token keyword">where</span> <span class="token punctuation">[</span>条件<span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 并运算查询，把两个查询的结果合并在一起，结果只会显示前面字段名</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span> 别名 <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">union</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 交运算，输出两个查询结果的交集</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span> 别名 <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">intersect</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">-- 差运算，输出两个查询结果的差集</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">1</span><span class="token punctuation">]</span> 别名 <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">except</span><span class="token keyword">select</span> <span class="token punctuation">[</span>字段名<span class="token number">2</span><span class="token punctuation">]</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>表名<span class="token number">2</span><span class="token punctuation">]</span></code></pre><h3 id="第三部分：SQL编程"><a href="#第三部分：SQL编程" class="headerlink" title="第三部分：SQL编程"></a>第三部分：SQL编程</h3><h5 id="3-1：存储过程"><a href="#3-1：存储过程" class="headerlink" title="3.1：存储过程"></a>3.1：存储过程</h5><p>3.1.1 查询StdInfoID为6的学生的姓名和已选课程门数，当选课门数在3门以上，输出”XX，已经完成了选课”，否则输出”XX，还需选课”。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">declare</span> <span class="token variable">@sname</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">@num</span> <span class="token keyword">int</span> <span class="token comment" spellcheck="true">/*声明变量*/</span><span class="token keyword">select</span> <span class="token variable">@sname</span><span class="token operator">=</span>StdInfoName <span class="token keyword">from</span> StudentInfo<span class="token keyword">where</span> StdInfoID<span class="token operator">=</span><span class="token number">6</span><span class="token keyword">set</span> <span class="token variable">@num</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token function">COUNT</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">from</span> <span class="token punctuation">[</span>StudentInfo<span class="token punctuation">]</span>    <span class="token keyword">group</span>  <span class="token keyword">by</span> StdInfoID    <span class="token keyword">having</span> StdInfoID<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token variable">@num</span><span class="token operator">>=</span><span class="token number">3</span>    <span class="token keyword">begin</span>         <span class="token keyword">print</span> <span class="token variable">@sname</span><span class="token operator">+</span><span class="token string">',已经完成选课！'</span>    <span class="token keyword">end</span><span class="token keyword">else</span>    <span class="token keyword">print</span> <span class="token variable">@sname</span><span class="token operator">+</span><span class="token string">',选课门数不够！'</span></code></pre><p>3.1.2 简单CASE结构：查询StudentInfo表中学生的性别，若是女生显示”female”，否则显示”male”。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> StdInfoName<span class="token punctuation">,</span> StdInfoSex<span class="token punctuation">,</span> 性别<span class="token operator">=</span><span class="token keyword">case</span>        <span class="token keyword">when</span> StdInfoSex<span class="token operator">=</span><span class="token string">'男'</span> <span class="token keyword">then</span> <span class="token string">'male'</span>        <span class="token keyword">when</span> StdInfoSex<span class="token operator">=</span><span class="token string">'女'</span> <span class="token keyword">then</span> <span class="token string">'female'</span>        <span class="token keyword">end</span>    <span class="token keyword">from</span> StudentInfo</code></pre><p>3.1.3 循环结构，</p><p>计算1-100内能被3整除的最大数。</p><pre><code>declare @x int=100while(@x&gt;=1)    begin        if(@x%3=0)            break        set@x-=1    endprint @x</code></pre><p>3.1.4 定义一个存储过程，用于查询StuSelDB数据库中所有教师的姓名、性别、学历、职称和所授课的课程名称。</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">procedure</span> ShowTeaCourse<span class="token keyword">as</span><span class="token keyword">select</span> TheachInfoName<span class="token punctuation">,</span>TheachInfoSex<span class="token punctuation">,</span>TeachInfoKnowl<span class="token punctuation">,</span>TeachInfoTitle<span class="token punctuation">,</span>CourseInfoName<span class="token keyword">from</span> TeachInfo <span class="token number">a</span> <span class="token keyword">join</span> TeachCourse <span class="token number">b</span><span class="token keyword">on</span> <span class="token number">a</span><span class="token punctuation">.</span>TeachInfoID <span class="token operator">=</span> <span class="token number">b</span><span class="token punctuation">.</span>TeachInfoID<span class="token keyword">join</span> CourseInfo <span class="token number">c</span><span class="token keyword">on</span> <span class="token number">b</span><span class="token punctuation">.</span>CourseInfoID<span class="token operator">=</span><span class="token number">c</span><span class="token punctuation">.</span>CourseInfoID<span class="token comment" spellcheck="true">-- 执行存储过程</span><span class="token keyword">execute</span> ShowTeaCourse 或<span class="token keyword">exec</span> ShowTeaCourse 或ShowTeaCourse<span class="token comment" spellcheck="true">-- 删除存储过程</span><span class="token keyword">drop</span> <span class="token keyword">procedure</span> <span class="token punctuation">[</span>存储过程名<span class="token punctuation">]</span> 或<span class="token keyword">drop</span> <span class="token keyword">proc</span> <span class="token punctuation">[</span>存储过程名<span class="token punctuation">]</span></code></pre><h5 id="3-2：DML触发器"><a href="#3-2：DML触发器" class="headerlink" title="3.2：DML触发器"></a>3.2：DML触发器</h5><p>3.2.1：创建INSERT触发器，如果向教师信息表TeachInfo中插入记录时，检查该记录的院系编号在院系信息表DepInfo中是否存在，如果不存在，则不允许插入</p><pre class=" language-sql"><code class="language-sql"><span class="token comment" spellcheck="true">-- inserted 逻辑表， 存放插入之后的记录</span><span class="token keyword">create</span> <span class="token keyword">trigger</span> trig_insertTeachinfo<span class="token keyword">on</span> TeachInfo<span class="token keyword">after</span> <span class="token keyword">insert</span><span class="token keyword">as</span><span class="token keyword">begin</span> <span class="token keyword">insert</span><span class="token keyword">if</span> <span class="token keyword">exists</span> <span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> inserted  <span class="token number">a</span>          <span class="token keyword">where</span> <span class="token number">a</span><span class="token punctuation">.</span>DepInfoID <span class="token operator">not</span> <span class="token operator">in</span><span class="token punctuation">(</span>          <span class="token keyword">select</span> DepInfoID <span class="token keyword">from</span> DepInfo<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">begin</span>     <span class="token keyword">raiserror</span><span class="token punctuation">(</span><span class="token string">'数据一致性验证！'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token comment" spellcheck="true">/* 报错 */</span>    <span class="token keyword">rollback</span> <span class="token keyword">transaction</span>                 <span class="token comment" spellcheck="true">/* 事务回滚 */</span><span class="token keyword">end</span><span class="token keyword">else</span>    <span class="token keyword">commit</span> <span class="token keyword">transaction</span></code></pre><p>3.2.2.创建UPDATE触发器，当班级信息表ClassInfo中的主键ClassInfoID进行修改时，必须对学生表中相应的ClassInfoID也进行修改</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">trigger</span> trig_updateClass<span class="token keyword">on</span> ClassInfo<span class="token keyword">after</span> <span class="token keyword">update</span><span class="token keyword">if</span> <span class="token keyword">update</span><span class="token punctuation">(</span>ClassInfoID<span class="token punctuation">)</span><span class="token keyword">begin</span>     <span class="token keyword">update</span> StudentInfo    <span class="token keyword">set</span> ClassInfoID<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> ClassInfoID <span class="token keyword">from</span> inserted<span class="token punctuation">)</span>    <span class="token keyword">where</span> ClassInfoID<span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">select</span> ClassInfoID <span class="token keyword">from</span> deleted<span class="token punctuation">)</span><span class="token keyword">end</span></code></pre><p>3.2.3. 创建DELETE触发器，当删除学生信息表StudentInfo中已退学的学生资料时，自动删除学生选课表</p><pre><code>create trigger trig_deleteStudenton StudentInfoafter deleteasbegin    declare @stdInfoID int    select @stdInfoID=deleted.StdInfoID from deleted    delete StudentCourse    where StdInfoID = @stdInfoIDend</code></pre><h5 id="3-3：用户定义函数与游标"><a href="#3-3：用户定义函数与游标" class="headerlink" title="3.3：用户定义函数与游标"></a>3.3：用户定义函数与游标</h5><p>3.3.1创建标量值函数FTitleSum，统计指定院系的教师人数</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">function</span> FTitleSum<span class="token punctuation">(</span><span class="token variable">@depName</span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">returns</span> <span class="token keyword">int</span><span class="token keyword">as</span><span class="token keyword">begin</span><span class="token keyword">end</span></code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 习题笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三级数据库部分笔记</title>
      <link href="/2020/03/05/san-ji-shu-ju-ku-xi-ti-bi-ji/"/>
      <url>/2020/03/05/san-ji-shu-ju-ku-xi-ti-bi-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="三级数据库习题笔记"><a href="#三级数据库习题笔记" class="headerlink" title="三级数据库习题笔记"></a>三级数据库习题笔记</h1><h5 id="1-关系模型相关"><a href="#1-关系模型相关" class="headerlink" title="1.关系模型相关"></a>1.关系模型相关</h5><pre><code>关系模型中的关系是一个二维表，表中的一行对应关系中的一个元组关系模型建立在集合论的基础上关系模式 描述关系的静态结构，它是静态、稳定的、关系 是动态、随用户对数据库的操作而变化的</code></pre><h5 id="2-数据库系统设计的六个阶段"><a href="#2-数据库系统设计的六个阶段" class="headerlink" title="2.数据库系统设计的六个阶段"></a>2.数据库系统设计的六个阶段</h5><pre class=" language-sql"><code class="language-sql">需求设计、概念结构设计、逻辑结构设计、物理结构设计、数据库实施、数据库运行与维护人机界面的设计可采用原型迭代法，首先初步设计，再进行用户界面细节设计，最后是原型设计与改进数据库系统的更新既包括应用系统及其相关的数据库对象，也包括数据库管理系统及其所在操作系统的环境<span class="token comment" spellcheck="true">--数据库物理设计主要步骤包括：数据库逻辑模式调整；文件组织与存取设计；数据分布设计；安全模式设计；确定系统配置；物理模式评估</span></code></pre><h5 id="3-概念模型相关"><a href="#3-概念模型相关" class="headerlink" title="3.概念模型相关"></a>3.概念模型相关</h5><pre><code>一个属性的值必须属于唯一的域，域，相当于数据类型的子集，属性的取值必须为同一域</code></pre><h5 id="4-数据库访问"><a href="#4-数据库访问" class="headerlink" title="4.数据库访问"></a>4.数据库访问</h5><pre><code>用户若想在sql server中访问数据库的表，必须同该表建立一个连接表示通信渠道当用户被赋予的两种角色的权限出现冲突时，以DENY优先db_datawriter角色可以对表中的数据执行插入、删除和更新操作</code></pre><h5 id="5-数据库查询"><a href="#5-数据库查询" class="headerlink" title="5.数据库查询"></a>5.数据库查询</h5><pre><code>传统的索引如有序索引、树形索引都是建立在“比较”的基础上，即在结构中查找记录时需要进行一系列与关键字的比较。而散列（哈希）索引采用一定的计算方法定位数据</code></pre><h5 id="6-备份"><a href="#6-备份" class="headerlink" title="6.备份"></a>6.备份</h5><pre><code>对master,model,msdb实行修改之后即备份，对用户数据库实行周期性备份，对tempdb不备份文件备份主要是对数据库中数据文件的备份，不对日志文件备份，因此 在备份完成之后必须再对日志进行备份。</code></pre><h5 id="7-分布式数据库"><a href="#7-分布式数据库" class="headerlink" title="7.分布式数据库"></a>7.分布式数据库</h5><pre><code>在分布式数据库查询中，导致数据传输通信代价大的主要原因是各个站点分片间的连接和并操作，分布式数据库中的分布透明性包括分片透明性、位置透明性、局部数据模型透明性，其中分片透明性是最高层次的透明性分布式数据库的目标是本地自治、非集中式管理、高可用性、位置独立性、数据分片独立性等分布式数据库的事物管理包括恢复控制和并发控制，恢复控制一般采用的策略是基于两阶段提交协议分布式数据库中数据分布策略可以从数据分片和数据分配两个角度来考虑，一般先进行数据分片，在进行数据分配数据水平分片是在关系中从行（元组）的角度依据一定条件划分为不同的片段，关系中的每一行必须至少属于一个片段，以便在需要时可以重构关系数据垂直分片是在关系中从列（属性）的角度依据一定条件划分为不同的片段，各片段中应该包含关系得住吗，以便通过连接方法恢复关系</code></pre><h5 id="8-表的拆分"><a href="#8-表的拆分" class="headerlink" title="8.表的拆分"></a>8.表的拆分</h5><pre><code>轮转法最适合扫描整个关系的应用，并在扫描时可以并行地从几个磁盘读取数据，负载平衡，充分发挥了并行性</code></pre><h5 id="应用题"><a href="#应用题" class="headerlink" title="应用题"></a>应用题</h5><p>1：==数据字典==是对系统中各类数据描述的集合，是进行详细的数据收集和数据分析所获得的主要成果。==数据字典==在数据库中占有很重要的地位，通常包括数据项、数据结构、数据流、数据存储和处理过程五个部分</p><p>数据定义语句经DDL编译器编译后，各种对象的描述信息存放在数据库的==数据字典==中。</p><p>2：数据模型通常由==数据结构==、==数据操作==和==完整性约束==三部分构成；</p><p>3：==顺序图==主要用于描述系统内对象之间的消息发送和接受序列。两个坐标轴：纵向表示时间的持续过程，横向表示对象，</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200311152627020.png" alt="image-20200311152627020" style="zoom:80%;"><p>4：==UNIQUE==约束允许出现空值但不允许出现重复值</p><p>5：数据库主要角色及权限</p><table><thead><tr><th align="center">角色</th><th align="center">权限</th></tr></thead><tbody><tr><td align="center">dbcreator</td><td align="center">创建、修改、删除和还原数据库</td></tr><tr><td align="center">bulkadmin</td><td align="center">执行 BULK INSERT 语句</td></tr><tr><td align="center">diskadmin</td><td align="center">管理磁盘文件</td></tr><tr><td align="center">processadmin</td><td align="center">管理在SQLServer实例中运行的进程</td></tr><tr><td align="center">securityadmin</td><td align="center">管理服务器登陆账户</td></tr><tr><td align="center">serveradmin</td><td align="center">配置服务器范围的设置</td></tr><tr><td align="center">setupadmin</td><td align="center">添加和删除链接服务器</td></tr><tr><td align="center">sysadmin</td><td align="center">在SQLServer中进行任何活动，该角色的权限跨越所有其他固定服务器角色</td></tr></tbody></table><p>6.数据仓库是一个面向主题的、集成的、非易失的、且随时间变化的数据集合</p><p>7.细化程度越高，粒度级就越小</p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200318105809899.png" alt="image-20200318105809899"></p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200318105836781.png" alt="image-20200318105836781"></p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sql </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署到云服务器</title>
      <link href="/2020/03/01/a-li-yun-hexo-da-jian-wang-zhan/"/>
      <url>/2020/03/01/a-li-yun-hexo-da-jian-wang-zhan/</url>
      
        <content type="html"><![CDATA[<p>转载自 ：<a href="https://www.jianshu.com/p/70bf58c48010" target="_blank" rel="noopener">链接</a></p><h1 id="一、环境安装"><a href="#一、环境安装" class="headerlink" title="一、环境安装"></a>一、环境安装</h1><h2 id="1-1-node-js-安装"><a href="#1-1-node-js-安装" class="headerlink" title="1.1 node js 安装"></a>1.1 node js 安装</h2><pre class=" language-shell"><code class="language-shell">yum install gcc-c++ makeyum -y install nodejs</code></pre><p>验证：</p><pre class=" language-undefined"><code class="language-undefined">node -v npm -v</code></pre><h2 id="1-2-安装git、nginx"><a href="#1-2-安装git、nginx" class="headerlink" title="1.2 安装git、nginx"></a>1.2 安装git、nginx</h2><p>Git 用于版本管理和部署，Nginx 用于静态博客托管。</p><pre class=" language-undefined"><code class="language-undefined">yum install git nginx -y</code></pre><h2 id="1-3-安装hexo"><a href="#1-3-安装hexo" class="headerlink" title="1.3 安装hexo"></a>1.3 安装hexo</h2><ul><li>我们使用 Node.js 的包管理器 npm 安装 hexo-cli 和 hexo-server</li></ul><pre class=" language-undefined"><code class="language-undefined">  npm install hexo-cli hexo-server -g</code></pre><p>hexo-cli 是 Hexo 的命令行工具，可用于快速新建、发布、部署博客；hexo-server 是 Hexo 的内建服务器，可用于部署前的预览和测试。-g 选项，表示全局安装。</p><ul><li>验证</li></ul><pre class=" language-undefined"><code class="language-undefined">  hexo</code></pre><h1 id="二、创建git环境"><a href="#二、创建git环境" class="headerlink" title="二、创建git环境"></a>二、创建git环境</h1><p><a href="https://link.jianshu.com?t=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%8A%E7%9A%84-Git-%E9%85%8D%E7%BD%AE%E6%9C%8D%E5%8A%A1%E5%99%A8" target="_blank" rel="noopener">参考地址</a></p><h2 id="2-1-在云服务器上创建一个-GIT-用户，用来运行-GIT-服务"><a href="#2-1-在云服务器上创建一个-GIT-用户，用来运行-GIT-服务" class="headerlink" title="2.1 在云服务器上创建一个 GIT 用户，用来运行 GIT 服务"></a>2.1 在云服务器上创建一个 GIT 用户，用来运行 GIT 服务</h2><ul><li>创建用户：<code>adduser git</code></li><li>设置密码：<code>passwd git</code></li></ul><h2 id="2-2-创建证书"><a href="#2-2-创建证书" class="headerlink" title="2.2 创建证书"></a>2.2 创建证书</h2><ul><li>切换到git用户：<code>su git</code></li><li>创建.ssh目录：<code>mkdir .ssh &amp;&amp; chmod 700 .ssh</code></li><li>然后在云服务创建<code>authorized_keys</code>公钥保存文件：<code>touch .ssh/authorized_keys &amp;&amp; chmod 600 .ssh/authorized_keys</code><br> __ tip: __ 公钥保存文件<code>authorized_keys</code>是一行添加一个</li></ul><h2 id="2-3-创建git仓库目录"><a href="#2-3-创建git仓库目录" class="headerlink" title="2.3 创建git仓库目录"></a>2.3 创建git仓库目录</h2><p>创建一个名为blog的git仓库</p><pre class=" language-kotlin"><code class="language-kotlin">mkdir <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>repocd <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>repogit <span class="token keyword">init</span> <span class="token operator">--</span>bare blog<span class="token punctuation">.</span>git</code></pre><h2 id="2-4-配置-GIT-HOOKS"><a href="#2-4-配置-GIT-HOOKS" class="headerlink" title="2.4 配置 GIT HOOKS"></a>2.4 配置 <a href="https://link.jianshu.com?t=https%3A%2F%2Fgit-scm.com%2Fbook%2Fzh%2Fv2%2F%E8%87%AA%E5%AE%9A%E4%B9%89-Git-Git-%E9%92%A9%E5%AD%90" target="_blank" rel="noopener">GIT HOOKS</a></h2><pre class=" language-csharp"><code class="language-csharp">vim <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>repo<span class="token operator">/</span>blog<span class="token punctuation">.</span>git<span class="token operator">/</span>hooks<span class="token operator">/</span>post<span class="token operator">-</span>receive</code></pre><p>添加</p><pre class=" language-bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/var/www/hexo --git-dir<span class="token operator">=</span>/var/repo/blog.git checkout -f</code></pre><p>然后保存退出，并设置权限</p><pre class=" language-csharp"><code class="language-csharp">chmod <span class="token operator">+</span>x <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>repo<span class="token operator">/</span>blog<span class="token punctuation">.</span>git<span class="token operator">/</span>hooks<span class="token operator">/</span>post<span class="token operator">-</span>receive</code></pre><h2 id="2-5-改变-BLOG-GIT-目录的拥有者为-GIT-用户"><a href="#2-5-改变-BLOG-GIT-目录的拥有者为-GIT-用户" class="headerlink" title="2.5 改变 BLOG.GIT 目录的拥有者为 GIT 用户"></a>2.5 改变 BLOG.GIT 目录的拥有者为 GIT 用户</h2><pre class=" language-css"><code class="language-css">chown -R <span class="token property">git</span><span class="token punctuation">:</span>git blog<span class="token number">.</span>git</code></pre><h2 id="2-6-创建静态文件目录并将2-3步骤生成的git仓库链接到静态文件目录下"><a href="#2-6-创建静态文件目录并将2-3步骤生成的git仓库链接到静态文件目录下" class="headerlink" title="2.6 创建静态文件目录并将2.3步骤生成的git仓库链接到静态文件目录下"></a>2.6 创建静态文件目录并将<code>2.3步骤</code>生成的git仓库链接到静态文件目录下</h2><ul><li>创建静态文件目录（文章网页）：<code>mkdir /var/www/hexo</code></li><li>链接git仓库：<code>chown -R git:git /var/www/hexo</code></li><li>配置权限：<code>chmod -R 755 /var/www/hexo</code><br> 这样git仓库更新便会自动同步到hexo目录下</li></ul><h2 id="2-7、为了安全考虑，禁用GIT用户的SHELL-登录权限配置（下面两个步骤非常重要，否则客户端总是提示密码错误！！！）"><a href="#2-7、为了安全考虑，禁用GIT用户的SHELL-登录权限配置（下面两个步骤非常重要，否则客户端总是提示密码错误！！！）" class="headerlink" title="2.7、为了安全考虑，禁用GIT用户的SHELL 登录权限配置（下面两个步骤非常重要，否则客户端总是提示密码错误！！！）"></a>2.7、为了安全考虑，禁用GIT用户的SHELL 登录权限配置（下面两个步骤非常重要，否则客户端总是提示密码错误！！！）</h2><ul><li><p>首先你必须确保 git-shell 已存在于 /etc/shells 文件中</p><ul><li><p>使用命令which git-shell判断系统是否安装了git-shell。如果已经安装，则返回git-shell的安装目录，如：<code>/usr/bin/git-shell</code>；如果未安装则需要安装git-shell命令，安装命令：<code>yum install git</code></p></li><li><p>判断shells文件是否存在，判断命令：<code>cat /etc/shells</code></p></li><li><p>如果文件不存在或没有</p><pre><code>/usr/bin/git-shell</code></pre><p>，则需要使用vim增加这个路径：</p><pre><code>sudo vim /etc/shells</code></pre><p>，在最后一行添加git-shell路径</p></li></ul></li></ul><pre><code>```bash# /etc/shells: valid login shells ```</code></pre><p>  /bin/sh<br>   /bin/dash<br>   /bin/bash<br>   /bin/rbash<br>   /usr/bin/tmux<br>   /usr/bin/screen<br>   /usr/bin/git-shell # 添加你的git-shell<br>   ```</p><ul><li><p>现在你可以使用 chsh 命令修改任一系统用户的shell权限了<br> 现在我们修改第一步中创建的git用户的登录权限，禁止git用户使用shell权限：<br> 终端中输入<code>sudo chsh git</code><br> [图片上传失败…(image-86e8df-1521642804894)]</p><p>然后在<code>Login Shell [/bin/bash]</code>: 后输入git-shell路径<code>/usr/bin/git-shell</code></p></li></ul><p><strong>修改完成后验证：</strong> <code>vim /etc/passwd</code>找到类似<code>git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</code>，看看git用户是否是以git-shell结尾</p><ul><li>这样，git用户就只能使用SSH连接对Git仓库进行推送和拉取操作，而不能登录机器并取得普通shell命令</li></ul><h2 id="2-8-测试"><a href="#2-8-测试" class="headerlink" title="2.8 测试"></a>2.8 测试</h2><p>当上述步骤都完成后，我们就可以测试下git服务器是否部署成功，最简单的方法便是使用clone来校验<br> 用户电脑（window or mac）git客户端执行clone操作<code>git clone git@服务器ip:/var/repo/blog.git</code><br> 当出现下面这种框，然后输入我们在第一步时创建git这个用户的密码就能成功clone了。</p><p><img src="https:////upload-images.jianshu.io/upload_images/1824042-a80d2b2916ff46de?imageMogr2/auto-orient/strip%7CimageView2/2/w/316/format/webp" alt="img"></p><p>git_server</p><p>或</p><p><img src="https:////upload-images.jianshu.io/upload_images/1824042-464f38b182ea17a4?imageMogr2/auto-orient/strip%7CimageView2/2/w/557/format/webp" alt="img"></p><p>git_server</p><p>如果clone成功，表示git服务器搭建成功</p><h1 id="三、hexo配置"><a href="#三、hexo配置" class="headerlink" title="三、hexo配置"></a>三、hexo配置</h1><p>打开hexo博客目录，编辑<code>_config.yml</code>文件<br> 修改repository为：</p><pre class=" language-ruby"><code class="language-ruby">deploy<span class="token punctuation">:</span>  type<span class="token punctuation">:</span> git  repository<span class="token punctuation">:</span> git<span class="token variable">@ip</span>或域名<span class="token punctuation">:</span><span class="token operator">/</span>var<span class="token operator">/</span>repo<span class="token operator">/</span>blog<span class="token punctuation">.</span>git  branch<span class="token punctuation">:</span> master</code></pre><p>然后执行<code>hexo g -d</code>将文件上传到你部署的服务器上，如果上传成功，将如下图所示：<br> article_upload_finish.png</p><h1 id="四、nginx配置"><a href="#四、nginx配置" class="headerlink" title="四、nginx配置"></a>四、nginx配置</h1><p>最后，为了能让浏览器能直接访问静态页面，需要使用nginx将端口或域名指向hexo静态文件目录</p><h2 id="4-1-修改-NGINX-的-DEFAULT-设置"><a href="#4-1-修改-NGINX-的-DEFAULT-设置" class="headerlink" title="4.1 修改 NGINX 的 DEFAULT 设置"></a>4.1 修改 NGINX 的 DEFAULT 设置</h2><ul><li>ubuntu</li></ul><pre class=" language-shell"><code class="language-shell">  vim /etc/nginx/sites-available/default</code></pre><ul><li>centos</li></ul><pre class=" language-undefined"><code class="language-undefined">  vim /etc/nginx/conf.d/blog.conf</code></pre><p><strong>注意</strong>：不同版本的nginx或系统，nginx的配置文件不一定相同，根据具体情况来修改配置</p><h2 id="4-2-将其中的-ROOT-指令指向-var-www-hexo-目录（也就是GIT钩子目录）"><a href="#4-2-将其中的-ROOT-指令指向-var-www-hexo-目录（也就是GIT钩子目录）" class="headerlink" title="4.2 将其中的 ROOT 指令指向 /var/www/hexo 目录（也就是GIT钩子目录）"></a>4.2 将其中的 ROOT 指令指向 <code>/var/www/hexo</code> 目录（也就是GIT钩子目录）</h2><pre class=" language-php"><code class="language-php">server <span class="token punctuation">{</span>    listen <span class="token number">80</span><span class="token punctuation">;</span>    listen <span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token number">80</span><span class="token punctuation">;</span>    root <span class="token operator">/</span><span class="token keyword">var</span><span class="token operator">/</span>www<span class="token operator">/</span>hexo<span class="token punctuation">;</span> <span class="token shell-comment comment"># 修改的地方</span>    server_name laoyuyu<span class="token punctuation">.</span>me www<span class="token punctuation">.</span>laoyuyu<span class="token punctuation">.</span>me<span class="token punctuation">;</span> <span class="token shell-comment comment"># 如果需要改域名访问，修改server_name 为域名便可</span>    location <span class="token operator">/</span> <span class="token punctuation">{</span>            <span class="token shell-comment comment"># First attempt to serve request as file, then</span>            <span class="token shell-comment comment"># as directory, then fall back to displaying a 404.</span>            try_files <span class="token variable">$uri</span> <span class="token variable">$uri</span><span class="token operator">/</span> <span class="token operator">=</span><span class="token number">404</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-最后重启服务，让NGINX生效"><a href="#4-3-最后重启服务，让NGINX生效" class="headerlink" title="4.3 最后重启服务，让NGINX生效"></a>4.3 最后重启服务，让NGINX生效</h2><pre class=" language-undefined"><code class="language-undefined">service nginx restart </code></pre><h2 id="4-4-nginx-常见错误"><a href="#4-4-nginx-常见错误" class="headerlink" title="4.4 nginx 常见错误"></a>4.4 nginx 常见错误</h2><p>我在配置完Nginx后，启动的时候总是无法正常访问到我的web应用，查看日志文件（/var/log/nginx/error.log）后发现：</p><pre class=" language-css"><code class="language-css"><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span> to <span class="token number">127.0.0.</span><span class="token property">1</span><span class="token punctuation">:</span><span class="token number">8080</span> failed <span class="token punctuation">(</span><span class="token property">13</span><span class="token punctuation">:</span> Permission denied<span class="token punctuation">)</span></code></pre><p>从这个错误信息中可以看出是访问权限的问题，解决办法如下：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/nginx/nginx.conf<span class="token comment" spellcheck="true">#user nginx;</span>user root<span class="token punctuation">;</span></code></pre><p>其实就是将nginx的用户修改为root用户即可，当然也可以为nginx用户增加相应的权限。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> centos </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java笔记</title>
      <link href="/2019/12/23/java-mian-shi/"/>
      <url>/2019/12/23/java-mian-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="第一部分，公开课笔记"><a href="#第一部分，公开课笔记" class="headerlink" title="第一部分，公开课笔记"></a>第一部分，公开课笔记</h1><h3 id="———索引的本质"><a href="#———索引的本质" class="headerlink" title="———索引的本质"></a>———索引的本质</h3><ul><li>索引是帮助MySQL高效获取数据的排好序的数据结构</li><li>索引数据结构<ul><li>二叉树</li><li>红黑树</li><li>Hash表</li><li>B-Tree</li></ul></li></ul><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200421153634503.png" alt="image-20200421153634503" style="zoom:50%;"><h3 id="B-Tree"><a href="#B-Tree" class="headerlink" title="B-Tree"></a>B-Tree</h3><ul><li><p>叶节点具有相同的深度，叶节点的指针为空</p></li><li><p>所有索引元素不重复</p></li><li><p>节点中的数据索引从左到右递增排列</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200421152506228.png" alt="image-20200421152506228" style="zoom:55%;"></li></ul><h3 id="B-Tree（B-Tree变种）"><a href="#B-Tree（B-Tree变种）" class="headerlink" title="B+Tree（B-Tree变种）"></a>B+Tree（B-Tree变种）</h3><ul><li>非叶子节点不存储data，只存储索引（冗余），可以放更多的索引</li><li>叶子节点包含所有索引字段</li><li>叶子节点用指针连接，提高区间访问的性能</li></ul><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200421152745678.png" alt="image-20200421152745678" style="zoom:55%;"><h3 id="MyISAM存储引擎索引实现"><a href="#MyISAM存储引擎索引实现" class="headerlink" title="MyISAM存储引擎索引实现"></a>MyISAM存储引擎索引实现</h3><ul><li><p>MyISAM索引文件和数据文件是分离的（非聚集）</p></li><li><p>存储引擎是形容表的</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200421153306009.png" alt="image-20200421153306009" style="zoom:50%;"></li></ul><h3 id="InnoDB索引实现（聚集）"><a href="#InnoDB索引实现（聚集）" class="headerlink" title="InnoDB索引实现（聚集）"></a>InnoDB索引实现（聚集）</h3><ul><li>表数据文件本身就是B+Tree组织的一个索引结构文件</li><li>聚集索引-叶节点包含了完整的数据记录</li><li>为什么InnoDB表必须有主键，并且推荐使用整形的自增主键?<ul><li>在查找某个元素时，把某个节点load到内存，在内存中比大小，再逐个的load某一个节点，在整个查找的过程中，需要大量的进行比较，利用整形比较大小快而且整形需要存储空间小的优点</li></ul></li><li>为什么非主键索引结构叶子节点存储的是主键值？（一致性和节省存储空间）</li></ul><h3 id="JDK体系结构"><a href="#JDK体系结构" class="headerlink" title="JDK体系结构"></a>JDK体系结构</h3><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422092739060.png" alt="image-20200422092739060" style="zoom:65%;"><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422093019738.png" alt="image-20200422093019738" style="zoom: 50%;"><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200422105555396.png" alt="image-20200422105555396"></p><p>本地方法：native修饰的方法，只有声明没有实现，底层由C语言实现。本地方法是由其他语言(如C、C++ 或其他汇编语言)编写,编译成和处理器相关的代码。本地方法保存在动态连接库中,格式是各个平台专用的,运行中的java程序调用本地方法时,虚拟机装载包含这个本地方法的动态库,并调用这个方法。</p><p><strong>垃圾回收机制：</strong></p><p><img src="C:%5CUsers%5Clenovo%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200422111805471.png" alt="image-20200422111805471"></p><h3 id="多核并发缓存结构"><a href="#多核并发缓存结构" class="headerlink" title="多核并发缓存结构"></a>多核并发缓存结构</h3><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422153009004.png" alt="image-20200422153009004" style="zoom:50%;"><h3 id="java内存模型（JMM）"><a href="#java内存模型（JMM）" class="headerlink" title="java内存模型（JMM）"></a>java内存模型（JMM）</h3><p>java线程内存模型跟CPU缓存模型类似，是基于CPU缓存模型来建立的，java线程内存模型是标准化的，屏蔽掉了底层不同计算机的区别</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422153706116.png" alt="image-20200422153706116" style="zoom:50%;"><h3 id="JMM数据原子操作"><a href="#JMM数据原子操作" class="headerlink" title="JMM数据原子操作"></a>JMM数据原子操作</h3><table><thead><tr><th align="center">操作</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">read（读取）</td><td align="center">从主内存读取数据</td></tr><tr><td align="center">load（载入）</td><td align="center">将主内存读取到的数据写入工作内存</td></tr><tr><td align="center">use（使用）</td><td align="center">将工作内存读取数据来计算</td></tr><tr><td align="center">assign（赋值）</td><td align="center">将计算好的值重新赋值到工作内存中</td></tr><tr><td align="center">store（存储）</td><td align="center">将工作内存数据写入主内存</td></tr><tr><td align="center">write（写入）</td><td align="center">将store过去的变量值赋值给主内存中的变量</td></tr><tr><td align="center">lock（锁定）</td><td align="center">将主内存变量加锁，标识为线程独占状态</td></tr><tr><td align="center">unlock（解锁）</td><td align="center">将主内存变量解锁，解锁后其他线程可以锁定该变量</td></tr></tbody></table><h3 id="JMM缓存不一致问题"><a href="#JMM缓存不一致问题" class="headerlink" title="JMM缓存不一致问题"></a>JMM缓存不一致问题</h3><ul><li>总线加锁（性能太低）<ul><li>cpu从主内存读取数据到高速缓存，会在总线对这个数据加锁，这样其他cpu没法去读写这个数据，直到这个cpu使用完数据释放锁之后其它cpu才能读取该数据</li></ul></li><li>MESI缓存一致性协议<ul><li>多个cpu从主内存读取一个数据到各自的高速缓存，当其中某个cpu修改了缓存里的数据，该数据会马上同步回主内存，其它cpu通过==总线嗅探机制==可以感知到数据的变化从而将自己缓存里的数据失效</li></ul></li><li>Volatile缓存可见性实现原理（Volatile底层由c语言实现）<ul><li>底层实现主要是通过汇编lock前缀指令，它会锁定这块内存区域的缓存（==缓存行锁定==）并回写到主内存</li><li>IA-32架构软件开发者手册对lock指令的解释：<ol><li>会将当前处理器缓存行的数据立即写回到系统内存</li><li>这个写回内存的操作会引起在其它cpu里缓存了该内存地址的数据无效（MESI协议）</li></ol></li></ul></li><li>java程序汇编代码查看<ul><li>-server -Xcomp -XX:+UnlockDiagnosticVMOptions -XX:+PrintAssembly -XX:CompileCommand=compileonly,*VolatileVisibilityTest.prepareData</li></ul></li></ul><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422211810052.png" alt="image-20200422211810052" style="zoom:67%;"><h3 id="Volatile可见性、原子性与有序性"><a href="#Volatile可见性、原子性与有序性" class="headerlink" title="Volatile可见性、原子性与有序性"></a>Volatile可见性、原子性与有序性</h3><ul><li>并发编程三大特性：可见性、原子性、有序性</li><li>volatile保证可见性与有序性，但是不保证原子性，保证原子性需要借助synchronized这样的锁机制</li></ul><h1 id="第二部分-尚硅谷-周阳听课笔记"><a href="#第二部分-尚硅谷-周阳听课笔记" class="headerlink" title="第二部分 尚硅谷-周阳听课笔记"></a>第二部分 尚硅谷-周阳听课笔记</h1><h3 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h3><h5 id="概念："><a href="#概念：" class="headerlink" title="概念："></a><strong>概念：</strong></h5><blockquote><p><code>volatile</code> ：是java虚拟机提供的轻量级的同步机制，并且是一种非锁机制，这种机制可以避免锁机制引起的上下文切换。</p></blockquote><blockquote><p>三个特性：</p><ul><li>保证可见性<ul><li>可见性：一个线程修改了主内存的值，其他线程马上获得通知 </li></ul></li><li>==不保证原子性==<ul><li>解决方式：<ol><li>加synchronized关键字（不推荐）</li><li>使用JUC，底层原理：CAS</li></ol></li></ul></li><li>禁止指令重排，保证有序性</li></ul></blockquote><h5 id="可见性："><a href="#可见性：" class="headerlink" title="可见性："></a><strong>可见性：</strong></h5><p><code>volatile</code>保证了修饰的共享变量在转换为汇编语言时，会加上一个以lock为前缀的指令，当CPU发现这个指令时，立即会做两件事情：</p><ol><li>将当前内核中线程工作内存中该共享变量刷新到主存；</li><li>通知其他内核里缓存的该共享变量内存地址无效；</li></ol><blockquote><p><strong>MESI协议</strong>：在早期的CPU中，是通过在总线加LOCK#锁的方式实现的，但是这种方式开销太大，所以Intel开发了==缓存一致性协议==，也就是MESI协议。该缓存一致性思路：当CPU写数据时，如果发现操作的变量时共享变量，即其他线程的工作内存也存在该变量，于是会发信号通知其他CPU该变量的内存地址无效。当其他线程需要使用这个变量时，如内存地址失效，那么它们会在主存中重新读取该值。</p></blockquote><h5 id="有序性："><a href="#有序性：" class="headerlink" title="有序性："></a><strong>有序性：</strong></h5><ul><li>计算机在执行程序时，为了提高性能，编译器和处理器常常会对指令做重排，一般会分为以下三种</li></ul><p><img src="../../themes/matery/source/img/image-20200616172925373.png" alt=""></p><ul><li>单线程环境里面确保程序最终执行结果和代码顺序执行的结果一致。</li><li>处理器在进行重排序时必须要考虑指令之间的==数据依赖性==</li><li>常规多线程环境中线程交替执行，由于编译器优化重排的存在，两个线程中使用的变量能否保持一致性是无法确定的，结果无法预测</li></ul><p><code>volatile</code>实现==禁止指令重排优化==，从而避免多线程环境下程序出现乱序执行的现象</p><h5 id="内存屏障（Memory-Barrier），又称内存栅栏，是一个CPU指令-有两个作用："><a href="#内存屏障（Memory-Barrier），又称内存栅栏，是一个CPU指令-有两个作用：" class="headerlink" title="内存屏障（Memory Barrier），又称内存栅栏，是一个CPU指令,有两个作用："></a><strong>内存屏障（Memory Barrier）</strong>，又称内存栅栏，是一个CPU指令,有两个作用：</h5><ol><li>保证特定操作的执行顺序</li><li>保证某些变量的内存可见性（利用该特性实现<strong><code>volatile</code></strong>的内存可见性）</li></ol><blockquote><p>由于编译器和处理器都能执行指令重排优化，如果在指令间插入一条<strong><code>Memory Barrier</code></strong>则会告诉编译器和处理器，不管什么指令都不能和这条<strong><code>Memory Barrier</code></strong>指令重排序，也就是说==通过插入内存屏障禁止在内存屏障前后的指令执行重排优化==。内存屏障另外一个作用是强制刷新各种CPU的缓存数据，因此任何CPU上的线程都能读取到这些数据的最新版本。</p><p><img src="../../themes/matery/source/img/image-20200616181117659.png" alt=""></p></blockquote><h5 id="线程安全性的保证："><a href="#线程安全性的保证：" class="headerlink" title="线程安全性的保证："></a><strong><em>线程安全性的保证：</em></strong></h5><p>工作内存与主内存同步延迟现象导致的可见性问题：</p><ul><li>可以使用synchronized或volatile关键字解决，它们都可以使一个线程==修改后的变量立即对其他线程可见==</li></ul><p>对于指令重排导致的可见性问题和有序性问题：</p><ul><li>可以使用volatile关键字解决，因为volatile有禁止重排优化的特性</li></ul><p><strong>使用volatil%e场景：</strong></p><ul><li><p>单例模式：</p><ul><li><blockquote><p>在单例模式中，DCL（双端检锁）机制不一定线程安全，原因是有指令重排的存在，加入volatile可以禁止指令重排；</p><p>重拍原因：某个线程执行到第一次检测，读取到的instance不为null时，instance的引用对象==可能没有完成初始化==，instance = new SignletonDemo(); 可以分为以下三步完成（伪代码）</p><pre class=" language-java"><code class="language-java">memory <span class="token operator">=</span> <span class="token function">allocate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 1.分配对象空间</span><span class="token function">instance</span><span class="token punctuation">(</span>memory<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 2.初始化对象</span>instance <span class="token operator">=</span> memory<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 3.设置instance指向刚分配的内存地址，此时instance!=null</span></code></pre><p>步骤2和步骤3==不存在数据依赖关系==，而且无论重前排还是重后排程序的执行结果在单线程中并没有改变，因此这种重排优化是允许的</p><p>当指令重排为132时，先执行步骤3，指向了分配的内存地址，步骤2还没有执行，而此时其他线程进来判断此时instance不为空，则直接取的值就是未初始化的对象，造成线程安全问题。</p><p><em>指令重排只会保证串行语义的一致性（单线程），并不会关心多线程间的语义一致性</em></p></blockquote></li></ul></li></ul><h3 id="JMM"><a href="#JMM" class="headerlink" title="JMM"></a>JMM</h3><blockquote><p><code>JMM</code>（Java内存模型 Java Memory Model）本身是一种抽象的概念，并不真实存在，它描述的是==一组规则或规范==，通过这组规范定义了程序中各个变量（包括实例字段，静态字段和构成数组对象的元素）的访问方式。</p><ul><li>可见性</li><li>原子性<ul><li>不可分割，完整性，即某个线程正在做某个业务时，中间不可以被加塞或者分割，需要整体完整，要么同时成功，要么同时失败。</li></ul></li><li>有序性</li></ul></blockquote><p>JMM关于同步的规定：</p><ul><li>线程解锁前，必须把共享变量刷新回主内存</li><li>线程加锁前，必须读取主内存的最新值到自己的工作内存</li><li>加锁解锁是同一把锁</li></ul><blockquote><p>​        由于JVM运行程序的实体是线程，而每个线程创建时JVM都会为其创建一个工作内存（有些地方称为栈空间），工作内存使每一个线程私有数据区域，而<strong>java</strong>内存模型中规定所有变量都存储在==主内存==，主内存是共享内存区域，所有的线程都可以访问，==但线程对变量的操作（读取赋值等）必须在工作内存中进行，首先要将变量从主内存拷贝到自己的工作内存空间，然后对变量进行操作，操作完成后再将变量写回主内存==，不能直接操作主内存的变量，各个线程中的存储着主内存中的==变量副本拷贝==，因此不同的线程间无法访问对方的工作内存，线程间的通信（传值）必须通过主内存来完成，其简要访问过程如下图：</p></blockquote><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200422211810052.png" alt="image-20200422211810052" style="zoom:67%;"><h3 id="CAS"><a href="#CAS" class="headerlink" title="CAS"></a>CAS</h3><blockquote><p>CAS（Compare And Swap），==它是一条CPU并发原语==；</p><p>功能：</p><ul><li>判断内存某个位置的值是否为预期值，如果是则更新为新的值，这个过程是原子的；</li></ul><p>CAS并发原语体现在JAVA语言中就是sun.misc.Unsafe类中的各个方法。调用Unsafe类中的CAS方法，JVM会帮我们实现CAS汇编指令，这是一种完全依赖于==硬件==的功能，通过它实现了==原子操作==。</p><p><em>由于CAS是一种系统原语，原语属于操作系统用语范畴，是由若干条指令组成的，用于完成某个功能的一个过程。==原语的执行必须是连续的，在执行过程中不允许被打断，不会造成数据不一致问题==</em></p></blockquote><blockquote><p>测试代码：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CASDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AtomicInteger atomicInteger <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicInteger</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// initialValue=5</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">666</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  current data："</span><span class="token operator">+</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// except : 5; update : 666;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>atomicInteger<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  current data："</span><span class="token operator">+</span>atomicInteger<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// except : 5; update : 999;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>测试结果：</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token boolean">true</span>  current data：<span class="token number">666</span>  <span class="token comment" spellcheck="true">// 期望值与主内存的真实值相等，都为5，真实值修改为666，返回true</span><span class="token boolean">false</span>  current data：<span class="token number">666</span> <span class="token comment" spellcheck="true">// 期望值5已经与主内存真实值666不相等，本次修改失败，返回false</span><span class="token comment" spellcheck="true">// 真实值和期望值相等，修改成功；否则修改失败</span></code></pre><p><img src="img/image-20200617221526049.png" alt="CAS实现原理"></p><p><img src="img/image-20200617222850465.png" alt="底层汇编"></p><p><img src="img/image-20200617213112113.png" alt=""></p><h5 id="Unsafe类"><a href="#Unsafe类" class="headerlink" title="Unsafe类:"></a><strong>Unsafe类:</strong></h5><blockquote><ol><li><code>Unsafe</code>是==CAS==的核心类，由于java方法无法直接访问底层系统，需要通过==本地（native）方法==来访问，Unsafe相当于一个后门，基于该类可以直接操作特定内存的数据。==Unsafe类存在于sun.misc包中==，其内部方法操作可以像C语言的指针一样直接操作内存，Java中CAS操作的执行依赖于Unsafe类的方法。</li></ol></blockquote><p><em>注意：Unsafe类中的所有方法都是native修饰的，即Unsafe类中的方法都直接调用操作系统底层资源执行相应任务</em></p><blockquote><ol start="2"><li>变量 <code>valueOffset</code>，表示该变量值在内存中的==偏移地址==，因为Unsafe类就是根据内存偏移地址获取数据的。</li></ol><p><img src="img/image-20200617212425498.png" alt=""></p></blockquote><blockquote><ol start="3"><li>变量<code>value</code>用<code>volatile</code>修饰，保证了多线程之间的内存可见性。</li></ol></blockquote><h5 id="CAS缺点："><a href="#CAS缺点：" class="headerlink" title="CAS缺点："></a><strong>CAS缺点：</strong></h5><ul><li>循环时间长，开销很大；方法中do while语句若不成功，会一直尝试，可能会给CPU带来很大的开销。</li><li>只能保证一个共享变量的原子操作</li><li>ABA问题：<ul><li>例如：线程1和线程2从内存地址V中取出A，线程2进行操作将地址V的值变成B，接着又操作将地址V的值改为A，之后线程1开始更新操作，判断内存地址V的值仍然为A，然后操作成功。在此过程中，线程1并不知道内存地址V的值被更改过</li><li>解决方式：通过==版本号原子引用（<code>AtomicStampedReference&lt;Integer&gt;</code>）==增加版本号；比较时，判断期望的版本号是否与当前最新的版本号一致</li><li><img src="img/image-20200617232806012.png" alt="CAS解决示例"></li></ul></li></ul><h3 id="集合类不安全问题"><a href="#集合类不安全问题" class="headerlink" title="集合类不安全问题"></a>集合类不安全问题</h3><p>List、Set、Map</p><h5 id="ArrayList线程不安全，演示"><a href="#ArrayList线程不安全，演示" class="headerlink" title="ArrayList线程不安全，演示"></a><strong>ArrayList线程不安全，演示</strong></h5><blockquote><p>代码演示：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContainerNotSafeDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">30</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>报错信息：</p><pre class=" language-java"><code class="language-java">Exception in thread <span class="token string">"11"</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ConcurrentModificationException</code></pre></blockquote><p>==java.util.ConcurrentModificationException==</p><blockquote><p>异常原因：并发争抢修改导致</p><ul><li>一个线程正在写入，另一个线程过来抢夺，导致数据不一致</li></ul></blockquote><blockquote><p>解决方案一：</p><p>使用vector代替ArrayList，但是由于synchronized性能会下降，不建议使用；</p></blockquote><p><img src="img/image-20200621110428836.png" alt="ArrayList与vector的add方法区别"></p><blockquote><p>解决方案二：</p><p>使用Collections工具类</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> Collections<span class="token punctuation">.</span><span class="token function">synchronizedList</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>解决方案三：</p><pre class=" language-java"><code class="language-java">List<span class="token operator">&lt;</span>String<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></blockquote><blockquote><p>写时复制（CopyOnWrite）容器，往一个容器添加元素的时候，不直接向当前的容器Object[]添加，而是先将当前容器Object[]进行copy，复制出一个新的容器Object[] newElements，然后新的容器Object[] newElements 里添加新元素，添加完元素后，再将原容器的引用指向新容器 setArray(newElements);这样就可以对CopyOnWrite容器进行并发的读，而不需要加锁，因为当前容器不会添加任何元素，所以CopyOnWrite容器，是一种==读写分离==的思想，读和写在不同的容器。</p></blockquote><blockquote><p><code>CopyOnWriteArrayList.java</code>：add（）方法代码</p></blockquote><blockquote><pre class=" language-java"><code class="language-java">    <span class="token comment" spellcheck="true">/**     * Appends the specified element to the end of this list.     *     * @param e element to be appended to this list     * @return {@code true} (as specified by {@link Collection#add})     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span>E e<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">final</span> ReentrantLock lock <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lock<span class="token punctuation">;</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> elements <span class="token operator">=</span> <span class="token function">getArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> elements<span class="token punctuation">.</span>length<span class="token punctuation">;</span>            Object<span class="token punctuation">[</span><span class="token punctuation">]</span> newElements <span class="token operator">=</span> Arrays<span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>elements<span class="token punctuation">,</span> len <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            newElements<span class="token punctuation">[</span>len<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>            <span class="token function">setArray</span><span class="token punctuation">(</span>newElements<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre></blockquote><h5 id="HashSet线程不安全，参考以上方案二和三"><a href="#HashSet线程不安全，参考以上方案二和三" class="headerlink" title="HashSet线程不安全，参考以上方案二和三"></a><strong><em>HashSet线程不安全，参考以上方案二和三</em></strong></h5><h5 id="HashMap线程不安全："><a href="#HashMap线程不安全：" class="headerlink" title="HashMap线程不安全："></a><strong>HashMap线程不安全：</strong></h5><ul><li><p>解决方式一：</p><ul><li><pre class=" language-java"><code class="language-java">ConcurrentHashMap<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> Object<span class="token operator">></span> Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentHashMap</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ul></li></ul><p><em>其他解决方式参考方法二和三</em></p><h3 id="锁"><a href="#锁" class="headerlink" title="锁"></a>锁</h3><h5 id="公平锁"><a href="#公平锁" class="headerlink" title="公平锁"></a>公平锁</h5><blockquote><p>按照多个线程申请锁的顺序来获取锁，先来后到。在并发环境中每个线程在获取锁时会先查看此锁维护的等待队列，如果为空，或者当前线程是等待队列的第一个，就占有锁，否则就会加入到等待队列中，按照FIFO的规则排队。</p></blockquote><h5 id="非公平锁"><a href="#非公平锁" class="headerlink" title="非公平锁"></a>非公平锁</h5><blockquote><p>多个线程获取锁的顺序并不是按照申请锁的顺序，有可能后申请的线程比先申请的线程优先获取锁，在高并发的情况下，有可能造成优先级反转或者饥饿现象。</p></blockquote><p><em>并发包中的<code>java.util.concurrent.locks.ReentrantLock</code> 的创建可以指定构造函数的Boolean类型来得到公平锁或非公平锁，==默认是非公平锁==</em>，非公平锁的优点时==吞吐量==比公平锁大。对于<code>Synchronized</code>而言，也是一种非公平锁。</p><h5 id="可重入锁（递归锁）"><a href="#可重入锁（递归锁）" class="headerlink" title="可重入锁（递归锁）"></a>可重入锁（递归锁）</h5><blockquote><p>在同一线程外层函数获得锁之后，内层递归函数仍然能够获取该锁的代码。同一个线程在外层方法获取锁的时候，在进入内层方法会自动获取锁。即==线程可以进入任何一个它已经拥有的锁所同步着的代码块==。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method01</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">method02</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span></code></pre><p>作用：==防止死锁==</p><p><strong><em>ReentrantLock / Synchronized就是典型的可重入锁</em></strong></p></blockquote><h5 id="自旋锁"><a href="#自旋锁" class="headerlink" title="自旋锁"></a>自旋锁</h5><blockquote><p>尝试获取锁的线程不会立即阻塞，而时采用==循环==的方式去尝试获取锁，这样的好处是减少线程上下文切换的消耗，缺点是循环会消耗cpu</p><p>例如：unsafe类中的getAndAddInt()方法</p><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token function">getAndAddInt</span><span class="token punctuation">(</span>Object var1<span class="token punctuation">,</span> <span class="token keyword">long</span> var2<span class="token punctuation">,</span> <span class="token keyword">int</span> var4<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// var1:对象，var2:内存地址，var4:增加值</span>        <span class="token keyword">int</span> var5<span class="token punctuation">;</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            var5 <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getIntVolatile</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span>var1<span class="token punctuation">,</span> var2<span class="token punctuation">,</span> var5<span class="token punctuation">,</span> var5 <span class="token operator">+</span> var4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> var5<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre></blockquote><h5 id="独占锁"><a href="#独占锁" class="headerlink" title="独占锁"></a>独占锁</h5><blockquote><p>该锁一次只能被一个线程持有。</p><p><strong><em>ReentrantLock / Synchronized都是独占锁</em></strong></p></blockquote><h5 id="共享锁"><a href="#共享锁" class="headerlink" title="共享锁"></a>共享锁</h5><blockquote><p>该锁可被多个线程持有，可保证并发读是非常高效的，</p><p><strong><em>ReentrantReadWriteLock的读锁是共享锁，写锁是独占锁</em></strong></p></blockquote><h5 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h5><blockquote><p>允许一个或多个线程等待直到在其他线程中执行的一组操作完成的同步辅助。<br>A CountDownLatch用给定的计数初始化。 await方法阻塞，直到由于countDown()方法的调用而导致当前计数达到零，之后所有等待线程被释放，并且任何后续的await 调用立即返回。 这是一个一次性的现象 - 计数无法重置。</p><p>让一些线程阻塞直到另一些线程完成一系列的操作后才被唤醒</p><p>CountDownLatch主要有两个方法，当一个或多个线程调用await方法时，调用线程会被阻塞，其他线程调用countDown方法会将计数器减一（调用countDown的方法不会被阻塞），当计数器的值变为零时，因调用await方法被阻塞的线程会被唤醒，继续执行</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CountDownLatchDemo</span> <span class="token punctuation">{</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> InterruptedException <span class="token punctuation">{</span>       CountDownLatch countDownLatch <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CountDownLatch</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 计数为7</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>           <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>               System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集到第 "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 颗龙珠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               countDownLatch<span class="token punctuation">.</span><span class="token function">countDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 计数减一</span>           <span class="token punctuation">}</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span>       countDownLatch<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//阻塞，等待计数减为0，才被唤醒</span>       System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><img src="/img/image-20200623214108602.png" alt="加CountDownLatch前后对照结果"></p></blockquote><h5 id="CyclicBarrier"><a href="#CyclicBarrier" class="headerlink" title="CyclicBarrier"></a>CyclicBarrier</h5><blockquote><p>CyclicBarrier的字面意思是可循环（Cyclic）使用的屏障（Barrier）。他要做的事情是，让一组线程到达一个屏障（也可以叫同步点）时被阻塞，直到最后一个线程到达屏障时，屏障才会开门，所有被屏障拦截的线程才会继续干活，线程进入屏障通过<code>cyclicBarrier.await();</code>方法。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CyclicBarrierDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CyclicBarrier cyclicBarrier <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CyclicBarrier</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"召唤神龙!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">7</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"收集到第 "</span><span class="token operator">+</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 颗龙珠。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    cyclicBarrier<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BrokenBarrierException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></blockquote><h5 id="Semaphore"><a href="#Semaphore" class="headerlink" title="Semaphore"></a>Semaphore</h5><blockquote><p>一个计数信号量。在概念上，信号量维持一组许可证。如果有必要，每个<code>acquire()</code>都会阻塞，直到许可证可用，然后才能使用它。每个<code>release()</code>添加许可证，潜在地释放阻塞获取方。但是，没有使用实际的许可证对象;<code>Semaphore</code>只保留可用数量的计数，并相应地执行。</p><p>信号量主要用于两个目的：</p><ul><li>多个共享资源的互斥使用</li><li>并发线程数的控制</li></ul><p>信号量通常用于限制线程数，而不是访问某些（物理或逻辑）资源</p></blockquote><blockquote><p>代码演示</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SemaphoreDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Semaphore semaphore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Semaphore</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 模拟三个车位</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">acquire</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//阻塞</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 抢到了车位！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" 已离开，车位空闲！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span><span class="token punctuation">{</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token keyword">finally</span> <span class="token punctuation">{</span>                    semaphore<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// 许可证可用，释放阻塞</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">,</span>String<span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><blockquote><p>演示结果</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token number">1</span> 号车抢到了车位！<span class="token number">2</span> 号车抢到了车位！<span class="token number">3</span> 号车抢到了车位！<span class="token number">3</span> 号车已离开，车位空闲！<span class="token number">1</span> 号车已离开，车位空闲！<span class="token number">2</span> 号车已离开，车位空闲！<span class="token number">4</span> 号车抢到了车位！<span class="token number">5</span> 号车抢到了车位！<span class="token number">6</span> 号车抢到了车位！<span class="token number">4</span> 号车已离开，车位空闲！<span class="token number">6</span> 号车已离开，车位空闲！<span class="token number">5</span> 号车已离开，车位空闲！</code></pre><h5 id="死锁演示"><a href="#死锁演示" class="headerlink" title="死锁演示"></a>死锁演示</h5><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">LockShareSource</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 共享资源</span>    <span class="token keyword">private</span> String lockA<span class="token punctuation">;</span>    <span class="token keyword">private</span> String lockB<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LockShareSource</span><span class="token punctuation">(</span>String lockA<span class="token punctuation">,</span> String lockB<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockA <span class="token operator">=</span> lockA<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>lockB <span class="token operator">=</span> lockB<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span><span class="token punctuation">(</span>lockA<span class="token punctuation">)</span><span class="token punctuation">{</span>   <span class="token comment" spellcheck="true">// 获取lockA的锁</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到了"</span><span class="token operator">+</span>lockA<span class="token operator">+</span><span class="token string">"，正要获取"</span><span class="token operator">+</span>lockB<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>lockB<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取lockB的锁</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"获取到了"</span><span class="token operator">+</span>lockB<span class="token operator">+</span><span class="token string">"，正要获取"</span><span class="token operator">+</span>lockA<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeadLockDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String lockA <span class="token operator">=</span> <span class="token string">"lockA"</span><span class="token punctuation">;</span>        String lockB <span class="token operator">=</span> <span class="token string">"lockB"</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LockShareSource</span><span class="token punctuation">(</span>lockA<span class="token punctuation">,</span>lockB<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LockShareSource</span><span class="token punctuation">(</span>lockB<span class="token punctuation">,</span>lockA<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>报错信息：==使用<code>jsp-l</code>查询阻塞线程==，==<code>jstack - 线程id</code>查询原因==</p><img src="/img/image-20200708222117728.png" alt="image-20200708222117728" style="zoom:80%;"><h3 id="阻塞队列"><a href="#阻塞队列" class="headerlink" title="阻塞队列"></a>阻塞队列</h3><blockquote><p>阻塞队列，顾名思义，首先它是个队列，而一个阻塞队列在数据结构中起的作用大致如下图</p><p><img src="/img/image-20200624165652567.png" alt="阻塞队列"></p><p>Thread 1往阻塞队列中添加元素，而Thread 2 从阻塞队列中移除元素</p><ul><li>当阻塞队列是空时，从阻塞队列==获取==元素的操作将会被阻塞</li><li>当阻塞队列是满时，往阻塞队列==添加==元素的操作将会被阻塞</li></ul><p>在多线程领域，所谓阻塞，在某些情况下会==挂起==线程（即阻塞），一旦条件满足，被挂起的线程又会自动==被唤醒==。</p><p>为什么需要<code>BlockingQueue</code>？</p><p>在<code>Concurrent</code>包发布以前，在多线程环境下，开发程序时，==必须自己去控制这些细节，尤其还要兼顾效率和线程安全==。使用了阻塞队列，我们不需要关心什么时候需要阻塞线程，什么时候需要唤醒线程，这一切都被<code>BlockingQueue</code>包办了。</p></blockquote><h5 id="BlockingQueue的核心方法"><a href="#BlockingQueue的核心方法" class="headerlink" title="BlockingQueue的核心方法"></a>BlockingQueue的核心方法</h5><table><thead><tr><th align="center">方法类型</th><th align="center">抛出异常</th><th align="center">特殊值</th><th align="center">阻塞</th><th align="center">超时</th></tr></thead><tbody><tr><td align="center">插入</td><td align="center">add（e）</td><td align="center">offer（e）</td><td align="center">put（e）</td><td align="center">offer（e，time，unit）</td></tr><tr><td align="center">移除</td><td align="center">remove（）</td><td align="center">poll（）</td><td align="center">take（）</td><td align="center">poll（time，unit）</td></tr><tr><td align="center">检查</td><td align="center">element（）</td><td align="center">peek（）</td><td align="center">不可用</td><td align="center">不可用</td></tr></tbody></table><table><thead><tr><th>方法类型</th><th>特征</th></tr></thead><tbody><tr><td>抛出异常</td><td>当阻塞队列满时，再往队列里add插入元素会抛出IIegalStateException：Queue Full<br>当阻塞队列空时，再往队列里remove移除元素会抛出NoSuchElementException</td></tr><tr><td>特殊值</td><td>插入方法，成功返回True，失败返回false<br>移除方法，成功返回出队列元素，队列里面没有就返回null</td></tr><tr><td>一直阻塞</td><td>当阻塞队列满时，生产者线程会继续往队列里put元素，队列会一直阻塞生产线程直到put数据或响应中断。<br>当阻塞队列空时，消费者线程试图从队列里take元素，队列会一直阻塞消费者线程直到队列可用</td></tr><tr><td>超时退出</td><td>当阻塞队列满时，队列会阻塞生产者线程一定时间，超过限时后生产者线程会退出</td></tr></tbody></table><p><em>以下前三个为重点</em></p><h5 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h5><blockquote><p>一个基于数组结构的有界阻塞队列，此队列按FIFO（先进先出）原则对元素进行排序</p></blockquote><h5 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h5><blockquote><p>一个基于链表结构的阻塞队列，此队列按FIFO（先进先出）排序元素，吞吐量通常要高于<code>ArrayBlockingQueue</code></p><p>由链表结构组成的有界（注意有坑：大小默认值为Integer.MAX_VALUE，即==2 的 31 次方 - 1 = <strong>2147483648 - 1</strong> = <strong>2147483647</strong>==）阻塞队列</p></blockquote><h5 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h5><blockquote><p>一个不存储元素的阻塞队列，每个插入操作必须等到另一个线程调用一处操作，否则插入操作一直处于阻塞状态</p></blockquote><h5 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h5><blockquote><p>支持优先级排序的无界阻塞队列</p></blockquote><h5 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h5><blockquote><p>使用优先级队列实现的延迟无界阻塞队列</p></blockquote><h5 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h5><blockquote><p>由链表结构组成的无界阻塞队列</p></blockquote><h5 id="LinkedBlocking-D-eque"><a href="#LinkedBlocking-D-eque" class="headerlink" title="LinkedBlocking==D==eque"></a>LinkedBlocking==D==eque</h5><blockquote><p>由链表结构组成的双向阻塞队列</p></blockquote><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><h5 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h5><blockquote><p>线程池的工作主要是控制运行的线程数量，==处理过程中将任务放入队列==，然后在线程创建后启动这些任务，==如果线程数量超过了最大数量，超出数量的线程排队等候==，等其他线程执行完毕，再从队列中取出任务来执行</p><p>特点：</p><ul><li><p>线程复用</p></li><li><p>控制最大的并发数</p></li><li><p>管理线程</p></li><li><p>降低资源消耗，通过重复利用创建的线程降低线程创建和销毁造成的消耗</p></li><li><p>提高响应速度，当任务到达时，任务可以不需要等到线程创建就能立即执行</p></li><li><p>提高线程的可管理性，线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控</p><p>获得/使用java多线程的方式之一</p></li><li><p>第一种方式：继承Thread类</p></li><li><p>第二种方式：实现Runable接口（没有返回值，不抛异常）</p></li><li><p>第三种方式：实现Callable接口（有返回值，会抛异常）</p></li><li><p>第四种方式：==通过线程池获取==</p></li></ul></blockquote><h5 id="架构说明"><a href="#架构说明" class="headerlink" title="架构说明"></a>架构说明</h5><blockquote><p>Java中的线程池是通过Executor框架实现的，该框架中用到了Executor、Executors、ExecutorService、ThreadPoolExecutor这几个类。</p><p><img src="/img/image-20200708142300500.png" alt=""></p></blockquote><h5 id="编码实现"><a href="#编码实现" class="headerlink" title="编码实现"></a>编码实现</h5><p>五种方式：</p><pre class=" language-java"><code class="language-java">Executors<span class="token punctuation">.</span><span class="token function">newScheduledThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>Executors<span class="token punctuation">.</span><span class="token function">newWorkStealingPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// java8新增，使用目前机器可用的处理器作为它的并行级别</span><span class="token comment" spellcheck="true">// 以上两种了解，重点看以下三种</span><span class="token number">1</span><span class="token punctuation">.</span>Executors<span class="token punctuation">.</span><span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// newFixedThreadPool()源码</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newFixedThreadPool</span><span class="token punctuation">(</span><span class="token keyword">int</span> nThreads<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>nThreads<span class="token punctuation">,</span> nThreads<span class="token punctuation">,</span>                                      0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主要特点如下</span><span class="token number">1.1</span> <span class="token comment" spellcheck="true">// 创建一个定长的线程池，可控制线程最大并发数，超出的线程会在队列中等待</span><span class="token number">1.2</span> <span class="token comment" spellcheck="true">// newFixedThreadPool创建的线程池 corePoolSize和maximumPoolSize值是相等的，它使用LinkedBlockingQueue</span><span class="token comment" spellcheck="true">// 应用场景：执行长期的任务，性能好很多</span><span class="token number">2</span><span class="token punctuation">.</span>Executors<span class="token punctuation">.</span><span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// newSingleThreadExecutor源码</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newSingleThreadExecutor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">FinalizableDelegatedExecutorService</span>            <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                                    0L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>MILLISECONDS<span class="token punctuation">,</span>                                    <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主要特点如下</span><span class="token number">2.1</span> <span class="token comment" spellcheck="true">// 创建一个单线程化的线程池，它只会用唯一的工作线程来执行任务，保证所有任务按照指定循序执行</span><span class="token number">2.2</span> <span class="token comment" spellcheck="true">// newSingleThreadExecutor将corePoolSize和maximumPoolSize都设置为1，它使用LinkedBlockingQueue</span><span class="token comment" spellcheck="true">// 应用场景：一个任务一个任务执行的场景</span><span class="token number">3</span><span class="token punctuation">.</span>Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">// newCachedThreadPool源码</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> ExecutorService <span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">,</span>                                      60L<span class="token punctuation">,</span> TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>                                      <span class="token keyword">new</span> <span class="token class-name">SynchronousQueue</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 主要特点如下</span><span class="token number">3.1</span> <span class="token comment" spellcheck="true">// 创建一个可缓存线程池，如果线程池长度超过处理需要，可灵活回收线程，若无可回收，则新建线程</span><span class="token number">3.2</span> <span class="token comment" spellcheck="true">// newCachedThreadPool将corePoolSize设置为0，将maximumPoolSize设置为Integer.MAX_VALUE,使用的SynchronousQueue，也就是说来了任务就创建线程执行，当线程空闲超过60秒，就销毁线程</span><span class="token comment" spellcheck="true">// 应用场景：执行很多短期异步的小程序或者负载较轻的服务器</span></code></pre><blockquote><p>代码实现</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPoolDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool = Executors.newFixedThreadPool(3);  // 一个线程池固定三个处理线程</span><span class="token comment" spellcheck="true">//        ExecutorService threadPool = Executors.newSingleThreadExecutor(); // 线程池只有一个处理线程</span>        ExecutorService threadPool <span class="token operator">=</span> Executors<span class="token punctuation">.</span><span class="token function">newCachedThreadPool</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 线程池中根据情况自动分配n个处理线程</span>        <span class="token comment" spellcheck="true">// 假设有10个业务要处理</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                threadPool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  正在处理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">try</span> <span class="token punctuation">{</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            threadPool<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="线程池的七大参数"><a href="#线程池的七大参数" class="headerlink" title="线程池的七大参数"></a>线程池的七大参数</h5><blockquote><p>ThreadPoolExecutor.java中的构造方法</p></blockquote><pre class=" language-java"><code class="language-java">    <span class="token keyword">public</span> <span class="token function">ThreadPoolExecutor</span><span class="token punctuation">(</span><span class="token keyword">int</span> corePoolSize<span class="token punctuation">,</span>                              <span class="token keyword">int</span> maximumPoolSize<span class="token punctuation">,</span>                              <span class="token keyword">long</span> keepAliveTime<span class="token punctuation">,</span>                              TimeUnit unit<span class="token punctuation">,</span>                              BlockingQueue<span class="token operator">&lt;</span>Runnable<span class="token operator">></span> workQueue<span class="token punctuation">,</span>                              ThreadFactory threadFactory<span class="token punctuation">,</span>                              RejectedExecutionHandler handler<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>corePoolSize <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token operator">||</span>            maximumPoolSize <span class="token operator">&lt;</span> corePoolSize <span class="token operator">||</span>            keepAliveTime <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>workQueue <span class="token operator">==</span> null <span class="token operator">||</span> threadFactory <span class="token operator">==</span> null <span class="token operator">||</span> handler <span class="token operator">==</span> null<span class="token punctuation">)</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>acc <span class="token operator">=</span> System<span class="token punctuation">.</span><span class="token function">getSecurityManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> null <span class="token operator">?</span>                null <span class="token operator">:</span>                AccessController<span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>corePoolSize <span class="token operator">=</span> corePoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>maximumPoolSize <span class="token operator">=</span> maximumPoolSize<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>workQueue <span class="token operator">=</span> workQueue<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>keepAliveTime <span class="token operator">=</span> unit<span class="token punctuation">.</span><span class="token function">toNanos</span><span class="token punctuation">(</span>keepAliveTime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>threadFactory <span class="token operator">=</span> threadFactory<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>handler <span class="token operator">=</span> handler<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>1.corePoolSize：线程池中的常驻核心线程数</p><ul><li>在创建了线程池后，当有请求任务来之后，就会安排池中的线程去执行请求任务</li><li>在线程池中的线程数目达到corePoolSize后，就会把达到的任务放到==缓存队列==中</li></ul><p>2.maximumPoolSize：线程池能够容纳同时执行的最大线程数，此值必须大于等于1</p><p>3.keepAliveTime：多余的空闲线程存活时间</p><p><em>当线程池中的线程数量超过corePoolSize时当空闲时间达到keepAliveTime值时，多余的空闲线程会被销毁直到只剩下corePoolSize个线程为止</em></p><p>4.unit：KeepAliveTime的单位</p><p>5.workQueue：任务队列，被提交但尚未被执行的任务</p><p>6.threadFactory：表示生成线程池中工作线程的线程工厂，用于创建线程一般用默认的即可</p><p>7.handler：拒绝策略，表示当队列满了并且工作线程大于等于线程池的最大线程数（maximumPoolSize）时如何来拒绝请求执行的runnable的策略    </p><h5 id="工作原理流程"><a href="#工作原理流程" class="headerlink" title="工作原理流程"></a>工作原理流程</h5><blockquote><ol><li><p>在创建了线程池后，等待提交过来的任务请求。</p></li><li><p>当调用execute()方法添加一个请求任务，线程池会做一下判断：</p><ul><li>2.1 如果正在运行的线程数量小于corePoolSize，那么马上创建线程运行这个任务；</li><li>2.2 如果正在运行的线程数量大于或等于corePoolSize，就将这个任务==放入队列==；</li><li>2.3 如果这时候队列满了且正在运行的线程数量还小于maximumPoolSize，那么还是要创建非核心线程立刻运行这个任务；</li><li>2.4 如果队列满了且正在运行的线程数量大于或等于maximumPoolSize，线程池就会启动==饱和拒绝策略==；</li></ul></li><li><p>当一个线程完成任务时，它会从队列中取下一个任务来执行。</p></li><li><p>当一个线程无事可做超过一定时间（keepAliveTime）时，线程池会判断：</p><ul><li>4.1 如果当前运行的线程大于corePoolSize，那么这个线程会被停掉；</li><li>4.2 线程池的所有任务完成后，最终会收缩到corePoolSize的大小</li></ul></li></ol></blockquote><h5 id="线程池的拒绝策略"><a href="#线程池的拒绝策略" class="headerlink" title="线程池的拒绝策略"></a>线程池的拒绝策略</h5><blockquote><p>线程池的等待队列已经排满，再也塞不下新任务了。同时，线程池中的max线程也达到了，无法继续为新任务服务，这时候我们就需要拒绝策略机制合理的处理这个问题。</p></blockquote><p><strong>JDK内置的拒绝策略</strong></p><ol><li>AbortPolicy（默认）：直接抛出RejectedExecutionException异常阻止系统正常运行。</li><li>CallerRunsPolicy：“调用者运行”一种调节机制，该策略既不会抛弃任务，也不会抛出异常，而时将某些任务回退到调用者，从而降低新任务的流量。</li><li>DiscardOldestPolicy：抛弃队列中等待最久的任务，然后把当前任务加入到队列中尝试再次提交当前任务。</li><li>DiscardPolicy：直接丢弃任务，不做任何处理也不抛出异常，如果允许任务丢失，这是最好的一种方案。</li></ol><p><strong>==以上内置拒绝策略均实现了RejectedExecutionHandler接口==</strong></p><pre class=" language-java"><code class="language-java">        ExecutorService poolExecutor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>                <span class="token number">2</span><span class="token punctuation">,</span>         <span class="token comment" spellcheck="true">// 核心线程数</span>                <span class="token number">5</span><span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 允许同时运行的最大线程数</span>                1L<span class="token punctuation">,</span>TimeUnit<span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 空闲线程存活时间</span>                <span class="token keyword">new</span> <span class="token class-name">LinkedBlockingDeque</span><span class="token operator">&lt;</span>Runnable<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>   <span class="token comment" spellcheck="true">// 阻塞队列</span>                Executors<span class="token punctuation">.</span><span class="token function">defaultThreadFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     <span class="token comment" spellcheck="true">// 生成线程池中工作线程的线程工厂</span><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.AbortPolicy()  // 拒绝策略  超过8个报错RejectedExecutionException</span><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.CallerRunsPolicy()  // 拒绝策略，将拒绝的任务退回给main线程</span><span class="token comment" spellcheck="true">//                new ThreadPoolExecutor.DiscardOldestPolicy()  // 拒绝策略，丢失业务</span>                <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>DiscardPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 拒绝策略，丢失业务</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 假设有10个业务要处理</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                poolExecutor<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token punctuation">{</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"  正在处理业务"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            poolExecutor<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span></code></pre><h5 id="阿里手册规范-线程池"><a href="#阿里手册规范-线程池" class="headerlink" title="阿里手册规范-线程池"></a>阿里手册规范-线程池</h5><p>线程资源必须通过线程池提供，不允许在应用中自行显示创建线程</p><blockquote><p>说明：使用线程池的好处是减少在创建和销毁线程上所消耗的时间以及系统资源的开销，解决资源不足的问题。如果不使用线程池，有可能造成系统创建大量的同类线程而导致消耗完内存或者“过度切换”问题。</p></blockquote><p>​      ==线程池不允许使用 Executors 去创建，而是通过 ThreadPoolExecutor 的方式==，这 样的处理方式让写的同学更加明确线程池的运行规则，规避资源耗尽的风险。 </p><blockquote><p>说明：Executors 返回的线程池对象的弊端如下： </p><p>1） FixedThreadPool 和 SingleThreadPool： 允许的请求队列长度为 Integer.MAX_VALUE，可能会堆积大量的请求，从而导致 OOM。 </p><p>2） CachedThreadPool： 允许的创建线程数量为 Integer.MAX_VALUE，可能会创建大量的线程，从而导致 OOM。</p></blockquote><h5 id="合理的配置线程池"><a href="#合理的配置线程池" class="headerlink" title="合理的配置线程池"></a>合理的配置线程池</h5><ol><li><p>CPU 密集型</p><ul><li>即该任务需要大量的运算，而没有阻塞，CPU一直运行；</li><li>CPU密集任务只有在真正的多核CPU上才可能得到加速（通过多线程）；</li><li>而在单核CPU上，无论开几个线程都不可能得到加速，因为CPU总的运算能力是有限的；</li><li>CPU密集型任务配置尽可能少的线程数量：一般来说：==CPU核数+1个线程的线程池；==</li></ul></li><li><p>IO 密集型</p><ol><li><p>由于IO密集型任务线程并不是一直在执行任务，则应配置尽可能多的线程，如CPU核数*2；</p></li><li><p>IO密集型，即任务需要大量的IO，即大量的阻塞，在单线程上运行IO密集型的任务会导致浪费大量的COU运算能力浪费在等待上，所以在IO密集型任务中使用多线程可以大大的加速程序运行，即使在单核CPU上，这种加锁主要就是利用了被浪费的阻塞时间；</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// IO密集型时，大部分线程都阻塞，故需要多配置线程数：</span>参考公式：CPU核数 <span class="token operator">/</span> <span class="token number">1</span><span class="token operator">-</span>阻塞系数       阻塞系数在<span class="token number">0.8</span><span class="token operator">~</span><span class="token number">0.9</span>之间比如<span class="token operator">:</span> <span class="token number">8</span>核CPU：<span class="token number">8</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">0.9</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">80</span>个线程数</code></pre></li></ol></li></ol><h3 id="JVMGC调优"><a href="#JVMGC调优" class="headerlink" title="JVMGC调优"></a>JVMGC调优</h3><h5 id="GC-Roots"><a href="#GC-Roots" class="headerlink" title="GC Roots"></a>GC Roots</h5><p><strong>什么是垃圾？</strong></p><ul><li>简单来说就是内存中已经不再使用的空间就是垃圾</li></ul><p><strong>要进行垃圾回收，如何判断一个对象是否可回收？</strong></p><ul><li>引用计数法<ul><li>java中，==引用和对象是有关联的==，如果要操作对象必须用引用进行，因此，可以通过引用计数来判断一个对象是否可以回收，简单说，给对象中添加一个引用计数器，每当有一个地方引用它，计数器值加一，每当有一个引用失效，计数器值减一。任何时刻计数器值为零的对象就是不可能再被引用的，即为可回收对象。</li><li>主流的Java虚拟机并没有选择引用计数法，主要原因在于它很难解决==对象之间相互循环引用的问题==。</li></ul></li><li>==枚举根节点做可达性分析（根搜索路径）==<ul><li>所谓 “GC Roots” 或者说 tracing GC 的 “根集合” ==就是一组必须活跃的引用==</li><li>基本思路就是==通过一系列名为“GC Roots”的对象作为起始点，从这个起始点开始向下搜索，如果一个对象到 GC Roots 没有任何引用链相连时，则说明此对象不可用。即给定一个集合的应用作为根节点出发，通过引用关系遍历对象图，能够遍历到的（可达的）对象就判定为存活，没有遍历到的就判定为死亡。</li></ul></li></ul><blockquote><p>为了解决引用计数法的循环引用问题，Java使用了可达性分析的方法</p></blockquote><p><img src="/img/image-20200709092737351.png" alt="枚举根节点图"></p><img src="/img/image-20200709093851603.png" style="zoom:80%;"><p><strong>Java中可以作为GC Roots的对象有哪些？</strong></p><ul><li>虚拟机栈（栈帧中的局部变量区，也叫局部变量表）中引用的对象；</li><li>方法区中的类静态属性引用的对象；</li><li>方法区中常量引用的对象；</li><li>本地方法栈中JNI（Native方法）引用的对象；</li></ul><h5 id="查看JVM系统默认值"><a href="#查看JVM系统默认值" class="headerlink" title="查看JVM系统默认值"></a>查看JVM系统默认值</h5><p><strong><em>如何查看一个正在运行中的Java程序，它的某个JVM参数是否开启？具体值是多少？</em></strong></p><pre class=" language-java"><code class="language-java">jps <span class="token operator">-</span>l  <span class="token comment" spellcheck="true">//查看Java后台进程</span>jinfo <span class="token operator">-</span>flag  配置项  进程编号  <span class="token comment" spellcheck="true">// 查看正在运行Java程序的JVM配置信息信息</span>jinfo <span class="token operator">-</span>flags 进程编号   <span class="token comment" spellcheck="true">// 展示该进程所有JVM配置信息</span></code></pre><p><strong>JVM的参数类型</strong></p><ul><li><p>标配参数</p><ul><li>-version</li><li>-help</li><li>java -showversion</li></ul></li><li><p>X参数</p><ul><li>-Xint：解释执行</li><li>-Xcomp：第一次使用就编译成本地代码</li><li>Xmixed：混合模式</li></ul></li><li><p>==XX参数==</p><ul><li><p>Boolean类型</p><ul><li><p>公式：<code>-XX:+ 或 - 某个属性值</code>；+表示开启，-表示关闭。</p></li><li><p>Case1：是否打印GC收集细节</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span>PrintGcDetalis   <span class="token comment" spellcheck="true">// -号表示关闭</span><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintGcDetalis   <span class="token comment" spellcheck="true">// +号表示开启</span></code></pre></li></ul></li><li><p>Case2：是否使用串行垃圾回收器</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">-</span>UserSerialGC<span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>UserSerialGC</code></pre></li></ul></li></ul></li><li><p>KV设值类型</p><ul><li><p>公式 ：<code>-XX:属性key=属性值value</code></p></li><li><p>Case：</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>XX<span class="token operator">:</span>MetaspaceSize<span class="token operator">=</span>128m     <span class="token comment" spellcheck="true">// 设置元空间大小</span><span class="token operator">-</span>XX<span class="token operator">:</span>MaxTenuringThreshold<span class="token operator">=</span><span class="token number">15</span>  <span class="token comment" spellcheck="true">// 控制新生代需要经历多少次GC晋升到老年代中的最大阈值在JVM中用4个bit存储（放在对象头中），所以其最大值是15。但并非意味着，对象必须要经历15次YGC才会晋升到老年代中。例如，当survivor区空间不够时，便会提前进入到老年代中，但这个次数一定不大于设置的最大阈值。</span></code></pre></li></ul></li></ul></li><li><p>两个经典参数（-Xms和-Xmx）</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token operator">-</span>Xms  <span class="token operator">==</span>  <span class="token operator">-</span>XX<span class="token operator">:</span>InitialHeapSize<span class="token operator">-</span>Xmx  <span class="token operator">==</span>  <span class="token operator">-</span>XX<span class="token operator">:</span>MaxHeapSize</code></pre></li></ul></li></ul></li></ul><p><strong>JVM默认值</strong></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 查看初始默认值</span>java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintFlagsInitial <span class="token operator">-</span>versionjava <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintFlagsInitial<span class="token comment" spellcheck="true">// 查看修改更新</span>java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintFlagsFinal <span class="token operator">-</span>version<span class="token comment" spellcheck="true">//打印HotSpotVM采用的自动优化参数，可显示JVM使用的垃圾回收器</span>java <span class="token operator">-</span>XX<span class="token operator">:</span><span class="token operator">+</span>PrintCommandLineFlags <span class="token operator">-</span>version</code></pre><h5 id="常用JVM基本配置参数"><a href="#常用JVM基本配置参数" class="headerlink" title="常用JVM基本配置参数"></a>常用JVM基本配置参数</h5><p>使用java程序查看jvm内存</p><pre class=" language-java"><code class="language-java">        <span class="token keyword">long</span> totalMemory <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">totalMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// jvm内存总量</span>        <span class="token keyword">long</span> maxMemory <span class="token operator">=</span> Runtime<span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxMemory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">// jvm试图使用的最大内存量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"totalMemory = "</span><span class="token operator">+</span>totalMemory<span class="token operator">+</span><span class="token string">"(字节) = "</span><span class="token operator">+</span>totalMemory<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">+</span><span class="token string">"mb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"maxMemory = "</span><span class="token operator">+</span>maxMemory<span class="token operator">+</span><span class="token string">"(字节) =  "</span><span class="token operator">+</span>maxMemory<span class="token operator">/</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">+</span><span class="token string">"mb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>本机结果</p><pre class=" language-java"><code class="language-java">totalMemory <span class="token operator">=</span> <span class="token function">126877696</span><span class="token punctuation">(</span>字节<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">121</span><span class="token punctuation">.</span>0mbmaxMemory <span class="token operator">=</span> <span class="token function">1866465280</span><span class="token punctuation">(</span>字节<span class="token punctuation">)</span> <span class="token operator">=</span>  <span class="token number">1780</span><span class="token punctuation">.</span>0mb</code></pre><p><strong>常用的基本配置参数</strong></p><ul><li><code>-Xms</code> 初始大小内存，默认为物理内存的1/64 ，等价于 <code>-XX:InitialHeapSize</code></li><li><code>-Xmx</code> 最大分配内存，默认为物理内存的1/4，等价于 <code>-XX:MaxHeapSize</code></li><li><code>-Xss</code> 设置单个线程栈的大小，一般默认为512k~1024k，等价于 <code>-XX:ThreadStackSize</code></li><li><code>-xmn</code> 设置年轻代大小（年轻代默认占1/3的堆空间）</li><li><code>-XX:MetasPaceSize</code> 设置元空间大小，元空间的本质和永久代类似，都是对JVM规范中方法区的实现。不过元空间与永久代之间最大的区别在于：==元空间并不在虚拟机中，而是使用本地内存==。因此，默认情况下，元空间的大小仅受本地内存限制。</li><li><code>-XX:+PrintGCDetails</code> 输出详细GC收集日志信息</li></ul><p><img src="/img/image-20200710153723592.png" alt="GC信息解析"></p><p><img src="/img/image-20200710154748254.png" alt="FullGC信息解析"></p><ul><li><code>-XX:SurvivorRatio</code> 设置新生代中Eden和S0/S1空间的比例，默认==<code>-XX:SurvivorRatio=8, Eden:S0:S1=8:1:1</code>==; SurvivorRatio值就是设置Eden区的比例占多少，S0/S1相同。例如：设置<code>-XX:SurvivorRatio=4，Eden:S0:S1=4:1:1</code>；</li><li><code>-XX:NewRatio</code> 配置年轻代与老年代在堆结构的占比，默认==-XX:NewRatio=2==，即新生代占1/3，老年代占2/3。例如：  -XX:NewRatio=4，就代表，新生代占1/5，老年代占4/5。newRatio值就是设置老年代的占比。</li><li><code>-XX:MaxTenuringThreshold</code> 设置垃圾最大年龄，默认值为15，==这个参数的值必须在0——15之间==。如果设置为0的话，表示年轻代对象不经过Survivor区，直接进入老年代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象在年轻代的存活时间，增加在年轻代即被回收的概率。</li></ul><h3 id="对象的引用"><a href="#对象的引用" class="headerlink" title="对象的引用"></a>对象的引用</h3><h5 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h5><p><img src="/img/image-20200711102446420.png" alt="强、软、弱、虚引用"></p><h5 id="强引用"><a href="#强引用" class="headerlink" title="强引用"></a>强引用</h5><blockquote><p>当内存不足时，JVM开始垃圾回收，对于强引用的对象，==就算是出现了OOM也不会对该对象进行回收==。</p><p>强引用是我们最常见的普通对象引用，只要还有强引用指向的一个对象，就能表明对象还“活着”，垃圾收集器不会碰这种对象。在JAVA中最常见的就是强引用，把一个对象赋给一个引用变量，这个引用变量就是一个强引用。当一个对象被强引用变量引用时，它处于可达状态，它是不可能被垃圾回收机制回收的。因此==强引用是造成JAVA内存泄露的主要原因之一==。</p><p>对于一个普通对象，如果没有其他的引用关系，只要超过了引用的作用域或者显示地将相应（强）引用赋值为Null，一般认为就是可以被垃圾回收的了（具体回收时机要看垃圾回收策略）</p></blockquote><h5 id="软引用"><a href="#软引用" class="headerlink" title="软引用"></a>软引用</h5><blockquote><p>软引用是一种相对强引用弱化了一些的引用，需要用<code>java.lang.ref.SoftReference</code>类来实现，可以让对象豁免一些垃圾回收机制。</p></blockquote><p>对于只有软引用的对象来说：</p><ul><li>当系统内存充足时 ，不会被回收；</li><li>当系统内存不足时，会被回收；</li></ul><p>软引用通常用在对内存敏感的程序中，比如高速缓存就有用到原因用，内存够用的时候就保留，不够用就回收！</p><h5 id="弱引用"><a href="#弱引用" class="headerlink" title="弱引用"></a>弱引用</h5><blockquote><p>弱引用需要用<code>java.lang.ref.WeakReference</code>类来实现，它比软引用的生存期更短</p></blockquote><p>对于只有弱引用的对象来说，只要垃圾回收机制一运行，不管JVM的内存空间足够，都会回收该对象占用的内存。</p><h5 id="软、弱引用适用场景"><a href="#软、弱引用适用场景" class="headerlink" title="软、弱引用适用场景"></a>软、弱引用适用场景</h5><p>假如有一个应用需要读取大量的本地图片：</p><ul><li>如果每次读取图片都从硬盘读取则会严重影响性能</li><li>如果一次性全部加载到内存中又可能造成内存泄露</li></ul><p>使用软引用的设计思路是：用一个HashMap来保存图片的路径和相应图片对象关联的软引用之间的映射关系，在内存不足时，JVM会自动回收这些缓存图片对象所占用的空间，从而有效避免了OOM的问题。</p><pre class=" language-java"><code class="language-java">Map<span class="token operator">&lt;</span>String ，SoftReference<span class="token operator">&lt;</span>Bitmap<span class="token operator">>></span> imageCache <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token operator">&lt;</span>String <span class="token punctuation">,</span> SoftReference<span class="token operator">&lt;</span>Bitmap<span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h5 id="虚引用"><a href="#虚引用" class="headerlink" title="虚引用"></a>虚引用</h5><blockquote><p>虚引用需要<code>java.lang.ref.PhantomReference</code>类来实现，与其他几种引用都不同，虚引用并不会决定对象的生命周期，==如果一个对象仅持有虚引用，那么它就和没有任何引用一样，在任何时候都可能被垃圾回收器回收==，它不能单独使用也不能通过它访问对象，虚引用必须和引用队列（ReferenceQueue）联合使用。</p></blockquote><p>虚引用的主要作用是跟踪对象被垃圾回收的状态，仅仅是提供了一种确保对象被finalize以后，做某些事情的机制。</p><p>PhantomReference的get方法总是返回null，因此无法访问对应的引用对象。其意义在于说明一个对象已经进入finalization阶段，可以被gc回收，用来实现比finalization机制更灵活的回收操作。</p><p>换句话说，设置虚引用关联的唯一目的，就是在这个对象被收集器回收的时候收到一个系统通知或者后续添加进一步处理。Java技术允许使用finalize()方法在垃圾收集器将对象从内存中清除出去之前作必要的清理工作。</p><h5 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h5><p>Java提供了四种应用类型，在垃圾回收的时候，都有各自的特点。</p><p>ReferenceQueue是用来配合引用工作的，没有ReferenceQueue一样可以运行。</p><p>创建引用的时候可以指定关联的队列，当GC释放对象时，会将引用加入到引用队列，如果程序发现某个虚引用已经被加入到引用队列，那么就可以在所引用的对象的内存被回收之前采取必要的行动，这相当于是一种通知机制。</p><p>当关联的引用队列中有数据的时候，意味着引用指向的堆内存中的对象被回收，通过这种方式，JVM允许我们在对象被销毁后，做一些我们自己想做的事。</p><img src="/img/image-20200711134708004.png" alt="四种引用回收特点" style="zoom:80%;"><h3 id="OOM"><a href="#OOM" class="headerlink" title="OOM"></a>OOM</h3><p>几种常见的错误</p><pre class=" language-properties"><code class="language-properties">java.lang.StackOverflowError<span class="token attr-name">java.lang.OutOfMemoryError</span><span class="token punctuation">:</span><span class="token attr-value">Java heap space</span><span class="token attr-name">java.lang.OutOfMemoryError</span><span class="token punctuation">:</span><span class="token attr-value">GC overhead limit exceeded</span><span class="token attr-name">java.lang.OutOfMemoryError</span><span class="token punctuation">:</span><span class="token attr-value">Direct buffer memory</span><span class="token attr-name">java.lang.OutOfMemoryError</span><span class="token punctuation">:</span><span class="token attr-value">unable to create new native thread</span><span class="token attr-name">java.lang.OutOfMemoryError</span><span class="token punctuation">:</span><span class="token attr-value">Metaspace</span></code></pre><p><img src="/img/image-20200711135828279.png" alt=""></p><h5 id="GC-overhead-limit-exceeded"><a href="#GC-overhead-limit-exceeded" class="headerlink" title="GC overhead limit exceeded"></a>GC overhead limit exceeded</h5><blockquote><p>GC回收时间过长时会抛出OutOfMemoryError。过长的定义是：超过98%的时间用来做GC并且回收了不到2%的堆内存，连续多次GC都只回收了不到2%的极端情况下才会抛出。</p><p>假如不抛出GC overhead limit ，那么GC清理的这么点内存很快会被在此填满，迫使GC再次执行，一直恶性循环，CPU的使用率一直是100%，然而GC却没有任何成果；</p></blockquote><h5 id="Direct-buffer-memory"><a href="#Direct-buffer-memory" class="headerlink" title="Direct buffer memory"></a>Direct buffer memory</h5><blockquote><p>写NIO程序经常使用ByteBuffer来读取或者写入数据，这是一种基于通道（Channel）与缓冲区（Buffer）的I/O方式，它可以使用Native函数库直接分配堆外内存，然后通过一个存储在Java堆里面的DirectByteBuffer对象作为这块内存的引用进行操作。这样能在场景中显著提高性能，因为避免了在Java堆和Native堆中来回复制数据。</p></blockquote><pre class=" language-java"><code class="language-java">ByteBuffer<span class="token punctuation">.</span><span class="token function">allocate</span><span class="token punctuation">(</span>capability<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">// 分配JVM堆内存，属于GC管辖范围，由于需要拷贝所以速度相对较慢</span>ByteBuffer<span class="token punctuation">.</span><span class="token function">allocateDirect</span><span class="token punctuation">(</span>capability<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//分配OS本地内存，不属于GC管辖范围，由于不需要拷贝速度相对较快</span></code></pre><p>如果不断分配本地内存，堆内存很少使用，那么JVM就不需要执行GC，DirectByteBuffer对象们就不会被回收，这时候堆内存充足，但本地内存可能已经是用光了，再次尝试分配本地内存就会出现OutOfMemoryError；</p><h5 id="unable-to-create-new-native-thread"><a href="#unable-to-create-new-native-thread" class="headerlink" title="unable to create new native thread"></a>unable to create new native thread</h5><blockquote><p>在高并发请求服务器时会产生，准确地讲此native thread 异常与对应的平台有关</p><p>原因：</p><ul><li>应用创建了太多的线程，超过了系统承载极限</li><li>服务器并不允许应用程序创建这么多线程，linux系统默认允许单个进程可以创建的线程数时1024个，如果应用创建的线程数，超出1024，就会报 `java.lang.OutOfMemoryError:unable to create new native thread</li></ul><p>解决办法：</p><ul><li>​    想办法降低应用程序创建的线程的数量，分析应用是否真的需要创建这么多线程，如果不是，改代码将线程数降到最低</li><li>对于有的应用，确实需要创建很多线程，远超过linux系统默认1024个线程的现只，可以通过修改linux服务器配置，扩大linux默认限制</li></ul></blockquote><h5 id="Metaspace"><a href="#Metaspace" class="headerlink" title="Metaspace"></a>Metaspace</h5><blockquote><p>Metaspace是方法区在中的实现，它与持久代最大的区别在于：Metaspace并不在虚拟机内存中而时使用本地内存。在Java8中，classe metadata（the virtual machines internal presentation of Java class），被存储在叫做Metaspace的native memory</p><p>永久代（Java8后被元空间Metaspace取代了）存在了以下信息：</p><ul><li>虚拟机加载的类信息</li><li>常量池</li><li>静态变量</li><li>即使编译后的代码</li></ul><p>模拟Metaspace空间溢出，我们向元空间不断生成类，即让类占据的空间超过Metaspace指定空间的大小</p></blockquote><h3 id="垃圾回收算法"><a href="#垃圾回收算法" class="headerlink" title="垃圾回收算法"></a>垃圾回收算法</h3><blockquote><p>GC算法（引用计数/复制/标记清除/标记整理）是内存回收的方法论，垃圾收集器是算法落地实现。</p><p>目前为止还没有完美的收集器出现，更没有万能的收集器，只是针对具体应用最合适的收集器，进行分代收集。</p></blockquote><p><img src="/img/image-20200712111054487.png" alt="四种主要的垃圾收集器"></p><h5 id="Serial"><a href="#Serial" class="headerlink" title="Serial"></a>Serial</h5><blockquote><p>串行垃圾回收器：它为单线程环境设计且只使用一个线程进行垃圾回收，会暂停所有的用户线程。所以不适合服务器环境。</p></blockquote><h5 id="Parallel"><a href="#Parallel" class="headerlink" title="Parallel"></a>Parallel</h5><blockquote><p>并行垃圾回收器：多个垃圾收集线程并行工作，此时用户线程是暂停的，是用于科学计算/大数据处理等弱交互场景。</p></blockquote><h5 id="CMS"><a href="#CMS" class="headerlink" title="CMS"></a>CMS</h5><blockquote><p>(ConcMarkSweep)并发垃圾回收器：用户线程和垃圾线程同时执行（不一定是并行，可能交替执行），不需要停顿用户线程，互联网公司多用它，适用于对响应时间有要求的场景。</p></blockquote><p><img src="/img/image-20200712112750333.png" alt=""></p><h5 id="G1"><a href="#G1" class="headerlink" title="G1"></a>G1</h5><blockquote><p>G1垃圾回收器将堆内存分割成不同的区域然后并发的对其进行垃圾回收。</p></blockquote><h5 id="面试题"><a href="#面试题" class="headerlink" title="面试题"></a>面试题</h5><blockquote><p>怎么查看服务器默认的垃圾收集器是哪个？</p></blockquote><pre class=" language-properties"><code class="language-properties"><span class="token attr-name">java</span> <span class="token attr-value">-XX:+PrintCommandLineFlags -version</span></code></pre><p><img src="/img/image-20200712114735195.png" alt="查看垃圾回收器"></p><blockquote><p>Java的GC回收类型主要有几种？</p></blockquote><p><code>UserSerialGC、UseParallelGC、UseCOncMarkSweepGC、UserParNewGC、UseSerrialOldGC(弃)、UseParallelOldGC、UseG1GC</code></p><blockquote><p>生产上如何配置垃圾收集器的？谈谈你对垃圾收集器的理解？</p></blockquote><p><img src="/img/image-20200712145342210.png" alt="垃圾收集器"></p><p><img src="/img/image-20200712145455844.png" alt=""></p><h3 id="七大垃圾回收器"><a href="#七大垃圾回收器" class="headerlink" title="七大垃圾回收器"></a>七大垃圾回收器</h3><p><code>UserSerialGC、UseParallelGC、UseCOncMarkSweepGC、UserParNewGC、UseSerrialOldGC(弃)、UseParallelOldGC、UseG1GC</code></p><h5 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h5><blockquote><ul><li>DefNew : Default New Generation</li><li>Tenured : Old</li><li>ParNew : Parallel New Generation</li><li>PsYoungGen : Parallel Scavenge</li><li>ParOldGen : Parallel Old Generation</li></ul></blockquote><h5 id="Server-Client模式"><a href="#Server-Client模式" class="headerlink" title="Server/Client模式"></a>Server/Client模式</h5><ul><li>操作系统：<ul><li>32位windows操作系统，无论硬件如何都默认使用Client的JVM模式</li><li>32位其它操作系统，2G内存同时有2个CPU以上用Server模式，低于该配置用Client模式</li><li>==64位只用Server模式==</li></ul></li></ul><h5 id="新生代"><a href="#新生代" class="headerlink" title="新生代"></a>新生代</h5><ul><li>串行GC（Serial）/（Serial Copying）<ul><li>一个单线程的收集器，在进行垃圾收集时，必须暂停其它所有的工作进程直到它收集结束</li><li><img src="/img/image-20200712151231301.png" alt="串行收集器"></li><li>串行收集器是最古老，最稳定以及效率高的收集器，只使用一个线程回收但其在进行垃圾收集过程中可能会产生较长的停顿（”Stop The World”状态）。虽然在收集垃圾过程中需要暂停所有其它的工作线程，但它简单有效，对于限定单个CPU环境来说，没有线程交互的开销可以获得最高的单线程垃圾收集效率，因此Serial垃圾收集器依然是Java虚拟机在Client模式下默认的新生代垃圾收集器。</li><li>==参数为<code>-XX:+UseSerialGC</code>，开启后会使用Serial（Young区）+Serial Old（Old区）的收集器组合。如此，新生代和老年代都会使用串行回收机制，新生代使用复制算法，老年代使用标记-整理算法==</li></ul></li><li>并行GC（ParNew ，New表示只是新生代使用并行）<ul><li>使用多线程进行垃圾回收，在垃圾收集时，会Stop-The-World暂停其他所有工作线程直到它收集结束</li><li><img src="/img/image-20200712153529846.png" alt="并行收集器"></li><li>ParNew收集器其实就是Serial收集器新生代的并行多线程版本，最常见的应用场景是配合老年代的CMSGC工作，其余的行为和Serial收集器完全一样，ParNew垃圾收集器在垃圾收集过程中同样也要暂停所有其他的工作线程。它是很多Java虚拟机运行在Server模式下新生代的默认垃圾收集器。</li><li>常用对应参数：<code>-XX:UseParNewGC</code>启用ParNew收集器，之影响新生代的收集，不影响老年代。开启上述参数后，会使用：==ParNew（Young区）+SerialOld（Old区）的收集器组合，新生代使用复制算法，老年代采用标记-整理算法==。</li><li>ParNew+Tenured这样的搭配，Java已经不再推荐</li></ul></li><li>并行回收GC（Parallel）/（Parallel Scavenge）<ul><li>Parallel Scavenge 收集器类似ParNew也是一个新生代垃圾收集器，使用复制算法，也是一个并行的多线程的垃圾收集器，俗称吞吐量优先收集器。总结为：串行收集器在新生代和老年代的并行化。</li><li><img src="/img/image-20200712184740021.png" alt="并行回收收集器"></li><li>可控的吞吐量：==Thoughput=运行用户代码时间/（运行用户代码时间+垃圾收集时间），即比如程序运行100秒，垃圾收集时间1秒，吞吐量就是99%==。高吞吐量意味着高效利用CPU的时间，他多用于在后台运算而不需要太多交互的任务。</li><li>==自适应调节策略：==虚拟机会根据当前系统的运行情况收集性能监控信息，动态调整这些参数以提供最合适的停顿时间（-XX:MaxGCPauseMillis）或最大吞吐量。也是ParallelScavenge收集器与ParNew收集器的一个重要区别。</li><li>常用的JVM参数：<code>-XX:+UseParallelGC 或 -XX:+UseParallelOldGC</code>（可互相激活）使用Parallel Scanvenge收集器</li><li>-XX:ParallelGCThreads=N，表示启动了多少个GC线程</li></ul></li></ul><h5 id="老年代"><a href="#老年代" class="headerlink" title="老年代"></a>老年代</h5><ul><li><p>Parallel Old </p><ul><li>Parallel Old 收集器是ParallelScavenge的老年代版本，使用多线程的标记=整理算法，Parallel Old收集器在JDK1.6才开始提供。在JDK1.6之前，新生代使用ParallelScanvenge收集器只能搭配老年代的SerialOld收集器，只能保证新生代的吞吐量优先，无法保证整体的吞吐量。</li><li>Parallel Old正是为了在老年代同样==提供吞吐量优先的垃圾收集器==，如果系统对吞吐量要求比较高，JDK1.8后可以优先考虑新生代ParallelScanvenge+老年代ParallelOld 收集器搭配策略。</li><li>JVM参数：<code>-XX:UseParallelOldGC</code></li></ul></li><li><p>CMS（并发标记清除GC）</p><ul><li><p>Concurrent Mark Sweep：是一种以获取最短停顿时间为目标的收集器，适合应用在互联网站或B/S系统的服务器上，这类应用尤其重视服务器的响应速度。CMS非常适合堆内存大、CPU核多的服务器端应用，也是G1出现之前大型应用的首选收集器。</p></li><li><p><img src="/img/image-20200712192938705.png" alt="并发标记清除收集器"></p></li><li><p>并发收集停顿，并发指的是与用户线程一起执行</p></li><li><p>开启参数：<code>-XX:+UseConcMarkSweepGC</code>开启该参数后会自动将<code>-XX:+UseParNewGC</code>打开，使用ParNew（Young区）+CMS（Old区）+Serial Old的收集器组合，Serial Old将作为CMS出错后的后备收集器</p></li><li><p>CMS的四个过程</p><ul><li><p>初始标记（CMS initial mark：只标记GC Roots能直接关联的对象，速度很快，仍然需要暂停所有工作线程；</p></li><li><p>并发标记（CMS concurrent mark）和用户线程一起执行，进行GC Roots跟踪过程，和用户线程一起工作，不需要暂停工作线程，主要标记过程，标记全部对象；</p></li><li><p>重新标记（CMS remark）为了修正在并发标记期间，因用户程序继续运行 而导致标记产生变动的那一部分对象的标记记录，仍然需要暂停所有的工作线程。由于并发标记时，用户线程依然进行，因此在正式清理前，再做修正；</p></li><li><p>并发清除（CMS concurrent Sweep）和用户线程一起执行，清除GC Roots不可达对象，和用户线程一起工作，不需要暂停工作线程，基于标记结果，直接清理对象。由于耗时最长的并发标记和并发清除过程中，垃圾回收线程和用户工作线程并发工作，基本上CMS收集器的内存回收和工作线程是一起并发执行的；</p></li><li><img src="/img/image-20200712195014201.png" alt="CMS算法简要流程" style="zoom:80%;"></li><li><p>优点：并发收集停顿低</p></li><li><p>缺点：</p><ul><li><p>并发执行，堆CPU资源压力比较大,CMS在收集与应用线程会同时增加对堆内存的占用，也就是说，CMS必须在老年代堆内存用尽之前完成垃圾回收，否则CMS回收失败，将触发担保机制，串行老年代收集器将会以STW的方式进行一次GC，从而造成较大的停顿时间；</p></li><li><p>采用的标记清除算法无法整理空间碎片，老年代空间会随着应用时长被逐步耗尽，最后不得不通过担保机制堆内存进行压缩。CMS也提供了参数<code>-XX:CMSFullGCsBeForeCompaction</code>（默认0，即每次都进行内存整理）来指定多少次CMS收集之后，进行一次压缩的Full GC。</p></li></ul></li></ul></li></ul></li></ul><h5 id="组合选择"><a href="#组合选择" class="headerlink" title="组合选择"></a>组合选择</h5><ul><li>单核CPU或小内存，单机程序：-XX:+UseSerialGC</li><li>多核CPU，需要最大吞吐量，如后台计算型应用：-XX:+UseParallelGC 或 -XX:+UseParallelOldGC</li><li>多核CPU，追求低停顿时间，需要快速响应（如互联网）：-XX:+UseConcMarkSweepGC或-XX:+ParNewGC</li></ul><p><img src="/img/image-20200712203147755.png" alt=""></p><h5 id="G1-1"><a href="#G1-1" class="headerlink" title="G1"></a>G1</h5><p><strong>G1之前的垃圾收集器特点</strong></p><ul><li>年轻代和老年代是各自独立且连续的内存块；</li><li>年轻代收集使用单Eden+S0+S1进行复制算法；</li><li>老年代收集必须扫描整个老年代区域；</li><li>都是尽可能少而快速地执行GC为设计原则；</li></ul><p><strong>G1垃圾收集器</strong></p><ul><li>G1是一种服务器端的垃圾收集器，应用在多处理器和大容量内存环境中，在实现高吞吐量的同时，尽可能的满足垃圾收集暂停时间的要求，另外，它还具有以下特性：<ul><li>像CMS收集器一样，能与应用程序线程并发执行；</li><li>整理空闲时间更快；</li><li>需要更多的时间来预测GC停顿时间；</li><li>不希望牺牲大量的吞吐性能；</li><li>不需要更大的Java Heap；</li></ul></li><li>G1收集器的设计目标是取代CMS收集器，它同CMS相比，在以下方面表现得更出色：<ul><li>G1是一个有整理内存过程的垃圾收集器，不会产生很多内存碎片；</li><li>G1的STW更可控，G1在停顿时间上添加了预测机制，用户可以指定期望停顿时间；</li></ul></li><li>G1主要是Eden、Survivor和Tenured等内存区域不再是连续的了，而时变成了一个个大小一样的region，每个region从1M到32M不等，一个region有可能属于Eden、Survivor或Tenured内存区域。</li><li>==虽然整个内存区混在一起了，但其本身依然在小范围内要进行年轻代和老年代的区分==，但他们不再是物理隔离的，而时一部分region的集合且region不需要是连续的，每个分区都可能岁G1的运行在不同代之间前后切换。</li><li>G1整体上采用标记-整理算法，局部是通过复制算法，不会产生内存碎片。</li></ul><p>​    <strong>Region区域化垃圾收集器</strong></p><ul><li>区域化内存划片Region，整体编为了一些列不连续的内存区域，避免了全内存的GC操作。</li><li>核心思想是将整个对内存区域分成大小相同的子区域（Region），在JVM启动时会自动设置这些子区域的大小。</li><li>在堆的使用上，==G1不要求对象存储一定在物理上是连续的，只需要在逻辑上连续即可==，每个region不会固定的为某个代服务，可以按需在年轻代和老年代之间切换。</li><li>启动时可以通过参数<code>-XX:G1HeapRegionSize=n</code>可指定分区大小（1MB~32MB，且必须是2的幂），默认将整堆划分为2048个分区。即能够支持最大内存为：32MB*2048=65536MB=64G内存。</li></ul><p><img src="/img/image-20200713143103734.png" alt="Region区域化垃圾收集器"></p><ul><li>在G1中，新生代的垃圾收集依然采用暂停所有应用线程的方式，将存活对象拷贝到老年代或者Survivor空间。</li><li>G1收集器将对象从一个区域复制到另外一个区域，完成了清理工作。这就意味着，在正常的处理过程中，G1完成了堆（部分）的压缩，解决了CMS内存碎片化问题。</li><li>在G1中，还有一种特殊的区域，==Humongous（巨大的）==区域，如果一个对象占用的空间尝过了分区容量50%以上，G1收集器就认为这是一个巨型对象。这些==巨型对象默认直接分配在老年代==，但是如果它是一个短期存在的巨型对象，就会对垃圾收集器造成负面影响。为了解决这个问题，就设定如果一个H区装不下一个巨型对象，那么G1会寻找连续的H分区来存储，为了能找到连续的H区，有时候不得不启动Full GC。</li></ul><p><strong>回收步骤</strong></p><p>针对Edne区进行收集，Eden区耗尽后会被触发，主要是小区域收集+形成连续的内存块，避免内存碎块。</p><ul><li>Eden区的数据移动到Survivor区，假如出现Survivor区空间不够，Eden区数据会晋升到Old区；</li><li>Survivor区的数据移动到新的Survivor区，数据晋升到Old；</li><li>最后Eden区收拾干净了，GC结束，用户的应用线程继续执行；</li><li><img src="/img/image-20200713145035233.png" alt="回收步骤（1）"></li><li><img src="/img/image-20200713145243381.png" alt="回收步骤（2）"></li></ul><p><strong>四步过程</strong></p><ul><li>初始标记：只标记GC Roots能直接关联到的对象；</li><li>并发标记：进行GC Roots Tracing过程；</li><li>最终标记：修正并发标记期间，因程序运行导致标记发生变化的那一部分对象；</li><li>筛选回收：根据时间来进行价值最大化地回收；</li><li><img src="/img/image-20200713145656211.png" alt="G1回收流程"></li></ul><p><img src="/img/image-20200713150422809.png" alt="G1常用配置参数"></p><h3 id="Linux的一些命令"><a href="#Linux的一些命令" class="headerlink" title="Linux的一些命令"></a>Linux的一些命令</h3><h5 id="性能评估"><a href="#性能评估" class="headerlink" title="性能评估"></a>性能评估</h5><ul><li>整机查看：top ；系统性能命令的精简版：uptime；</li><li>CPU：vmstat<ul><li><img src="/img/image-20200714094751800.png" alt=""></li><li><code>vmstat -n 2 3</code> ：参数一为采样的时间间隔（秒），参数二为采样的次数；</li><li><code>procs</code>中 r 表示 运行和等待CPU时间片的进程数，原则上1核的CPU的运行队列不要超过2，整个系统的运行队列不能超过总核数的2倍，否则代表系统压力过大。b 表示等待资源的进程数，比如正在等待磁盘或网络I/O等；</li><li><code>CPU</code> 中 <code>us</code> 表示用户进程消耗CPU时间百分比，us值越高，用户进程消耗CPU时间越多，如果长期大于50%，需要优化程序。<code>sy</code>表示内核进程消耗的CPU时间百分比。 <code>us + sy</code>参考值为80%，如果大于这个值，说明可能存在CPU不足的情况。<code>id</code>表示处于空闲的CPU百分比。<code>wa</code>表示系统等待IO的CPU时间百分比。<code>st</code>来自于一个虚拟机偷取的CPU时间的百分比；</li><li>查看所有CPU核信息：<code>mpstat -P ALL 2</code>；</li><li>每个进程使用CPU的用量分解信息：<code>pidstat -u 1 -p 进程编号</code>； </li></ul></li><li>内存<ul><li><code>free -m</code> （m表示单位为MB），应程序可用内存/系统物理内存 &gt;70%时 内存充足。 &lt;20%时，内存不足，需要加内存；</li><li>查看额外参数：pidstat -p 进程号 -r 采样间隔秒数；</li></ul></li><li>硬盘：<code>df -h</code>  查看磁盘剩余空间。</li><li>磁盘IO：<code>iostat</code><ul><li>磁盘性能评估：<code>iostat -xdk 2 3</code></li><li>查看额外：<code>pidstst -d 采样间隔时间 -p 进程号</code></li></ul></li><li>网络IO：<code>ifstat</code><ul><li>默认本地没有，下载ifstat</li><li><code>ifstat 1</code></li></ul></li></ul><h1 id="面试问题："><a href="#面试问题：" class="headerlink" title="面试问题："></a>面试问题：</h1><h3 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h3><ul><li>HashSet的底层是什么？<ul><li>HashMap</li></ul></li><li>那为什么HashSet的add方法参数是一个，而HashMap有两个？<ul><li>HashSet中的add方法的值是HashMap中Put方法的Key；而Value 是一个Object类型的常量，是恒定的</li><li><img src="/img/image-20200622160633079.png" alt="HashSet的add方法"></li></ul></li></ul><h3 id="Synchronized和Lock"><a href="#Synchronized和Lock" class="headerlink" title="Synchronized和Lock"></a>Synchronized和Lock</h3><p>题目：Synchronized和Lock有什么区别？用新的Lock有什么好处？</p><h5 id="1-原始构成"><a href="#1-原始构成" class="headerlink" title="1.原始构成"></a>1.原始构成</h5><ul><li>Synchronized是关键字属于JVM层面，<ul><li>monitorenter（底层是通过monitor对象来完成的，其实wait/notify等方法也依赖于monitor对象只有在同步方法块中才能嗲用wait/notify等方法）</li><li>monitorexit</li></ul></li><li>Lock是具体类（java.util.concurrent.locks.lock）是api层面的锁</li></ul><h5 id="2-使用方法"><a href="#2-使用方法" class="headerlink" title="2.使用方法"></a>2.使用方法</h5><ul><li>Synchronized不需要用户手动释放锁，当Synchronized代码执行完后系统会自动让线程释放对锁的占用</li><li>ReentrantLock需要用户手动释放锁，若没有主动释放锁，可能会导致死锁现象，需要配合<code>lock()和unlock()</code>方法配合<code>try/finally</code>语句块来完成</li></ul><h5 id="3-等待是否可中断"><a href="#3-等待是否可中断" class="headerlink" title="3.等待是否可中断"></a>3.等待是否可中断</h5><ul><li>Synchronized不可中断，除非抛出异常或正常执行完成</li><li>ReentrantLock可中断<ul><li>设置超时方法    <code>tryLock(Long timeout, TimeUnit unit)</code></li><li><code>lockInterruptibly()</code>放代码块中，调用<code>interrupt()</code>方法可中断</li></ul></li></ul><h5 id="4-加锁是否公平"><a href="#4-加锁是否公平" class="headerlink" title="4.加锁是否公平"></a>4.加锁是否公平</h5><ul><li>Synchronized非公平锁</li><li>ReentrantLock两者都可以，构造方法可以传入boolean值，true为公平锁，false为非公平锁（默认）</li></ul><h5 id="5-锁绑定多个条件Condition"><a href="#5-锁绑定多个条件Condition" class="headerlink" title="5.锁绑定多个条件Condition"></a>5.锁绑定多个条件Condition</h5><ul><li>Synchronized没有</li><li>ReentrantLock用来实现分组唤醒需要唤醒的线程们，可以精确唤醒，而不是像Synchronized要么随机唤醒一个线程要么唤醒全部线程</li></ul><h5 id="6-编程题目"><a href="#6-编程题目" class="headerlink" title="6.编程题目"></a>6.编程题目</h5><p>题目：多线程之间按顺序调用，实现A – &gt;B – &gt;C三个线程启动，要求如下：</p><p>A打印5次，B打印10次，C打印15次，紧接着A打印5次，B打印10次，C打印15次，重复循环10轮！</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ShareSource</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 公共资源类</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Lock lock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition c1 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition c2 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Condition c3 <span class="token operator">=</span> lock<span class="token punctuation">.</span><span class="token function">newCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                  c1<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 打印第 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"  次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            c2<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c2<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 打印第 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"  次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>            c3<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print15</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>number <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                c3<span class="token punctuation">.</span><span class="token function">await</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">15</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>Thread<span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 打印第 "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">"  次！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            c1<span class="token punctuation">.</span><span class="token function">signal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>            lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SynAndReentrantLock</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ShareSource shareSource <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ShareSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareSource<span class="token punctuation">.</span><span class="token function">print5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"AAA"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareSource<span class="token punctuation">.</span><span class="token function">print10</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"BBB"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                shareSource<span class="token punctuation">.</span><span class="token function">print15</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token string">"CCC"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="CPU占用过高问题"><a href="#CPU占用过高问题" class="headerlink" title="CPU占用过高问题"></a>CPU占用过高问题</h3><p>假如生产环境出现CPU占用过高，如何分析？</p><ul><li>结合linux核JDK命令一块分析</li><li>1.先用top命令找出CPU占比最高的</li><li>ps -ef或者jps进一步定位，得知是一个怎么样的一个后台程序</li><li>定位到具体的线程或者代码<ul><li><code>ps -mp 进程 -o THREAD，tid，time</code></li><li>-m 显示所有的线程</li><li>-p pid 进程使用CPU的时间</li><li>-o 该参数后是用户自定义格式</li></ul></li><li>将需要的线程ID转换为16进制格式（英文小写格式）<ul><li><code>printf "%x\n" 有问题的线程id</code></li></ul></li><li>jstack 进程id | grep tid（16进制线程ID小写英文）</li></ul><h3 id="github"><a href="#github" class="headerlink" title="github"></a>github</h3><p><strong>常用词含义</strong></p><ul><li>watch：会持续收到该项目的动态</li><li>fork：复制某个项目到自己的Github仓库中</li><li>star：点赞</li><li>clone：将项目下载至本地</li><li>follow：关注你兴趣的作者，会收到他们的动态</li></ul><p><strong>限制搜索范围</strong></p><p><strong>in</strong></p><ul><li>公式：xxx关键词 in:name 或 description 或 readme</li><li><code>xxx in:name</code>  项目名包含xxx的</li><li><code>xxx in:description</code> 项目描述包含xxx的</li><li><code>xxx in:readme</code>项目readme文件中包含xxx的</li><li>组合使用：<code>xxx in:name,description,readme</code></li></ul><p><strong>根据start、fork</strong></p><ul><li>公式： xxx关键词 starts/forks 通配符（:&gt; 或 :&gt;=）,区间范围数字 数字1..数字2；</li><li>查找statrs数大于1000的xxx项目 ：<code>xxx starts:&gt;1000</code>；</li><li>组合使用：查找fork在100到200之间并且starts数在80到100之间的springboot项目<code>springboot forks:100..200 starts:80..100</code>；</li></ul><p><strong>awesome加强搜索</strong></p><ul><li>公式：awesome  关键字 ，awesome系列一般是用来收集学习、工具、书籍类相关的项目；</li></ul><p><strong>高亮显示某一行代码</strong></p><ul><li>1行：地址后面紧跟<code>#L</code>数字；</li><li>多行：地址后面紧跟<code>#L数字—L数字2</code>；</li></ul><p><strong>项目内搜索</strong></p><ul><li>按下字母t</li><li><a href="https://docs.github.com/en/github/getting-started-with-github/keyboard-shortcuts" target="_blank" rel="noopener">更多快捷键</a></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo框架搭建个人博客</title>
      <link href="/2019/12/03/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/"/>
      <url>/2019/12/03/shi-yong-hexo-kuang-jia-da-jian-ge-ren-bo-ke/</url>
      
        <content type="html"><![CDATA[<blockquote><p>我不知将去何方，但我已经在路上。</p><footer><strong>宫崎骏</strong><cite>《千与千寻》</cite></footer></blockquote><hr><h2 id="一、安装node-js"><a href="#一、安装node-js" class="headerlink" title="一、安装node.js"></a>一、安装node.js</h2><ol><li>在官网：<a href="https://nodejs.org/en/" target="_blank" rel="noopener">https://nodejs.org/en/</a> 下载对应的版本<img src="/img/node_js.png" width="50%"></li><li>以管理员身份打开cmd</li><li>node -v 查看版本</li><li>npm -v 查看版本（包管理器）</li><li>使用npm下载cnpm  npm install -g cnmp –registry=<a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a><br>（由于国外的原比较慢，这里使用cnpm淘宝的源）</li></ol><h2 id="二、使用cnpm安装hexo-cli框架"><a href="#二、使用cnpm安装hexo-cli框架" class="headerlink" title="二、使用cnpm安装hexo-cli框架"></a>二、使用cnpm安装hexo-cli框架</h2><ol><li>以管理员身份打开cmd，输入语句：cnpm install -g hexo-cli</li><li>创建一个blog文件夹，并进入这个文件</li><li>使用 hexo init 语句生成博客框架</li><li>启动博客 hexo server，本地4000端口启动，在浏览器输入：localhost:4000<img src="/img/hexo_server.png" width="50%"></li></ol><h2 id="三、博客编辑"><a href="#三、博客编辑" class="headerlink" title="三、博客编辑"></a>三、博客编辑</h2><ol><li>新建博客  输入语句：hexo new“博客标题名”</li><li>进入新建博客文件夹，编辑博客</li><li>退回blog目录，hexo clean 清理缓存， hexo g 生成代码</li></ol><h2 id="四、将博客部署到GitHub上公开使用"><a href="#四、将博客部署到GitHub上公开使用" class="headerlink" title="四、将博客部署到GitHub上公开使用"></a>四、将博客部署到GitHub上公开使用</h2><ol><li>登录GitHub账号，新建一个仓库  new repository</li><li>在blog目录下装一个git部署的插件，输入语句：cnpm install hexo-deployer-git –save</li><li>设置 _config.yml文件：<img src="/img/config01.png" width="50%"></li><li>部署到远端，输入语句：hexo d</li><li>部署后，在网页搜索对应url 即可查看博客</li></ol><h2 id="五、更换博客主题"><a href="#五、更换博客主题" class="headerlink" title="五、更换博客主题"></a>五、更换博客主题</h2><p><em>首先需要在：<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a> 下载安装git</em></p><ol><li>克隆想要的hexo主题<ul><li>cmd输入语句：git clone 主题地址 themes/主题名，将主题克隆到themes目录下</li></ul></li><li>配置主题，修改_config.yml文件，将里面的theme值改为克隆的主题名</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>兄弟连linux笔记</title>
      <link href="/2018/09/30/linux-xiong-di-lian-bi-ji/"/>
      <url>/2018/09/30/linux-xiong-di-lian-bi-ji/</url>
      
        <content type="html"><![CDATA[<h3 id="一、各目录及命令的作用"><a href="#一、各目录及命令的作用" class="headerlink" title="一、各目录及命令的作用"></a>一、各目录及命令的作用</h3><p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200316123415050.png" alt="image-20200316123415050"></p><p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200316124109224.png" alt="image-20200316124109224"></p><p><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200316124828186.png" alt="image-20200316124828186"></p><p>服务器注意事项：</p><p>远程服务器不允许关机，只能重启</p><p>重启时应该先关闭服务</p><p>不要在服务器访问高峰时运行高负载命令</p><p>远程配置防火墙时不要把自己踢出服务器</p><p>二、命令</p><p><code>mkdir -p</code> 递归创建目录</p><p><code>cp -r</code> 复制目录</p><p><code>cp -p</code> 保留文件属性复制</p><h5 id="查看文件"><a href="#查看文件" class="headerlink" title="查看文件"></a>查看文件</h5><p><code>cat -n 文件名</code> 显示行号</p><p><code>tac 文件名</code> 倒序显示内容</p><p><code>more 文件名</code> 分页显示内容       <code>space/f</code> 翻页、<code>Enter</code> 换行、<code>q/Q</code> 退出</p><p><code>less 文件名</code>  :top:向上一行  :arrow_down:向下一行、<code>pgup</code> 向上一页 <code>pgdn</code> 向下一页、<code>/+关键词</code> 搜索关键词</p><p><code>head -n 文件名</code> 显示文件前n行</p><p><code>tail -n 文件名</code> 显示文件后n行</p><p><code>tail -f 文件名</code> 动态显示文件末尾内容</p><h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p><code>ln -s [原文件] [目标文件]</code>  创建软连接-&gt;箭头指向原文件    无-s为硬链接，与原文件同步更新</p><p><code>可通过ls -i 查询两个文件的i节点，若相同则为硬链接</code> 硬链接不能跨分区，不能针对目录使用</p><h5 id="权限管理"><a href="#权限管理" class="headerlink" title="权限管理"></a>权限管理</h5><pre><code>chmod [{ugoa}  {+-=}  {rwx}]  [文件或目录]      [mode=421] [文件或目录]      -R 递归修改</code></pre><table><thead><tr><th align="center">代表字符</th><th align="center">权限</th><th align="center">对文件的含义</th><th align="center">对目录的含义</th></tr></thead><tbody><tr><td align="center">r</td><td align="center">读权限</td><td align="center">可以查看文件内容</td><td align="center">可以列出目录中的内容</td></tr><tr><td align="center">w</td><td align="center">写权限</td><td align="center">可以修改文件内容</td><td align="center">可以在目录中创建、删除文件</td></tr><tr><td align="center">x</td><td align="center">执行权限</td><td align="center">可以执行文件</td><td align="center">可以进入目录</td></tr></tbody></table><pre><code>chown [用户]  [文件或目录]  改变文件或目录的所有者chgrp [用户]  [文件或目录]  改变文件或目录的所属组umask [-S] 以rwx显示新建文件缺省权限</code></pre><h5 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h5><pre><code>find [搜索范围] [匹配条件]find [搜索范围] -name [文件名]  按名称查找，可以将名称前后加‘*’模糊查询，使用-iname不区分大小写；find [搜索范围] -size      [+/-文件大小]   按大小查找，+大于，-小于，不写为等于find [搜索范围] -user/group [用户名/所属组]  根据某用户或某所属组下的文件find [搜索范围] -cmin/amin/mmin -n 查找n分钟内被修改过属性/访问时间/内容的文件find [搜索范围] -name [文件名] -exec/ok 命令 {}\; 对搜索结果执行操作find [搜索范围] -inum [文件名] 按i节点查找快速查找 /usr/bin/locate       updatedb 更新locate [文件名]  在文件资料库中查找文件locate  -i [文件名] 不区分大小写which [命令]  文件搜索命令，搜索命令所在目录及别名信息whereis [命令]  文件搜索命令，搜索命令所在目录及帮助文档路径grep -iv [指定字串] [文件] 在文件中搜寻字串匹配的行并输出，-i不区分大小写，-v排除指定字串</code></pre><h5 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h5><pre><code>man [命令]/[配置文件名]  查看帮助信息   1命令的帮助  5配置的帮助whatis [命令]  查看命令简短的介绍信息apropos [命令]  查看配置文件简短的介绍信息[命令] --help   显示命令常见选项介绍help [Shell内置命令]   获取Shell内置命令的帮助信息</code></pre><h5 id="用户管理命令"><a href="#用户管理命令" class="headerlink" title="用户管理命令"></a>用户管理命令</h5><pre><code>useradd 用户名 添加新用户who 查看登录用户信息    tty本地终端   pts远程终端w 查看登录用户详细信息 </code></pre><h5 id="压缩解压命令"><a href="#压缩解压命令" class="headerlink" title="压缩解压命令"></a>压缩解压命令</h5><pre><code>gzip [文件]   压缩文件为.gz格式   只能压缩文件，不能压缩目录，且不保留原文件gunzip [压缩文件]   解压缩为.gz格式的文件tar 选项[-zcf] [压缩后的文件名] [被压缩目录名]   打包目录； -zcf打包并压缩为 [文件名.tar.gz]    -c 打包    -v 显示详细信息    -f 指定文件名    -z 打包同时压缩tar -x 解包    -v 显示详细信息    -f 指定解压文件    -z 解压缩zip 选项[-r] [压缩文件后文件名] [文件或目录]     -r 压缩目录， 源文件保留unzip [压缩文件]  解压.zip的压缩文件bzip2 选项[-k] [文件] -k 产生压缩文件后保留原文件  压缩文件后缀格式为.bz2tar 选项[-cjf] [压缩后的文件名] [被压缩目录名]  打包并压缩为.tar.bz2bunzip2 -k [压缩文件名]  解压   -k 解压并保留原文件tar [-xjf] [压缩文件名.tar.bz2]  解压被压缩的目录</code></pre><h5 id="网络命令"><a href="#网络命令" class="headerlink" title="网络命令"></a>网络命令</h5><pre><code>write &lt;用户名&gt;    给用户发信息，以Ctrl+D保存结束    Ctrl+退格键 ，删除文字，wall [message]  发广播信息ping 选项  IP地址    -c 指定发送次数  测试网络连通性ifconfig                 查看网卡信息ifconfig 网卡名称 IP地址   设置网卡信息mail [用户名]        查看发送电子邮件last                 列出目前与过去登入系统的用户信息lastlog                检查某特定用户上次登录的时间lastlog -u [uid]traceroute           显示数据包到主机间的路径netstat [选项]       显示网络相关信息        -t：tcp协议        -u：udp协议        -l：监听        -r：路由        -n：显示IP地址和端口号netstat -tlun        查看本机监听的端口netstat -an            查看本机所有的网络连接netstat -rn            查看本机路由表setup  配置网络mount [-t 文件系统] 设备文件名 挂载点范例：# mount -t iso9660 /dev/sr0 mnt/cdrom挂载：找到这个硬件，给它分配一个文件名，再给它找一个盘符（目录），然后把设备文件名和盘符连接起来unmont /dev/sro 卸载</code></pre><h5 id="关机重启命令"><a href="#关机重启命令" class="headerlink" title="关机重启命令"></a>关机重启命令</h5><pre><code>shutdown [选项] 时间        -c    取消前一个关机命令        -h     关机        -r    重启其他关机命令：    halt    poweroff    init 0其他重启命令：    reboot    init 6</code></pre><h5 id="系统运行级别"><a href="#系统运行级别" class="headerlink" title="系统运行级别"></a>系统运行级别</h5><pre><code>init 0        关机init 1        单用户init 2        不完全多用户，不含NFS服务init 3        完全多用户init 4        未分配init 5        图形界面init 6        重启runlevel    查询系统运行级别logout        退出登录命令</code></pre><h5 id="Vim常用操作"><a href="#Vim常用操作" class="headerlink" title="Vim常用操作"></a>Vim常用操作</h5><p>定位命令</p><pre><code>:set nu             设置行号:set nonu        取消行号gg                到第一行G                到最后一行nG                到第n行:n                到第n行$                移至行尾0                移至行首</code></pre><p>删除命令</p><pre><code>x                删除光标所在处字符nx                删除光标所在处后n个字符dd                剪切光标所在行，ndd删除n行dG                删除光标所在行到文件末尾内容D                删除光标所在处到行尾内容:n1,n2d            删除指定范围的行</code></pre><p>复制和剪切命令</p><pre><code>yy                 复制当前行nyy                复制当前行一下n行ndd                剪切当前行一下n行p/P                粘贴在当前光标所在行下/行上</code></pre><p>替换和取消命令</p><pre><code>r                取代光标所在处字符R                从光标所在处开始替换字符，按Esc结束u                取消上一步操作</code></pre><p>搜索和搜索替换</p><pre><code>/string            搜索指定字符串 忽略大小写：set icn                搜索指定字符串的下一个出现位置:/%s/old/new/g    全文替换指定字符串:n1,n2s/old/new/g    在一定范围内替换指定字符串</code></pre><img src="D:\blog\source\_posts\img\image-20200319150639221.png" alt="image-20200319150639221" style="zoom:80%;"> <img src="D:\blog\source\_posts\img\image-20200319151139186.png" alt="image-20200319151139186" style="zoom:80%;"><h3 id="二、软件包管理"><a href="#二、软件包管理" class="headerlink" title="二、软件包管理"></a>二、软件包管理</h3><p>rpm安装</p><p><img src="D:\blog\source\_posts\img\image-20200319203830318.png" alt="image-20200319203830318" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319204357273.png" alt="image-20200319204357273"></p><p><img src="D:\blog\source\_posts\img\image-20200319204423904.png" alt="image-20200319204423904" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319204520945.png" alt="image-20200319204520945"></p><p><img src="D:\blog\source\_posts\img\image-20200319204542497.png" alt="image-20200319204542497" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319204729811.png" alt="image-20200319204729811"><img src="D:\blog\source\_posts\img\image-20200319204542497.png" alt="image-20200319204542497" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319204729811.png" alt="image-20200319204729811"></p><p><img src="D:\blog\source\_posts\img\image-20200319205021348.png" alt="image-20200319205021348" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319205248315.png" alt="image-20200319205248315"></p><p><img src="D:\blog\source\_posts\img\image-20200319205021348.png" alt="image-20200319205021348" style="zoom:80%;"><img src="D:%5Cblog%5Csource_posts%5Cimg%5Cimage-20200319205248315.png" alt="image-20200319205248315"></p><img src="D:\blog\source\_posts\img\image-20200319205648887.png" alt="image-20200319205648887" style="zoom:80%;"><img src="D:\blog\source\_posts\img\image-20200319205837999.png" alt="image-20200319205837999" style="zoom:80%;"><h5 id="网络yum源"><a href="#网络yum源" class="headerlink" title="网络yum源"></a>网络yum源</h5><img src="D:\blog\source\_posts\img\image-20200321110610375.png" alt="image-20200321110610375" style="zoom:80%;"><h5 id="常用的yum命令"><a href="#常用的yum命令" class="headerlink" title="常用的yum命令"></a>常用的yum命令</h5><pre><code>yum list        查询所有可用软件包列表yum search        搜索服务器上所有和关键字相关的包yum -y install [包名]            -y 自动回答yes 下载yum -y update [包名]            升级，切记带上包名，否则会更新所有的包，包括linux内核，内核更新需要重新配置，远程会断开连接，切记不要远程使用；yum -y remove [包名]            卸载，不推荐使用，会先卸载依赖包，有可能此包的依赖包同时被linux内核依赖。</code></pre><h5 id="yum软件组管理命令"><a href="#yum软件组管理命令" class="headerlink" title="yum软件组管理命令"></a>yum软件组管理命令</h5><pre><code>yum grouplist             列出所有可用的软件组列表yum groupinstall [软件组名]        安装指定软件组，组名可以由grouplist查询出来yum    groupremove     [软件组名]        卸载指定软件组名</code></pre><h5 id="光盘yum源搭建步骤"><a href="#光盘yum源搭建步骤" class="headerlink" title="光盘yum源搭建步骤"></a>光盘yum源搭建步骤</h5><pre><code>mount /dev/cdrom  /mnt/cdrom            挂载光盘让网络yum源文件失效cd /etc/yum.repos.dmv CentOS-Base.repo \ CentOS-Base.repo.bakmv CentOS-Debudinfo.repo \ CentOS-Debuginfo.repo.bakmv CentOS-Vault.repo \ CentOS-Vault.repo.bak</code></pre><img src="D:\blog\source\_posts\img\image-20200321145806607.png" alt="image-20200321145806607" style="zoom:80%;"><h3 id="三、用户和用户组管理"><a href="#三、用户和用户组管理" class="headerlink" title="三、用户和用户组管理"></a>三、用户和用户组管理</h3><h5 id="用户配置文件"><a href="#用户配置文件" class="headerlink" title="用户配置文件"></a>用户配置文件</h5><p><u>/<strong>etc/passwd</strong></u></p><ol><li>第一个字段：用户名</li><li>第二个字段：密码标志</li><li>第三个字段：UID（用户ID）<ul><li>0：超级用户</li><li>1-499：系统用户（伪用户）</li><li>500-65535：普通用户</li></ul></li><li>第四个字段：GID（用户初始组ID）</li><li>第五个字段：用户说明</li><li>第六个字段：家目录<ul><li>普通用户：/home/用户名/</li><li>超级用户：/root/</li></ul></li><li>登陆之后的shell<ul><li>shell就是Linux的命令解释器</li><li>zai/etc/passwd中，除了标准shell是/bin/bash/之外，还可以写如/sbin/nologin</li></ul></li></ol><p><strong>影子文件</strong>：<code>/etc/shadow</code></p><ol><li>第一个字段：用户名</li><li>第二个字段：加密密码<ul><li>加密算法升级为SHA512散列加密算法</li><li>密码位是“！！”或“*”代表没有密码，不能登录</li></ul></li><li>第三个字段：密码最后修改日期：<em>以时间戳表示（天为单位）</em></li><li>两次密码的修改时间间隔，与第三个字段相比</li><li>密码有效期，与第三个字段相比</li><li>密码修改到期前的警告天数，与第5个字段相比</li><li>密码过期后的宽限天数，与第5个字段相比<ul><li>0：代表密码过期后立即失效</li><li>-1：代表密码永远不会失效</li></ul></li><li>账号失效时间，<em>时间戳表示</em></li><li>保留</li></ol><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 兄弟连 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mybaits学习笔记</title>
      <link href="/2018/09/12/mybatis/"/>
      <url>/2018/09/12/mybatis/</url>
      
        <content type="html"><![CDATA[<h1 id="mybatis的入门"><a href="#mybatis的入门" class="headerlink" title="mybatis的入门"></a>mybatis的入门</h1><h3 id="mybatis的环境搭建"><a href="#mybatis的环境搭建" class="headerlink" title="mybatis的环境搭建"></a>mybatis的环境搭建</h3><ul><li>第一步：创建maven工程并导入坐标</li><li>第二步：创建实体类和dao的接口</li><li>第三步：创建mybatis的主配置文件       <em>例：SqlMapConfig.xml</em></li><li>第四步：创建映射配置文件                    <em>例：IUserDao.xml       i表示接口</em></li></ul><blockquote><p><strong>环境搭建的注意事项：</strong></p></blockquote><ol><li>在创建<code>IUserDao.xml</code>和I<code>UserDao.java</code>时名称是为了和之前的知识保持一致，在MyBatis中它把持久层的操作接口名称和映射文件也叫做：<strong>Mapper</strong></li><li>在idea中创建项目的时候，目录和包是不一样的；<ul><li>包在创建时：<code>com.yuan.dao</code> 是三级结构；</li><li>目录在创建时：<code>com.yuan.dao</code> 是一级目录；</li></ul></li><li>MyBatis的映射配置文件位置必须和dao接口的包结构相同</li><li>映射配置文件的<code>mapper</code>标签<code>namespace</code>属性的取值必须是dao接口的全限定类名</li><li>映射配置文件的操作配置，id属性的取值必须是dao接口的方法名</li></ol><p>当我们遵从3、4、5点之后，我们的开发就无需再写dao的实现类</p><blockquote><p>三层架构图</p></blockquote><p><img src="/img/01%E4%B8%89%E5%B1%82%E6%9E%B6%E6%9E%84.png" alt="三层架构"></p><blockquote><p>持久层总图</p></blockquote><p><img src="/img/02%E6%8C%81%E4%B9%85%E5%B1%82%E6%80%BB%E5%9B%BE.jpg" alt="持久层总图"></p><h3 id="mybatis的入门案例"><a href="#mybatis的入门案例" class="headerlink" title="mybatis的入门案例"></a>mybatis的入门案例</h3><ol><li>第一步：读取配置文件</li><li>第二步：创建SqlSessionFactory工厂</li><li>第三步：创建SqlSession</li><li>第四步：创建Dao接口的代理对象</li><li>第五步：执行dao中的方法</li><li>第六步：释放资源</li></ol><blockquote><p>入门案列分析图</p></blockquote><p><img src="/img/%E5%85%A5%E9%97%A8%E6%A1%88%E4%BE%8B%E7%9A%84%E5%88%86%E6%9E%90.png" alt="入门案例分析"></p><blockquote><p>查询数据库分析图</p></blockquote><p><img src="/img/%E6%9F%A5%E8%AF%A2%E6%89%80%E6%9C%89%E7%9A%84%E5%88%86%E6%9E%90.png" alt="查询数据库分析"></p><blockquote><p><strong>注意事项：</strong></p></blockquote><ul><li>不要忘记在映射配置中告知mybatis要封装到哪个实体类中</li><li>配置的方式：指定实体类的全限定类名</li></ul><h3 id="mybatis基于注解的入门案例："><a href="#mybatis基于注解的入门案例：" class="headerlink" title="mybatis基于注解的入门案例："></a>mybatis基于注解的入门案例：</h3><ul><li>把IUserDao.xml移除，在dao接口的方法上使用@Select注解，并指定sql语句</li><li>同时需要在SqlMapConfig.xml中的mapper配置是，使用class属性指定dao接口的全限定类名</li><li>注意：<ul><li>在实际开发中，都是越简便越好，所以都是采用不写dao实现类的方式，不管使用XML还是注解配置</li><li>Mybatis支持写dao实现类的</li></ul></li></ul><h3 id="自定义Mybatis的分析："><a href="#自定义Mybatis的分析：" class="headerlink" title="自定义Mybatis的分析："></a>自定义Mybatis的分析：</h3><blockquote><p>自定义mybatis分析图</p></blockquote><p><img src="/img/%E8%87%AA%E5%AE%9A%E4%B9%89Mybatis%E5%88%86%E6%9E%90.png" alt=""></p><ul><li>mybatis在使用代理dao的方式实现增删改查是做什么事呢？<ul><li>第一：创建代理对象</li><li>在代理对象中调用selectList</li></ul></li></ul><p>自定义mybatis能通过入门案例看到的类</p><ul><li><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Resources</span>   <span class="token comment" spellcheck="true">// 使用类加载器读取配置文件的类</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SqlSessionFactoryBuilder</span>  <span class="token comment" spellcheck="true">// 用于创建一个SqlSessionFactory对象</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">SqlSessionFactory</span>   <span class="token comment" spellcheck="true">// 用于打开一个新的SqlSession对象</span></code></pre></li><li><pre class=" language-java"><code class="language-java"><span class="token keyword">interface</span> <span class="token class-name">SqlSession</span>   <span class="token comment" spellcheck="true">// 自定义Mybatis中和数据库交互的核心类，里面可以创建dao接口的代理对象</span></code></pre></li></ul><blockquote><p>自定义mybatis开发流程图</p></blockquote><p><img src="/img/%E8%87%AA%E5%AE%9A%E4%B9%89mybatis%E5%BC%80%E5%8F%91%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt=""></p><h3 id="Mybatis主配置文件中的常用配置"><a href="#Mybatis主配置文件中的常用配置" class="headerlink" title="Mybatis主配置文件中的常用配置"></a>Mybatis主配置文件中的常用配置</h3><ul><li>properties标签</li><li>typeAliases标签</li><li>mapper标签的子标签：package</li></ul><hr><blockquote><p>OGNL表达式</p></blockquote><ul><li>Object Graphic Navigation Language（对象图导航语言）</li><li>它是通过对象的取值方法来获取数据，在写法上把get给省略了<ul><li>类中的写法：user.getUsername();</li><li>OGNL表达式写法：user.username</li></ul></li></ul><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 编程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 框架 </tag>
            
            <tag> mybatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>uml学习笔记</title>
      <link href="/2018/09/05/uml-xue-xi/"/>
      <url>/2018/09/05/uml-xue-xi/</url>
      
        <content type="html"><![CDATA[<p>UML</p><p>1、OOAD(Object Oriented Analysis and Design),面向对象的分析与设计</p><p>2、UML(Unified Modeling Language),统一建模语言</p><h5 id="静态建模"><a href="#静态建模" class="headerlink" title="静态建模"></a>静态建模</h5><p>创建并记录一个系统的静态特征</p><p>反映一个软件系统基础、固定的框架结构</p><p>创建相关问题域主要元素的视图</p><p>包括  ：</p><p>—— ==用例图 （use case diagrams）==</p><p>—— ==类图 （class diagrams）==</p><p>—— 对象图 （object diagrams）</p><p>—— 组件图 （component diagrams）</p><p>—— 部署图 （deployment diagrams）</p><h5 id="动态建模"><a href="#动态建模" class="headerlink" title="动态建模"></a>动态建模</h5><p>动态建模用以展示系统的行为</p><p>包括：</p><p>—— ==时序图（sequence diagrams）==</p><p>—— 协作图 （collaboration diagrams）</p><p>—— 状态图 （state chart diagrams）</p><p>—— 活动图 （activity diagrams）</p><h5 id="用例图"><a href="#用例图" class="headerlink" title="用例图"></a>用例图</h5><p>展示系统的核心功能及与其交互的用户</p><p>用户被称为“活动者”（Actor），用例使用椭圆表示</p><p>为简化建模过程，用例图可标注优先级</p><h5 id="类图"><a href="#类图" class="headerlink" title="类图"></a>类图</h5><p>表示类的特征</p><p>类图描述了多个类、接口的特征，以及对象之间的协作和交互</p><p>由一个或多个矩形区域构成，内容包括：</p><p>—— 类型（类名）</p><p>—— 属性 （可选）</p><p>—— 操作（可选）</p><p>在<code>UML类图</code>中，常见的有以下<code>几种关系</code>: 泛化（Generalization）, 实现（Realization），关联（Association)，聚合（Aggregation），组合(Composition)，依赖(Dependency)</p><p><code>1.泛化</code>（Generalization）<br>【泛化关系】：是一种<code>继承关系</code>，表示一般与特殊的关系，它指定了子类如何特化父类的所有特征和行为。例如：老虎是动物的一种，即有老虎的特性也有动物的共性。<br>【箭头指向】：带三角箭头的实线，箭头指向父类</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200324162202257.png" alt="image-20200324162202257" style="zoom:80%;"><p>2.实现（Realization）<br>【实现关系】：是一种类与接口的关系，表示类是接口所有特征和行为的实现.<br>【箭头指向】：带三角箭头的虚线，箭头指向接口</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200324162216848.png" alt="image-20200324162216848" style="zoom:80%;"><p>3。关联（Association)<br>【关联关系】：是一种拥有的关系，它使一个类知道另一个类的属性和方法；如：老师与学生，丈夫与妻子关联可以是双向的，也可以是单向的。双向的关联可以有两个箭头或者没有箭头，单向的关联有一个箭头。<br>【代码体现】：成员变量<br>【箭头及指向】：带普通箭头的实心线，指向被拥有者<br>4.聚合（Aggregation）<br>【聚合关系】：是整体与部分的关系，且部分可以离开整体而单独存在。如车和轮胎是整体和部分的关系，轮胎离开车仍然可以存在。<br>聚合关系是关联关系的一种，是强的关联关系；关联和聚合在语法上无法区分，必须考察具体的逻辑关系。<br>【代码体现】：成员变量<br>【箭头及指向】：带空心菱形的实心线，菱形指向整体<br><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200324162445297.png" alt="image-20200324162445297" style="zoom:80%;"></p><p>5.组合(Composition)<br>【组合关系】：是整体与部分的关系，但部分不能离开整体而单独存在。如公司和部门是整体和部分的关系，没有公司就不存在部门。组合关系是关联关系的一种，是比聚合关系还要强的关系，它要求普通的聚合关系中代表整体的对象负责代表部分的对象的生命周期。<br>【代码体现】：成员变量<br>【箭头及指向】：带实心菱形的实线，菱形指向整体</p><p>6.依赖(Dependency)<br>【依赖关系】：是一种使用的关系，即一个类的实现需要另一个类的协助，所以要尽量不使用双向的互相依赖.<br>【代码表现】：局部变量、方法的参数或者对静态方法的调用<br>【箭头及指向】：带箭头的虚线，指向被使用者</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200324162541738.png" alt="image-20200324162541738" style="zoom:80%;"><p>各种关系的强弱顺序：<br>泛化 = 实现 &gt; 组合 &gt; 聚合 &gt; 关联 &gt; 依赖</p><img src="C:\Users\lenovo\AppData\Roaming\Typora\typora-user-images\image-20200324162617119.png" alt="image-20200324162617119" style="zoom:80%;"><pre><code>注意这里的雁群和大雁的关系画反了</code></pre><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> uml </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
